// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guestService.proto

package protobuf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GuestService service

type GuestServiceClient interface {
	CreateUser(ctx context.Context, in *CreateGuestRequest, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetGuestRequest, opts ...grpc.CallOption) (*User, error)
}

type guestServiceClient struct {
	cc *grpc.ClientConn
}

func NewGuestServiceClient(cc *grpc.ClientConn) GuestServiceClient {
	return &guestServiceClient{cc}
}

func (c *guestServiceClient) CreateUser(ctx context.Context, in *CreateGuestRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.GuestService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestServiceClient) GetUser(ctx context.Context, in *GetGuestRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.GuestService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GuestService service

type GuestServiceServer interface {
	CreateUser(context.Context, *CreateGuestRequest) (*User, error)
	GetUser(context.Context, *GetGuestRequest) (*User, error)
}

func RegisterGuestServiceServer(s *grpc.Server, srv GuestServiceServer) {
	s.RegisterService(&_GuestService_serviceDesc, srv)
}

func _GuestService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.GuestService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServiceServer).CreateUser(ctx, req.(*CreateGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.GuestService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServiceServer).GetUser(ctx, req.(*GetGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swagchat.protobuf.GuestService",
	HandlerType: (*GuestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _GuestService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _GuestService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guestService.proto",
}

func init() { proto.RegisterFile("guestService.proto", fileDescriptorGuestService) }

var fileDescriptorGuestService = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x2f, 0x4d, 0x2d,
	0x2e, 0x09, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12,
	0x2c, 0x2e, 0x4f, 0x4c, 0x4f, 0xce, 0x48, 0x2c, 0x81, 0xf0, 0x93, 0x4a, 0xd3, 0xa4, 0x64, 0xd2,
	0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12,
	0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x21, 0x0a, 0xa4, 0x20, 0x86, 0xf8, 0xa6, 0x16, 0x17, 0x27, 0xa6,
	0x43, 0x0d, 0x91, 0x12, 0x2c, 0x2d, 0x4e, 0x2d, 0x42, 0x11, 0x32, 0x5a, 0xc1, 0xc8, 0xc5, 0xe3,
	0x8e, 0x64, 0x9d, 0x90, 0x1f, 0x17, 0x97, 0x73, 0x51, 0x6a, 0x62, 0x49, 0x6a, 0x68, 0x71, 0x6a,
	0x91, 0x90, 0xaa, 0x1e, 0x86, 0xbd, 0x7a, 0x10, 0x69, 0xb0, 0xa6, 0xa0, 0xd4, 0x42, 0x10, 0x25,
	0x25, 0x8e, 0x45, 0x19, 0x48, 0xbf, 0x12, 0x83, 0x90, 0x07, 0x17, 0xbb, 0x7b, 0x6a, 0x09, 0xd8,
	0x30, 0x25, 0x2c, 0xaa, 0xdc, 0x53, 0x4b, 0x88, 0x34, 0xc9, 0x49, 0x2e, 0x4a, 0x26, 0x3d, 0xb3,
	0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xa6, 0x4c, 0x1f, 0xa6, 0x2c, 0x89, 0x0d,
	0xcc, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xd0, 0xb2, 0x9c, 0x3f, 0x01, 0x00, 0x00,
}
