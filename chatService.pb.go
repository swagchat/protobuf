// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chatService.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatIncoming service

type ChatIncomingClient interface {
	PostMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type chatIncomingClient struct {
	cc *grpc.ClientConn
}

func NewChatIncomingClient(cc *grpc.ClientConn) ChatIncomingClient {
	return &chatIncomingClient{cc}
}

func (c *chatIncomingClient) PostMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.ChatIncoming/PostMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatIncoming service

type ChatIncomingServer interface {
	PostMessage(context.Context, *Message) (*google_protobuf1.Empty, error)
}

func RegisterChatIncomingServer(s *grpc.Server, srv ChatIncomingServer) {
	s.RegisterService(&_ChatIncoming_serviceDesc, srv)
}

func _ChatIncoming_PostMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatIncomingServer).PostMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.ChatIncoming/PostMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatIncomingServer).PostMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatIncoming_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swagchat.protobuf.ChatIncoming",
	HandlerType: (*ChatIncomingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostMessage",
			Handler:    _ChatIncoming_PostMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatService.proto",
}

// Client API for ChatOutgoing service

type ChatOutgoingClient interface {
	PostWebhookRoom(ctx context.Context, in *Room, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	PostWebhookMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type chatOutgoingClient struct {
	cc *grpc.ClientConn
}

func NewChatOutgoingClient(cc *grpc.ClientConn) ChatOutgoingClient {
	return &chatOutgoingClient{cc}
}

func (c *chatOutgoingClient) PostWebhookRoom(ctx context.Context, in *Room, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.ChatOutgoing/PostWebhookRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatOutgoingClient) PostWebhookMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.ChatOutgoing/PostWebhookMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatOutgoing service

type ChatOutgoingServer interface {
	PostWebhookRoom(context.Context, *Room) (*google_protobuf1.Empty, error)
	PostWebhookMessage(context.Context, *Message) (*google_protobuf1.Empty, error)
}

func RegisterChatOutgoingServer(s *grpc.Server, srv ChatOutgoingServer) {
	s.RegisterService(&_ChatOutgoing_serviceDesc, srv)
}

func _ChatOutgoing_PostWebhookRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Room)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatOutgoingServer).PostWebhookRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.ChatOutgoing/PostWebhookRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatOutgoingServer).PostWebhookRoom(ctx, req.(*Room))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatOutgoing_PostWebhookMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatOutgoingServer).PostWebhookMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.ChatOutgoing/PostWebhookMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatOutgoingServer).PostWebhookMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatOutgoing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swagchat.protobuf.ChatOutgoing",
	HandlerType: (*ChatOutgoingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostWebhookRoom",
			Handler:    _ChatOutgoing_PostWebhookRoom_Handler,
		},
		{
			MethodName: "PostWebhookMessage",
			Handler:    _ChatOutgoing_PostWebhookMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatService.proto",
}

// Client API for UserService service

type UserServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.UserService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.UserService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swagchat.protobuf.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatService.proto",
}

// Client API for UserRoleService service

type UserRoleServiceClient interface {
	PostUserRole(ctx context.Context, in *PostUserRoleReq, opts ...grpc.CallOption) (*UserRole, error)
	GetRoleIDsOfUserRole(ctx context.Context, in *GetRoleIDsOfUserRoleReq, opts ...grpc.CallOption) (*RoleIDs, error)
	GetUserIDsOfUserRole(ctx context.Context, in *GetUserIDsOfUserRoleReq, opts ...grpc.CallOption) (*UserIDs, error)
	DeleteUserRole(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type userRoleServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserRoleServiceClient(cc *grpc.ClientConn) UserRoleServiceClient {
	return &userRoleServiceClient{cc}
}

func (c *userRoleServiceClient) PostUserRole(ctx context.Context, in *PostUserRoleReq, opts ...grpc.CallOption) (*UserRole, error) {
	out := new(UserRole)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.UserRoleService/PostUserRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) GetRoleIDsOfUserRole(ctx context.Context, in *GetRoleIDsOfUserRoleReq, opts ...grpc.CallOption) (*RoleIDs, error) {
	out := new(RoleIDs)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.UserRoleService/GetRoleIDsOfUserRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) GetUserIDsOfUserRole(ctx context.Context, in *GetUserIDsOfUserRoleReq, opts ...grpc.CallOption) (*UserIDs, error) {
	out := new(UserIDs)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.UserRoleService/GetUserIDsOfUserRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRoleServiceClient) DeleteUserRole(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.UserRoleService/DeleteUserRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserRoleService service

type UserRoleServiceServer interface {
	PostUserRole(context.Context, *PostUserRoleReq) (*UserRole, error)
	GetRoleIDsOfUserRole(context.Context, *GetRoleIDsOfUserRoleReq) (*RoleIDs, error)
	GetUserIDsOfUserRole(context.Context, *GetUserIDsOfUserRoleReq) (*UserIDs, error)
	DeleteUserRole(context.Context, *UserRole) (*google_protobuf1.Empty, error)
}

func RegisterUserRoleServiceServer(s *grpc.Server, srv UserRoleServiceServer) {
	s.RegisterService(&_UserRoleService_serviceDesc, srv)
}

func _UserRoleService_PostUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).PostUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.UserRoleService/PostUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).PostUserRole(ctx, req.(*PostUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_GetRoleIDsOfUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleIDsOfUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).GetRoleIDsOfUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.UserRoleService/GetRoleIDsOfUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).GetRoleIDsOfUserRole(ctx, req.(*GetRoleIDsOfUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_GetUserIDsOfUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIDsOfUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).GetUserIDsOfUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.UserRoleService/GetUserIDsOfUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).GetUserIDsOfUserRole(ctx, req.(*GetUserIDsOfUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRoleService_DeleteUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRoleServiceServer).DeleteUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.UserRoleService/DeleteUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRoleServiceServer).DeleteUserRole(ctx, req.(*UserRole))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserRoleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swagchat.protobuf.UserRoleService",
	HandlerType: (*UserRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostUserRole",
			Handler:    _UserRoleService_PostUserRole_Handler,
		},
		{
			MethodName: "GetRoleIDsOfUserRole",
			Handler:    _UserRoleService_GetRoleIDsOfUserRole_Handler,
		},
		{
			MethodName: "GetUserIDsOfUserRole",
			Handler:    _UserRoleService_GetUserIDsOfUserRole_Handler,
		},
		{
			MethodName: "DeleteUserRole",
			Handler:    _UserRoleService_DeleteUserRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatService.proto",
}

// Client API for RoomUserService service

type RoomUserServiceClient interface {
	PostRoomUser(ctx context.Context, in *PostRoomUserReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetUserIDsOfRoomUser(ctx context.Context, in *GetUserIDsOfRoomUserReq, opts ...grpc.CallOption) (*UserIDs, error)
	DeleteRoomUser(ctx context.Context, in *DeleteRoomUserReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type roomUserServiceClient struct {
	cc *grpc.ClientConn
}

func NewRoomUserServiceClient(cc *grpc.ClientConn) RoomUserServiceClient {
	return &roomUserServiceClient{cc}
}

func (c *roomUserServiceClient) PostRoomUser(ctx context.Context, in *PostRoomUserReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.RoomUserService/PostRoomUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomUserServiceClient) GetUserIDsOfRoomUser(ctx context.Context, in *GetUserIDsOfRoomUserReq, opts ...grpc.CallOption) (*UserIDs, error) {
	out := new(UserIDs)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.RoomUserService/GetUserIDsOfRoomUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomUserServiceClient) DeleteRoomUser(ctx context.Context, in *DeleteRoomUserReq, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.RoomUserService/DeleteRoomUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoomUserService service

type RoomUserServiceServer interface {
	PostRoomUser(context.Context, *PostRoomUserReq) (*google_protobuf1.Empty, error)
	GetUserIDsOfRoomUser(context.Context, *GetUserIDsOfRoomUserReq) (*UserIDs, error)
	DeleteRoomUser(context.Context, *DeleteRoomUserReq) (*google_protobuf1.Empty, error)
}

func RegisterRoomUserServiceServer(s *grpc.Server, srv RoomUserServiceServer) {
	s.RegisterService(&_RoomUserService_serviceDesc, srv)
}

func _RoomUserService_PostRoomUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRoomUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomUserServiceServer).PostRoomUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.RoomUserService/PostRoomUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomUserServiceServer).PostRoomUser(ctx, req.(*PostRoomUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomUserService_GetUserIDsOfRoomUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIDsOfRoomUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomUserServiceServer).GetUserIDsOfRoomUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.RoomUserService/GetUserIDsOfRoomUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomUserServiceServer).GetUserIDsOfRoomUser(ctx, req.(*GetUserIDsOfRoomUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomUserService_DeleteRoomUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomUserServiceServer).DeleteRoomUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.RoomUserService/DeleteRoomUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomUserServiceServer).DeleteRoomUser(ctx, req.(*DeleteRoomUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoomUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swagchat.protobuf.RoomUserService",
	HandlerType: (*RoomUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostRoomUser",
			Handler:    _RoomUserService_PostRoomUser_Handler,
		},
		{
			MethodName: "GetUserIDsOfRoomUser",
			Handler:    _RoomUserService_GetUserIDsOfRoomUser_Handler,
		},
		{
			MethodName: "DeleteRoomUser",
			Handler:    _RoomUserService_DeleteRoomUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatService.proto",
}

func init() { proto.RegisterFile("chatService.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x9b, 0x22, 0x81, 0xb4, 0x8d, 0x1a, 0xb2, 0x40, 0x01, 0x37, 0x42, 0xc2, 0xe2, 0x94,
	0x83, 0x2d, 0x99, 0x5b, 0x8f, 0xa4, 0x28, 0xea, 0xa1, 0x2a, 0x4a, 0x85, 0x10, 0x48, 0x1c, 0xd6,
	0xd1, 0xc4, 0xb6, 0x88, 0x3d, 0xa9, 0x77, 0x4d, 0xe1, 0xca, 0x2b, 0xf0, 0x0c, 0xbc, 0x0b, 0x67,
	0x10, 0x6f, 0xc0, 0x83, 0xa0, 0x59, 0xef, 0xda, 0x46, 0x59, 0xb7, 0x95, 0x7a, 0x89, 0xec, 0x99,
	0xdf, 0xff, 0xb7, 0xfb, 0xcf, 0x6e, 0xd8, 0x78, 0x99, 0x0a, 0x75, 0x0e, 0xe5, 0xe7, 0x6c, 0x09,
	0xc1, 0xa6, 0x44, 0x85, 0x7c, 0x2c, 0x2f, 0x45, 0x42, 0xe5, 0xfa, 0x3d, 0xae, 0x56, 0xde, 0x24,
	0x41, 0x4c, 0xd6, 0x10, 0x8a, 0x4d, 0x16, 0x8a, 0xa2, 0x40, 0x25, 0x54, 0x86, 0x85, 0xac, 0x05,
	0xde, 0xa1, 0xe9, 0x5a, 0x79, 0x08, 0xf9, 0x46, 0x7d, 0x35, 0x4d, 0x0d, 0x38, 0x05, 0x29, 0x45,
	0x62, 0x00, 0xd1, 0x39, 0x1b, 0xce, 0x52, 0xa1, 0x4e, 0x8a, 0x25, 0xe6, 0x59, 0x91, 0xf0, 0x19,
	0xdb, 0x7b, 0x83, 0xd2, 0x8a, 0xb8, 0x17, 0x6c, 0x2d, 0x20, 0x30, 0x3d, 0xef, 0x20, 0xa8, 0x59,
	0x6d, 0xe7, 0x35, 0xb1, 0xfc, 0x9d, 0xe8, 0xcf, 0xa0, 0x76, 0x3d, 0xab, 0x54, 0x82, 0xe4, 0xfa,
	0x91, 0x8d, 0xc8, 0xf5, 0x1d, 0xc4, 0x29, 0xe2, 0xa7, 0x05, 0x62, 0xce, 0x1f, 0x3b, 0x9c, 0xa9,
	0xd1, 0x6b, 0xfb, 0xf4, 0xdb, 0xef, 0xbf, 0xdf, 0x77, 0x1f, 0xf8, 0xfb, 0xe1, 0x65, 0x6d, 0x23,
	0xc3, 0x12, 0x31, 0x3f, 0x1a, 0x4c, 0xf9, 0x8a, 0xf1, 0x8e, 0xfd, 0x6d, 0xd6, 0x3e, 0xd1, 0x90,
	0x03, 0x7f, 0xdc, 0x42, 0xf2, 0xfa, 0x93, 0xa3, 0xc1, 0x34, 0xfa, 0x31, 0x60, 0x7b, 0x6f, 0x25,
	0x94, 0x66, 0x46, 0xfc, 0x94, 0xb1, 0x59, 0x09, 0x42, 0x01, 0x15, 0xf9, 0x0b, 0x07, 0xaf, 0x6d,
	0x2f, 0xe0, 0xa2, 0x02, 0xa9, 0x3c, 0xd7, 0xbe, 0xa9, 0xef, 0xef, 0xf0, 0x39, 0xbb, 0x37, 0x07,
	0xa5, 0xbd, 0x9e, 0x3b, 0x54, 0xa6, 0x77, 0xbd, 0x51, 0xf4, 0xf3, 0x0e, 0x1b, 0x69, 0x29, 0xae,
	0xc1, 0xae, 0x75, 0xc5, 0x86, 0x94, 0x91, 0x2d, 0x73, 0xdf, 0xf1, 0x79, 0x57, 0xb0, 0x80, 0x0b,
	0xef, 0xb0, 0x07, 0x41, 0x7d, 0xff, 0x91, 0x8e, 0x6a, 0xe4, 0xb3, 0xb0, 0x32, 0x25, 0x49, 0xb3,
	0xf8, 0xc2, 0x1e, 0xce, 0x41, 0xd1, 0xeb, 0xc9, 0xb1, 0x3c, 0x5b, 0x35, 0xbc, 0xa9, 0x7b, 0x47,
	0x5b, 0x42, 0xe2, 0x7a, 0xce, 0xb3, 0xa1, 0x85, 0xfe, 0x13, 0x8d, 0xe5, 0xfc, 0x7e, 0x8b, 0x0d,
	0x4b, 0xfa, 0x35, 0x64, 0xf2, 0xb9, 0x11, 0x79, 0x4b, 0xd8, 0x47, 0x36, 0x42, 0x27, 0x99, 0x9e,
	0x24, 0x7f, 0xcf, 0xf6, 0x8f, 0x61, 0x0d, 0x66, 0xd0, 0xc4, 0xbc, 0x2a, 0xb9, 0xde, 0xc3, 0xc7,
	0x35, 0x60, 0x38, 0xed, 0x24, 0x1a, 0xfd, 0xda, 0x65, 0x23, 0xba, 0x16, 0xdd, 0x63, 0x27, 0xea,
	0x51, 0xda, 0x72, 0xef, 0x28, 0xad, 0x80, 0x36, 0xd6, 0xc7, 0x6c, 0xa7, 0x58, 0x1a, 0x75, 0x67,
	0x8a, 0x4d, 0x44, 0x0d, 0xea, 0xba, 0x2c, 0xbb, 0xc8, 0x9b, 0x65, 0xd9, 0x60, 0x4d, 0x96, 0xb1,
	0xcd, 0xb2, 0x61, 0xba, 0xee, 0xd5, 0xff, 0x92, 0xab, 0x36, 0xd8, 0x86, 0xda, 0x90, 0x5e, 0x3d,
	0xfb, 0x30, 0x49, 0x32, 0x95, 0x56, 0x71, 0xb0, 0xc4, 0x3c, 0xb4, 0xee, 0xcd, 0x7f, 0x66, 0x7c,
	0x57, 0x3f, 0xbd, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x46, 0xc0, 0xcd, 0x91, 0x05, 0x00,
	0x00,
}
