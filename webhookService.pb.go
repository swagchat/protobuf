// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: webhookService.proto

package protobuf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Webhook service

type WebhookClient interface {
	RoomCreationEvent(ctx context.Context, in *Room, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	MessageSendEvent(ctx context.Context, in *Message, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type webhookClient struct {
	cc *grpc.ClientConn
}

func NewWebhookClient(cc *grpc.ClientConn) WebhookClient {
	return &webhookClient{cc}
}

func (c *webhookClient) RoomCreationEvent(ctx context.Context, in *Room, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.Webhook/RoomCreationEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) MessageSendEvent(ctx context.Context, in *Message, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.Webhook/MessageSendEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Webhook service

type WebhookServer interface {
	RoomCreationEvent(context.Context, *Room) (*google_protobuf1.Empty, error)
	MessageSendEvent(context.Context, *Message) (*google_protobuf1.Empty, error)
}

func RegisterWebhookServer(s *grpc.Server, srv WebhookServer) {
	s.RegisterService(&_Webhook_serviceDesc, srv)
}

func _Webhook_RoomCreationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Room)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).RoomCreationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.Webhook/RoomCreationEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).RoomCreationEvent(ctx, req.(*Room))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_MessageSendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).MessageSendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.Webhook/MessageSendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).MessageSendEvent(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Webhook_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swagchat.protobuf.Webhook",
	HandlerType: (*WebhookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoomCreationEvent",
			Handler:    _Webhook_RoomCreationEvent_Handler,
		},
		{
			MethodName: "MessageSendEvent",
			Handler:    _Webhook_MessageSendEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhookService.proto",
}

func init() { proto.RegisterFile("webhookService.proto", fileDescriptorWebhookService) }

var fileDescriptorWebhookService = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x4f, 0x4d, 0xca,
	0xc8, 0xcf, 0xcf, 0x0e, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0x2c, 0x2e, 0x4f, 0x4c, 0x4f, 0xce, 0x48, 0x2c, 0x81, 0xf0, 0x93, 0x4a, 0xd3, 0xa4,
	0x64, 0xd2, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2,
	0x4b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x21, 0x0a, 0xa4, 0xa4, 0xa1, 0xb2, 0x30, 0xe5, 0xfa,
	0xa9, 0xb9, 0x05, 0x25, 0x95, 0x50, 0x49, 0x91, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x5f,
	0x08, 0x05, 0x15, 0x15, 0x2c, 0xca, 0xcf, 0xcf, 0x45, 0x11, 0x32, 0xba, 0xc0, 0xc8, 0xc5, 0x1e,
	0x0e, 0x71, 0x8f, 0x50, 0x3c, 0x97, 0x60, 0x50, 0x7e, 0x7e, 0xae, 0x73, 0x51, 0x2a, 0xd8, 0x22,
	0xd7, 0xb2, 0xd4, 0xbc, 0x12, 0x21, 0x71, 0x3d, 0x0c, 0x87, 0xe9, 0x81, 0x54, 0x49, 0x89, 0xe9,
	0x41, 0x1c, 0x80, 0x10, 0x76, 0x05, 0x39, 0x40, 0x49, 0xb2, 0xe9, 0xf2, 0x93, 0xc9, 0x4c, 0xc2,
	0x4a, 0x7c, 0xfa, 0x50, 0x7f, 0x16, 0xeb, 0x83, 0xac, 0xb5, 0x62, 0xd4, 0x12, 0x4a, 0xe1, 0x12,
	0x80, 0xda, 0x1e, 0x9c, 0x9a, 0x97, 0x02, 0x31, 0x5f, 0x0a, 0x8b, 0xf9, 0x50, 0x45, 0x38, 0xad,
	0x90, 0x01, 0x5b, 0x21, 0xa6, 0x24, 0x88, 0xb0, 0x02, 0xea, 0x5f, 0x2b, 0x46, 0x2d, 0x27, 0xb9,
	0x28, 0x99, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x98, 0xe9, 0xf0,
	0x70, 0x4a, 0x62, 0x03, 0xb3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x23, 0xe5, 0xb8,
	0x88, 0x01, 0x00, 0x00,
}
