// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chatMessage.proto

/*
	Package protobuf is a generated protocol buffer package.

	It is generated from these files:
		chatMessage.proto
		chatService.proto

	It has these top-level messages:
		User
		CreateUserRequest
		GetUserRequest
		Device
		RoomForUser
		UserForRoom
		Room
		Messages
		Message
		MessagePayload
		RoomIds
		UserIds
		RoleIds
		UserRole
		CreateUserRolesRequest
		GetUserIdsOfUserRoleRequest
		GetRoleIdsOfUserRoleRequest
		DeleteUserRoleRequest
		RoomUser
		CreateRoomUsersRequest
		UpdateRoomUserRequest
		GetUserIdsOfRoomUserRequest
		DeleteRoomUserRequest
		Struct
		Value
		ListValue
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RoomType int32

const (
	RoomType_NONE        RoomType = 0
	RoomType_OneOnOne    RoomType = 1
	RoomType_PrivateRoom RoomType = 2
	RoomType_PublicRoom  RoomType = 3
	RoomType_NoticeRoom  RoomType = 4
	RoomType_RoomTypeEnd RoomType = 5
)

var RoomType_name = map[int32]string{
	0: "NONE",
	1: "OneOnOne",
	2: "PrivateRoom",
	3: "PublicRoom",
	4: "NoticeRoom",
	5: "RoomTypeEnd",
}
var RoomType_value = map[string]int32{
	"NONE":        0,
	"OneOnOne":    1,
	"PrivateRoom": 2,
	"PublicRoom":  3,
	"NoticeRoom":  4,
	"RoomTypeEnd": 5,
}

func (x RoomType) String() string {
	return proto.EnumName(RoomType_name, int32(x))
}
func (RoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{0} }

type SpeechMode int32

const (
	SpeechMode_SpeechModeNone               SpeechMode = 0
	SpeechMode_SpeechModeWakeupWebToWeb     SpeechMode = 1
	SpeechMode_SpeechModeWakeupWebToCloud   SpeechMode = 2
	SpeechMode_SpeechModeWakeupCloudToCloud SpeechMode = 3
	SpeechMode_SpeechModeAlways             SpeechMode = 4
	SpeechMode_SpeechModeManual             SpeechMode = 5
	SpeechMode_SpeechModeEnd                SpeechMode = 6
)

var SpeechMode_name = map[int32]string{
	0: "SpeechModeNone",
	1: "SpeechModeWakeupWebToWeb",
	2: "SpeechModeWakeupWebToCloud",
	3: "SpeechModeWakeupCloudToCloud",
	4: "SpeechModeAlways",
	5: "SpeechModeManual",
	6: "SpeechModeEnd",
}
var SpeechMode_value = map[string]int32{
	"SpeechModeNone":               0,
	"SpeechModeWakeupWebToWeb":     1,
	"SpeechModeWakeupWebToCloud":   2,
	"SpeechModeWakeupCloudToCloud": 3,
	"SpeechModeAlways":             4,
	"SpeechModeManual":             5,
	"SpeechModeEnd":                6,
}

func (x SpeechMode) String() string {
	return proto.EnumName(SpeechMode_name, int32(x))
}
func (SpeechMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{1} }

// `NullValue` is a singleton enumeration to represent the null value for the
// `Value` type union.
//
//  The JSON representation for `NullValue` is JSON `null`.
type NullValue int32

const (
	// Null value.
	NullValue_NULL_VALUE NullValue = 0
)

var NullValue_name = map[int32]string{
	0: "NULL_VALUE",
}
var NullValue_value = map[string]int32{
	"NULL_VALUE": 0,
}

func (x NullValue) String() string {
	return proto.EnumName(NullValue_name, int32(x))
}
func (NullValue) EnumDescriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{2} }

type User struct {
	Id               uint64            `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
	UserId           string            `protobuf:"bytes,12,opt,name=userId,proto3" json:"userId,omitempty"`
	Name             string            `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	PictureUrl       string            `protobuf:"bytes,14,opt,name=pictureUrl,proto3" json:"pictureUrl,omitempty"`
	InformationUrl   string            `protobuf:"bytes,15,opt,name=informationUrl,proto3" json:"informationUrl,omitempty"`
	UnreadCount      uint64            `protobuf:"varint,16,opt,name=unreadCount,proto3" json:"unreadCount,omitempty"`
	MetaData         map[string]*Value `protobuf:"bytes,17,rep,name=metaData" json:"metaData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Public           bool              `protobuf:"varint,18,opt,name=public,proto3" json:"public,omitempty"`
	CanBlock         bool              `protobuf:"varint,19,opt,name=canBlock,proto3" json:"canBlock,omitempty"`
	Lang             string            `protobuf:"bytes,20,opt,name=lang,proto3" json:"lang,omitempty"`
	AccessToken      string            `protobuf:"bytes,21,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	LastAccessRoomId string            `protobuf:"bytes,22,opt,name=lastAccessRoomId,proto3" json:"lastAccessRoomId,omitempty"`
	LastAccessed     int64             `protobuf:"varint,23,opt,name=lastAccessed,proto3" json:"lastAccessed,omitempty"`
	Created          int64             `protobuf:"varint,31,opt,name=created,proto3" json:"created,omitempty"`
	Modified         int64             `protobuf:"varint,32,opt,name=modified,proto3" json:"modified,omitempty"`
	Deleted          int64             `protobuf:"varint,33,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Roles            []int32           `protobuf:"varint,40,rep,packed,name=roles" json:"roles,omitempty"`
	Rooms            []*RoomForUser    `protobuf:"bytes,41,rep,name=rooms" json:"rooms,omitempty"`
	Devices          []*Device         `protobuf:"bytes,42,rep,name=devices" json:"devices,omitempty"`
	Blocks           []string          `protobuf:"bytes,43,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{0} }

func (m *User) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetPictureUrl() string {
	if m != nil {
		return m.PictureUrl
	}
	return ""
}

func (m *User) GetInformationUrl() string {
	if m != nil {
		return m.InformationUrl
	}
	return ""
}

func (m *User) GetUnreadCount() uint64 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *User) GetMetaData() map[string]*Value {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *User) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *User) GetCanBlock() bool {
	if m != nil {
		return m.CanBlock
	}
	return false
}

func (m *User) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *User) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *User) GetLastAccessRoomId() string {
	if m != nil {
		return m.LastAccessRoomId
	}
	return ""
}

func (m *User) GetLastAccessed() int64 {
	if m != nil {
		return m.LastAccessed
	}
	return 0
}

func (m *User) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *User) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

func (m *User) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *User) GetRoles() []int32 {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *User) GetRooms() []*RoomForUser {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func (m *User) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *User) GetBlocks() []string {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type CreateUserRequest struct {
	Workspace      string            `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	UserId         string            `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name           string            `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	PictureUrl     string            `protobuf:"bytes,14,opt,name=picture_url,json=pictureUrl,proto3" json:"picture_url,omitempty"`
	InformationUrl string            `protobuf:"bytes,15,opt,name=information_url,json=informationUrl,proto3" json:"information_url,omitempty"`
	MetaData       map[string]*Value `protobuf:"bytes,17,rep,name=meta_data,json=metaData" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Public         bool              `protobuf:"varint,18,opt,name=public,proto3" json:"public,omitempty"`
	CanBlock       bool              `protobuf:"varint,19,opt,name=can_block,json=canBlock,proto3" json:"can_block,omitempty"`
	Lang           string            `protobuf:"bytes,20,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{1} }

func (m *CreateUserRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *CreateUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateUserRequest) GetPictureUrl() string {
	if m != nil {
		return m.PictureUrl
	}
	return ""
}

func (m *CreateUserRequest) GetInformationUrl() string {
	if m != nil {
		return m.InformationUrl
	}
	return ""
}

func (m *CreateUserRequest) GetMetaData() map[string]*Value {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *CreateUserRequest) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *CreateUserRequest) GetCanBlock() bool {
	if m != nil {
		return m.CanBlock
	}
	return false
}

func (m *CreateUserRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

type GetUserRequest struct {
	Workspace string `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	UserId    string `protobuf:"bytes,12,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{2} }

func (m *GetUserRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *GetUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type Device struct {
	Workspace            string `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	UserID               string `protobuf:"bytes,11,opt,name=userID,proto3" json:"userID,omitempty"`
	Platform             int32  `protobuf:"varint,12,opt,name=platform,proto3" json:"platform,omitempty"`
	Token                string `protobuf:"bytes,13,opt,name=token,proto3" json:"token,omitempty"`
	NotificationDeviceID string `protobuf:"bytes,14,opt,name=notificationDeviceID,proto3" json:"notificationDeviceID,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{3} }

func (m *Device) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *Device) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Device) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *Device) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Device) GetNotificationDeviceID() string {
	if m != nil {
		return m.NotificationDeviceID
	}
	return ""
}

type RoomForUser struct {
	RoomID             string         `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
	UserID             string         `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Name               string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PictureURL         string         `protobuf:"bytes,4,opt,name=pictureURL,proto3" json:"pictureURL,omitempty"`
	InformationURL     string         `protobuf:"bytes,5,opt,name=informationURL,proto3" json:"informationURL,omitempty"`
	MetaData           []byte         `protobuf:"bytes,6,opt,name=metaData,proto3" json:"metaData,omitempty"`
	Type               RoomType       `protobuf:"varint,7,opt,name=type,proto3,enum=swagchat.protobuf.RoomType" json:"type,omitempty"`
	LastMessage        string         `protobuf:"bytes,8,opt,name=lastMessage,proto3" json:"lastMessage,omitempty"`
	LastMessageUpdated int64          `protobuf:"varint,9,opt,name=lastMessageUpdated,proto3" json:"lastMessageUpdated,omitempty"`
	CanLeft            bool           `protobuf:"varint,10,opt,name=canLeft,proto3" json:"canLeft,omitempty"`
	Created            int64          `protobuf:"varint,11,opt,name=created,proto3" json:"created,omitempty"`
	Modified           int64          `protobuf:"varint,12,opt,name=modified,proto3" json:"modified,omitempty"`
	Users              []*UserForRoom `protobuf:"bytes,13,rep,name=users" json:"users,omitempty"`
	RuUnreadCount      int64          `protobuf:"varint,14,opt,name=ruUnreadCount,proto3" json:"ruUnreadCount,omitempty"`
}

func (m *RoomForUser) Reset()                    { *m = RoomForUser{} }
func (m *RoomForUser) String() string            { return proto.CompactTextString(m) }
func (*RoomForUser) ProtoMessage()               {}
func (*RoomForUser) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{4} }

func (m *RoomForUser) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *RoomForUser) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *RoomForUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoomForUser) GetPictureURL() string {
	if m != nil {
		return m.PictureURL
	}
	return ""
}

func (m *RoomForUser) GetInformationURL() string {
	if m != nil {
		return m.InformationURL
	}
	return ""
}

func (m *RoomForUser) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *RoomForUser) GetType() RoomType {
	if m != nil {
		return m.Type
	}
	return RoomType_NONE
}

func (m *RoomForUser) GetLastMessage() string {
	if m != nil {
		return m.LastMessage
	}
	return ""
}

func (m *RoomForUser) GetLastMessageUpdated() int64 {
	if m != nil {
		return m.LastMessageUpdated
	}
	return 0
}

func (m *RoomForUser) GetCanLeft() bool {
	if m != nil {
		return m.CanLeft
	}
	return false
}

func (m *RoomForUser) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *RoomForUser) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

func (m *RoomForUser) GetUsers() []*UserForRoom {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *RoomForUser) GetRuUnreadCount() int64 {
	if m != nil {
		return m.RuUnreadCount
	}
	return 0
}

type UserForRoom struct {
	RoomID         string `protobuf:"bytes,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
	UserID         string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PictureURL     string `protobuf:"bytes,4,opt,name=pictureURL,proto3" json:"pictureURL,omitempty"`
	InformationURL string `protobuf:"bytes,5,opt,name=informationURL,proto3" json:"informationURL,omitempty"`
	MetaData       []byte `protobuf:"bytes,6,opt,name=metaData,proto3" json:"metaData,omitempty"`
	CanBlock       bool   `protobuf:"varint,7,opt,name=canBlock,proto3" json:"canBlock,omitempty"`
	LastAccessed   int64  `protobuf:"varint,8,opt,name=lastAccessed,proto3" json:"lastAccessed,omitempty"`
	Created        int64  `protobuf:"varint,9,opt,name=created,proto3" json:"created,omitempty"`
	Modified       int64  `protobuf:"varint,10,opt,name=modified,proto3" json:"modified,omitempty"`
	RuDisplay      bool   `protobuf:"varint,11,opt,name=ruDisplay,proto3" json:"ruDisplay,omitempty"`
}

func (m *UserForRoom) Reset()                    { *m = UserForRoom{} }
func (m *UserForRoom) String() string            { return proto.CompactTextString(m) }
func (*UserForRoom) ProtoMessage()               {}
func (*UserForRoom) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{5} }

func (m *UserForRoom) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *UserForRoom) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserForRoom) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserForRoom) GetPictureURL() string {
	if m != nil {
		return m.PictureURL
	}
	return ""
}

func (m *UserForRoom) GetInformationURL() string {
	if m != nil {
		return m.InformationURL
	}
	return ""
}

func (m *UserForRoom) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *UserForRoom) GetCanBlock() bool {
	if m != nil {
		return m.CanBlock
	}
	return false
}

func (m *UserForRoom) GetLastAccessed() int64 {
	if m != nil {
		return m.LastAccessed
	}
	return 0
}

func (m *UserForRoom) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *UserForRoom) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

func (m *UserForRoom) GetRuDisplay() bool {
	if m != nil {
		return m.RuDisplay
	}
	return false
}

type Room struct {
	Workspace             string         `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Id                    uint64         `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
	RoomId                string         `protobuf:"bytes,12,opt,name=roomId,proto3" json:"roomId,omitempty"`
	UserId                string         `protobuf:"bytes,13,opt,name=userId,proto3" json:"userId,omitempty"`
	Name                  string         `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	PictureUrl            string         `protobuf:"bytes,15,opt,name=pictureUrl,proto3" json:"pictureUrl,omitempty"`
	InformationUrl        string         `protobuf:"bytes,16,opt,name=informationUrl,proto3" json:"informationUrl,omitempty"`
	MetaData              []byte         `protobuf:"bytes,17,opt,name=MetaData,proto3" json:"MetaData,omitempty"`
	AvailableMessageTypes string         `protobuf:"bytes,18,opt,name=AvailableMessageTypes,proto3" json:"AvailableMessageTypes,omitempty"`
	Type                  RoomType       `protobuf:"varint,19,opt,name=type,proto3,enum=swagchat.protobuf.RoomType" json:"type,omitempty"`
	WebhookToken          string         `protobuf:"bytes,20,opt,name=WebhookToken,proto3" json:"WebhookToken,omitempty"`
	LastMessage           string         `protobuf:"bytes,21,opt,name=lastMessage,proto3" json:"lastMessage,omitempty"`
	LastMessageUpdated    int64          `protobuf:"varint,22,opt,name=lastMessageUpdated,proto3" json:"lastMessageUpdated,omitempty"`
	MessageCount          int64          `protobuf:"varint,23,opt,name=messageCount,proto3" json:"messageCount,omitempty"`
	NotificationTopicId   string         `protobuf:"bytes,24,opt,name=notificationTopicId,proto3" json:"notificationTopicId,omitempty"`
	CanLeft               bool           `protobuf:"varint,25,opt,name=canLeft,proto3" json:"canLeft,omitempty"`
	SpeechMode            SpeechMode     `protobuf:"varint,26,opt,name=speechMode,proto3,enum=swagchat.protobuf.SpeechMode" json:"speechMode,omitempty"`
	Created               int64          `protobuf:"varint,30,opt,name=created,proto3" json:"created,omitempty"`
	Modified              int64          `protobuf:"varint,31,opt,name=modified,proto3" json:"modified,omitempty"`
	Deleted               int64          `protobuf:"varint,32,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Users                 []*UserForRoom `protobuf:"bytes,40,rep,name=users" json:"users,omitempty"`
	UserIds               []string       `protobuf:"bytes,41,rep,name=userIds" json:"userIds,omitempty"`
}

func (m *Room) Reset()                    { *m = Room{} }
func (m *Room) String() string            { return proto.CompactTextString(m) }
func (*Room) ProtoMessage()               {}
func (*Room) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{6} }

func (m *Room) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *Room) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Room) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *Room) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Room) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Room) GetPictureUrl() string {
	if m != nil {
		return m.PictureUrl
	}
	return ""
}

func (m *Room) GetInformationUrl() string {
	if m != nil {
		return m.InformationUrl
	}
	return ""
}

func (m *Room) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *Room) GetAvailableMessageTypes() string {
	if m != nil {
		return m.AvailableMessageTypes
	}
	return ""
}

func (m *Room) GetType() RoomType {
	if m != nil {
		return m.Type
	}
	return RoomType_NONE
}

func (m *Room) GetWebhookToken() string {
	if m != nil {
		return m.WebhookToken
	}
	return ""
}

func (m *Room) GetLastMessage() string {
	if m != nil {
		return m.LastMessage
	}
	return ""
}

func (m *Room) GetLastMessageUpdated() int64 {
	if m != nil {
		return m.LastMessageUpdated
	}
	return 0
}

func (m *Room) GetMessageCount() int64 {
	if m != nil {
		return m.MessageCount
	}
	return 0
}

func (m *Room) GetNotificationTopicId() string {
	if m != nil {
		return m.NotificationTopicId
	}
	return ""
}

func (m *Room) GetCanLeft() bool {
	if m != nil {
		return m.CanLeft
	}
	return false
}

func (m *Room) GetSpeechMode() SpeechMode {
	if m != nil {
		return m.SpeechMode
	}
	return SpeechMode_SpeechModeNone
}

func (m *Room) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Room) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

func (m *Room) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *Room) GetUsers() []*UserForRoom {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Room) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type Messages struct {
	AllCount int64      `protobuf:"varint,1,opt,name=allCount,proto3" json:"allCount,omitempty"`
	Limit    int32      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32      `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Order    string     `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
	Messages []*Message `protobuf:"bytes,5,rep,name=messages" json:"messages,omitempty"`
}

func (m *Messages) Reset()                    { *m = Messages{} }
func (m *Messages) String() string            { return proto.CompactTextString(m) }
func (*Messages) ProtoMessage()               {}
func (*Messages) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{7} }

func (m *Messages) GetAllCount() int64 {
	if m != nil {
		return m.AllCount
	}
	return 0
}

func (m *Messages) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Messages) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Messages) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *Messages) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Message struct {
	Workspace     string          `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Endpoint      string          `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Authorization string          `protobuf:"bytes,3,opt,name=authorization,proto3" json:"authorization,omitempty"`
	UserIds       []string        `protobuf:"bytes,4,rep,name=userIds" json:"userIds,omitempty"`
	RoomId        string          `protobuf:"bytes,11,opt,name=roomId,proto3" json:"roomId,omitempty"`
	UserId        string          `protobuf:"bytes,12,opt,name=userId,proto3" json:"userId,omitempty"`
	Type          string          `protobuf:"bytes,13,opt,name=type,proto3" json:"type,omitempty"`
	EventName     string          `protobuf:"bytes,14,opt,name=eventName,proto3" json:"eventName,omitempty"`
	Payload       *MessagePayload `protobuf:"bytes,15,opt,name=payload" json:"payload,omitempty"`
	Role          int32           `protobuf:"varint,16,opt,name=role,proto3" json:"role,omitempty"`
	WebhookToken  string          `protobuf:"bytes,17,opt,name=WebhookToken,proto3" json:"WebhookToken,omitempty"`
	Created       int64           `protobuf:"varint,30,opt,name=created,proto3" json:"created,omitempty"`
	Modified      int64           `protobuf:"varint,31,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{8} }

func (m *Message) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *Message) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Message) GetAuthorization() string {
	if m != nil {
		return m.Authorization
	}
	return ""
}

func (m *Message) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *Message) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *Message) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Message) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Message) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *Message) GetPayload() *MessagePayload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetRole() int32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *Message) GetWebhookToken() string {
	if m != nil {
		return m.WebhookToken
	}
	return ""
}

func (m *Message) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Message) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

type MessagePayload struct {
	// text
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// image
	Mime         string `protobuf:"bytes,11,opt,name=mime,proto3" json:"mime,omitempty"`
	Filename     string `protobuf:"bytes,12,opt,name=filename,proto3" json:"filename,omitempty"`
	SourceUrl    string `protobuf:"bytes,13,opt,name=sourceUrl,proto3" json:"sourceUrl,omitempty"`
	ThumbnailUrl string `protobuf:"bytes,14,opt,name=thumbnailUrl,proto3" json:"thumbnailUrl,omitempty"`
	Width        int32  `protobuf:"varint,15,opt,name=width,proto3" json:"width,omitempty"`
	Height       int32  `protobuf:"varint,16,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *MessagePayload) Reset()                    { *m = MessagePayload{} }
func (m *MessagePayload) String() string            { return proto.CompactTextString(m) }
func (*MessagePayload) ProtoMessage()               {}
func (*MessagePayload) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{9} }

func (m *MessagePayload) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MessagePayload) GetMime() string {
	if m != nil {
		return m.Mime
	}
	return ""
}

func (m *MessagePayload) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *MessagePayload) GetSourceUrl() string {
	if m != nil {
		return m.SourceUrl
	}
	return ""
}

func (m *MessagePayload) GetThumbnailUrl() string {
	if m != nil {
		return m.ThumbnailUrl
	}
	return ""
}

func (m *MessagePayload) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *MessagePayload) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type RoomIds struct {
	RoomIds []string `protobuf:"bytes,1,rep,name=room_ids,json=roomIds" json:"room_ids,omitempty"`
}

func (m *RoomIds) Reset()                    { *m = RoomIds{} }
func (m *RoomIds) String() string            { return proto.CompactTextString(m) }
func (*RoomIds) ProtoMessage()               {}
func (*RoomIds) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{10} }

func (m *RoomIds) GetRoomIds() []string {
	if m != nil {
		return m.RoomIds
	}
	return nil
}

type UserIds struct {
	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (m *UserIds) Reset()                    { *m = UserIds{} }
func (m *UserIds) String() string            { return proto.CompactTextString(m) }
func (*UserIds) ProtoMessage()               {}
func (*UserIds) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{11} }

func (m *UserIds) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type RoleIds struct {
	RoleIds []int32 `protobuf:"varint,1,rep,packed,name=role_ids,json=roleIds" json:"role_ids,omitempty"`
}

func (m *RoleIds) Reset()                    { *m = RoleIds{} }
func (m *RoleIds) String() string            { return proto.CompactTextString(m) }
func (*RoleIds) ProtoMessage()               {}
func (*RoleIds) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{12} }

func (m *RoleIds) GetRoleIds() []int32 {
	if m != nil {
		return m.RoleIds
	}
	return nil
}

type UserRole struct {
	UserId string `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoleId int32  `protobuf:"varint,12,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *UserRole) Reset()                    { *m = UserRole{} }
func (m *UserRole) String() string            { return proto.CompactTextString(m) }
func (*UserRole) ProtoMessage()               {}
func (*UserRole) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{13} }

func (m *UserRole) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserRole) GetRoleId() int32 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

type CreateUserRolesRequest struct {
	Workspace string  `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	UserId    string  `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoleIds   []int32 `protobuf:"varint,12,rep,packed,name=role_ids,json=roleIds" json:"role_ids,omitempty"`
}

func (m *CreateUserRolesRequest) Reset()         { *m = CreateUserRolesRequest{} }
func (m *CreateUserRolesRequest) String() string { return proto.CompactTextString(m) }
func (*CreateUserRolesRequest) ProtoMessage()    {}
func (*CreateUserRolesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorChatMessage, []int{14}
}

func (m *CreateUserRolesRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *CreateUserRolesRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateUserRolesRequest) GetRoleIds() []int32 {
	if m != nil {
		return m.RoleIds
	}
	return nil
}

type GetUserIdsOfUserRoleRequest struct {
	Workspace string `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	RoleId    int32  `protobuf:"varint,12,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *GetUserIdsOfUserRoleRequest) Reset()         { *m = GetUserIdsOfUserRoleRequest{} }
func (m *GetUserIdsOfUserRoleRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserIdsOfUserRoleRequest) ProtoMessage()    {}
func (*GetUserIdsOfUserRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorChatMessage, []int{15}
}

func (m *GetUserIdsOfUserRoleRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *GetUserIdsOfUserRoleRequest) GetRoleId() int32 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

type GetRoleIdsOfUserRoleRequest struct {
	Workspace string `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	UserId    string `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *GetRoleIdsOfUserRoleRequest) Reset()         { *m = GetRoleIdsOfUserRoleRequest{} }
func (m *GetRoleIdsOfUserRoleRequest) String() string { return proto.CompactTextString(m) }
func (*GetRoleIdsOfUserRoleRequest) ProtoMessage()    {}
func (*GetRoleIdsOfUserRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorChatMessage, []int{16}
}

func (m *GetRoleIdsOfUserRoleRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *GetRoleIdsOfUserRoleRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type DeleteUserRoleRequest struct {
	Workspace string `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	UserId    string `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RoleId    int32  `protobuf:"varint,12,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (m *DeleteUserRoleRequest) Reset()         { *m = DeleteUserRoleRequest{} }
func (m *DeleteUserRoleRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteUserRoleRequest) ProtoMessage()    {}
func (*DeleteUserRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorChatMessage, []int{17}
}

func (m *DeleteUserRoleRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *DeleteUserRoleRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DeleteUserRoleRequest) GetRoleId() int32 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

type RoomUser struct {
	RoomId      string `protobuf:"bytes,11,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	UserId      string `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UnreadCount int32  `protobuf:"varint,13,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	Display     bool   `protobuf:"varint,14,opt,name=display,proto3" json:"display,omitempty"`
}

func (m *RoomUser) Reset()                    { *m = RoomUser{} }
func (m *RoomUser) String() string            { return proto.CompactTextString(m) }
func (*RoomUser) ProtoMessage()               {}
func (*RoomUser) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{18} }

func (m *RoomUser) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *RoomUser) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *RoomUser) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *RoomUser) GetDisplay() bool {
	if m != nil {
		return m.Display
	}
	return false
}

type CreateRoomUsersRequest struct {
	Workspace string   `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	RoomId    string   `protobuf:"bytes,11,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	UserIds   []string `protobuf:"bytes,12,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
	Display   bool     `protobuf:"varint,13,opt,name=display,proto3" json:"display,omitempty"`
}

func (m *CreateRoomUsersRequest) Reset()         { *m = CreateRoomUsersRequest{} }
func (m *CreateRoomUsersRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRoomUsersRequest) ProtoMessage()    {}
func (*CreateRoomUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorChatMessage, []int{19}
}

func (m *CreateRoomUsersRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *CreateRoomUsersRequest) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *CreateRoomUsersRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *CreateRoomUsersRequest) GetDisplay() bool {
	if m != nil {
		return m.Display
	}
	return false
}

type UpdateRoomUserRequest struct {
	Workspace   string `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	RoomId      string `protobuf:"bytes,11,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	UserId      string `protobuf:"bytes,12,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UnreadCount int32  `protobuf:"varint,13,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	Display     bool   `protobuf:"varint,14,opt,name=display,proto3" json:"display,omitempty"`
}

func (m *UpdateRoomUserRequest) Reset()         { *m = UpdateRoomUserRequest{} }
func (m *UpdateRoomUserRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRoomUserRequest) ProtoMessage()    {}
func (*UpdateRoomUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorChatMessage, []int{20}
}

func (m *UpdateRoomUserRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *UpdateRoomUserRequest) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *UpdateRoomUserRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateRoomUserRequest) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *UpdateRoomUserRequest) GetDisplay() bool {
	if m != nil {
		return m.Display
	}
	return false
}

type GetUserIdsOfRoomUserRequest struct {
	Workspace string  `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	RoomId    string  `protobuf:"bytes,11,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoleIds   []int32 `protobuf:"varint,12,rep,packed,name=role_ids,json=roleIds" json:"role_ids,omitempty"`
}

func (m *GetUserIdsOfRoomUserRequest) Reset()         { *m = GetUserIdsOfRoomUserRequest{} }
func (m *GetUserIdsOfRoomUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserIdsOfRoomUserRequest) ProtoMessage()    {}
func (*GetUserIdsOfRoomUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorChatMessage, []int{21}
}

func (m *GetUserIdsOfRoomUserRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *GetUserIdsOfRoomUserRequest) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *GetUserIdsOfRoomUserRequest) GetRoleIds() []int32 {
	if m != nil {
		return m.RoleIds
	}
	return nil
}

type DeleteRoomUserRequest struct {
	Workspace string   `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	RoomId    string   `protobuf:"bytes,11,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	UserIds   []string `protobuf:"bytes,12,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (m *DeleteRoomUserRequest) Reset()         { *m = DeleteRoomUserRequest{} }
func (m *DeleteRoomUserRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRoomUserRequest) ProtoMessage()    {}
func (*DeleteRoomUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorChatMessage, []int{22}
}

func (m *DeleteRoomUserRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *DeleteRoomUserRequest) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *DeleteRoomUserRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

// `Struct` represents a structured data value, consisting of fields
// which map to dynamically typed values. In some languages, `Struct`
// might be supported by a native representation. For example, in
// scripting languages like JS a struct is represented as an
// object. The details of that representation are described together
// with the proto support for the language.
//
// The JSON representation for `Struct` is JSON object.
type Struct struct {
	// Unordered map of dynamically typed values.
	Fields map[string]*Value `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Struct) Reset()                    { *m = Struct{} }
func (m *Struct) String() string            { return proto.CompactTextString(m) }
func (*Struct) ProtoMessage()               {}
func (*Struct) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{23} }

func (m *Struct) GetFields() map[string]*Value {
	if m != nil {
		return m.Fields
	}
	return nil
}

// `Value` represents a dynamically typed value which can be either
// null, a number, a string, a boolean, a recursive struct value, or a
// list of values. A producer of value is expected to set one of that
// variants, absence of any variant indicates an error.
//
// The JSON representation for `Value` is JSON value.
type Value struct {
	// The kind of value.
	//
	// Types that are valid to be assigned to Kind:
	//	*Value_NullValue
	//	*Value_NumberValue
	//	*Value_StringValue
	//	*Value_BoolValue
	//	*Value_StructValue
	//	*Value_ListValue
	Kind isValue_Kind `protobuf_oneof:"kind"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{24} }

type isValue_Kind interface {
	isValue_Kind()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Value_NullValue struct {
	NullValue NullValue `protobuf:"varint,1,opt,name=null_value,json=nullValue,proto3,enum=swagchat.protobuf.NullValue,oneof"`
}
type Value_NumberValue struct {
	NumberValue float64 `protobuf:"fixed64,2,opt,name=number_value,json=numberValue,proto3,oneof"`
}
type Value_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}
type Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,proto3,oneof"`
}
type Value_StructValue struct {
	StructValue *Struct `protobuf:"bytes,5,opt,name=struct_value,json=structValue,oneof"`
}
type Value_ListValue struct {
	ListValue *ListValue `protobuf:"bytes,6,opt,name=list_value,json=listValue,oneof"`
}

func (*Value_NullValue) isValue_Kind()   {}
func (*Value_NumberValue) isValue_Kind() {}
func (*Value_StringValue) isValue_Kind() {}
func (*Value_BoolValue) isValue_Kind()   {}
func (*Value_StructValue) isValue_Kind() {}
func (*Value_ListValue) isValue_Kind()   {}

func (m *Value) GetKind() isValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *Value) GetNullValue() NullValue {
	if x, ok := m.GetKind().(*Value_NullValue); ok {
		return x.NullValue
	}
	return NullValue_NULL_VALUE
}

func (m *Value) GetNumberValue() float64 {
	if x, ok := m.GetKind().(*Value_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (m *Value) GetStringValue() string {
	if x, ok := m.GetKind().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Value) GetBoolValue() bool {
	if x, ok := m.GetKind().(*Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *Value) GetStructValue() *Struct {
	if x, ok := m.GetKind().(*Value_StructValue); ok {
		return x.StructValue
	}
	return nil
}

func (m *Value) GetListValue() *ListValue {
	if x, ok := m.GetKind().(*Value_ListValue); ok {
		return x.ListValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_NullValue)(nil),
		(*Value_NumberValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_BoolValue)(nil),
		(*Value_StructValue)(nil),
		(*Value_ListValue)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// kind
	switch x := m.Kind.(type) {
	case *Value_NullValue:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.NullValue))
	case *Value_NumberValue:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.NumberValue))
	case *Value_StringValue:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.StringValue)
	case *Value_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *Value_StructValue:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StructValue); err != nil {
			return err
		}
	case *Value_ListValue:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Value.Kind has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // kind.null_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Value_NullValue{NullValue(x)}
		return true, err
	case 2: // kind.number_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Kind = &Value_NumberValue{math.Float64frombits(x)}
		return true, err
	case 3: // kind.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Kind = &Value_StringValue{x}
		return true, err
	case 4: // kind.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &Value_BoolValue{x != 0}
		return true, err
	case 5: // kind.struct_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Struct)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_StructValue{msg}
		return true, err
	case 6: // kind.list_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListValue)
		err := b.DecodeMessage(msg)
		m.Kind = &Value_ListValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// kind
	switch x := m.Kind.(type) {
	case *Value_NullValue:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.NullValue))
	case *Value_NumberValue:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case *Value_StringValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *Value_BoolValue:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *Value_StructValue:
		s := proto.Size(x.StructValue)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Value_ListValue:
		s := proto.Size(x.ListValue)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// `ListValue` is a wrapper around a repeated field of values.
//
// The JSON representation for `ListValue` is JSON array.
type ListValue struct {
	// Repeated field of dynamically typed values.
	Values []*Value `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *ListValue) Reset()                    { *m = ListValue{} }
func (m *ListValue) String() string            { return proto.CompactTextString(m) }
func (*ListValue) ProtoMessage()               {}
func (*ListValue) Descriptor() ([]byte, []int) { return fileDescriptorChatMessage, []int{25} }

func (m *ListValue) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "swagchat.protobuf.User")
	proto.RegisterType((*CreateUserRequest)(nil), "swagchat.protobuf.CreateUserRequest")
	proto.RegisterType((*GetUserRequest)(nil), "swagchat.protobuf.GetUserRequest")
	proto.RegisterType((*Device)(nil), "swagchat.protobuf.Device")
	proto.RegisterType((*RoomForUser)(nil), "swagchat.protobuf.RoomForUser")
	proto.RegisterType((*UserForRoom)(nil), "swagchat.protobuf.UserForRoom")
	proto.RegisterType((*Room)(nil), "swagchat.protobuf.Room")
	proto.RegisterType((*Messages)(nil), "swagchat.protobuf.Messages")
	proto.RegisterType((*Message)(nil), "swagchat.protobuf.Message")
	proto.RegisterType((*MessagePayload)(nil), "swagchat.protobuf.MessagePayload")
	proto.RegisterType((*RoomIds)(nil), "swagchat.protobuf.RoomIds")
	proto.RegisterType((*UserIds)(nil), "swagchat.protobuf.UserIds")
	proto.RegisterType((*RoleIds)(nil), "swagchat.protobuf.RoleIds")
	proto.RegisterType((*UserRole)(nil), "swagchat.protobuf.UserRole")
	proto.RegisterType((*CreateUserRolesRequest)(nil), "swagchat.protobuf.CreateUserRolesRequest")
	proto.RegisterType((*GetUserIdsOfUserRoleRequest)(nil), "swagchat.protobuf.GetUserIdsOfUserRoleRequest")
	proto.RegisterType((*GetRoleIdsOfUserRoleRequest)(nil), "swagchat.protobuf.GetRoleIdsOfUserRoleRequest")
	proto.RegisterType((*DeleteUserRoleRequest)(nil), "swagchat.protobuf.DeleteUserRoleRequest")
	proto.RegisterType((*RoomUser)(nil), "swagchat.protobuf.RoomUser")
	proto.RegisterType((*CreateRoomUsersRequest)(nil), "swagchat.protobuf.CreateRoomUsersRequest")
	proto.RegisterType((*UpdateRoomUserRequest)(nil), "swagchat.protobuf.UpdateRoomUserRequest")
	proto.RegisterType((*GetUserIdsOfRoomUserRequest)(nil), "swagchat.protobuf.GetUserIdsOfRoomUserRequest")
	proto.RegisterType((*DeleteRoomUserRequest)(nil), "swagchat.protobuf.DeleteRoomUserRequest")
	proto.RegisterType((*Struct)(nil), "swagchat.protobuf.Struct")
	proto.RegisterType((*Value)(nil), "swagchat.protobuf.Value")
	proto.RegisterType((*ListValue)(nil), "swagchat.protobuf.ListValue")
	proto.RegisterEnum("swagchat.protobuf.RoomType", RoomType_name, RoomType_value)
	proto.RegisterEnum("swagchat.protobuf.SpeechMode", SpeechMode_name, SpeechMode_value)
	proto.RegisterEnum("swagchat.protobuf.NullValue", NullValue_name, NullValue_value)
}
func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Id))
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.PictureUrl) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.PictureUrl)))
		i += copy(dAtA[i:], m.PictureUrl)
	}
	if len(m.InformationUrl) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.InformationUrl)))
		i += copy(dAtA[i:], m.InformationUrl)
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.UnreadCount))
	}
	if len(m.MetaData) > 0 {
		for k, _ := range m.MetaData {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			v := m.MetaData[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovChatMessage(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovChatMessage(uint64(len(k))) + msgSize
			i = encodeVarintChatMessage(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatMessage(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintChatMessage(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.Public {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.Public {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanBlock {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.CanBlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Lang) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Lang)))
		i += copy(dAtA[i:], m.Lang)
	}
	if len(m.AccessToken) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.AccessToken)))
		i += copy(dAtA[i:], m.AccessToken)
	}
	if len(m.LastAccessRoomId) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.LastAccessRoomId)))
		i += copy(dAtA[i:], m.LastAccessRoomId)
	}
	if m.LastAccessed != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.LastAccessed))
	}
	if m.Created != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Created))
	}
	if m.Modified != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Modified))
	}
	if m.Deleted != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Deleted))
	}
	if len(m.Roles) > 0 {
		dAtA3 := make([]byte, len(m.Roles)*10)
		var j2 int
		for _, num1 := range m.Roles {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if len(m.Rooms) > 0 {
		for _, msg := range m.Rooms {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintChatMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Devices) > 0 {
		for _, msg := range m.Devices {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintChatMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Blocks) > 0 {
		for _, s := range m.Blocks {
			dAtA[i] = 0xda
			i++
			dAtA[i] = 0x2
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CreateUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workspace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Workspace)))
		i += copy(dAtA[i:], m.Workspace)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.PictureUrl) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.PictureUrl)))
		i += copy(dAtA[i:], m.PictureUrl)
	}
	if len(m.InformationUrl) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.InformationUrl)))
		i += copy(dAtA[i:], m.InformationUrl)
	}
	if len(m.MetaData) > 0 {
		for k, _ := range m.MetaData {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			v := m.MetaData[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovChatMessage(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovChatMessage(uint64(len(k))) + msgSize
			i = encodeVarintChatMessage(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatMessage(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintChatMessage(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	if m.Public {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.Public {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CanBlock {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.CanBlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Lang) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Lang)))
		i += copy(dAtA[i:], m.Lang)
	}
	return i, nil
}

func (m *GetUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workspace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Workspace)))
		i += copy(dAtA[i:], m.Workspace)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	return i, nil
}

func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workspace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Workspace)))
		i += copy(dAtA[i:], m.Workspace)
	}
	if len(m.UserID) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if m.Platform != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Platform))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.NotificationDeviceID) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.NotificationDeviceID)))
		i += copy(dAtA[i:], m.NotificationDeviceID)
	}
	return i, nil
}

func (m *RoomForUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomForUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.RoomID)))
		i += copy(dAtA[i:], m.RoomID)
	}
	if len(m.UserID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.PictureURL) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.PictureURL)))
		i += copy(dAtA[i:], m.PictureURL)
	}
	if len(m.InformationURL) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.InformationURL)))
		i += copy(dAtA[i:], m.InformationURL)
	}
	if len(m.MetaData) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.MetaData)))
		i += copy(dAtA[i:], m.MetaData)
	}
	if m.Type != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Type))
	}
	if len(m.LastMessage) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.LastMessage)))
		i += copy(dAtA[i:], m.LastMessage)
	}
	if m.LastMessageUpdated != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.LastMessageUpdated))
	}
	if m.CanLeft {
		dAtA[i] = 0x50
		i++
		if m.CanLeft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Created != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Created))
	}
	if m.Modified != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Modified))
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintChatMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RuUnreadCount != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.RuUnreadCount))
	}
	return i, nil
}

func (m *UserForRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserForRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.RoomID)))
		i += copy(dAtA[i:], m.RoomID)
	}
	if len(m.UserID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.PictureURL) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.PictureURL)))
		i += copy(dAtA[i:], m.PictureURL)
	}
	if len(m.InformationURL) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.InformationURL)))
		i += copy(dAtA[i:], m.InformationURL)
	}
	if len(m.MetaData) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.MetaData)))
		i += copy(dAtA[i:], m.MetaData)
	}
	if m.CanBlock {
		dAtA[i] = 0x38
		i++
		if m.CanBlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LastAccessed != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.LastAccessed))
	}
	if m.Created != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Created))
	}
	if m.Modified != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Modified))
	}
	if m.RuDisplay {
		dAtA[i] = 0x58
		i++
		if m.RuDisplay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Room) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Room) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workspace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Workspace)))
		i += copy(dAtA[i:], m.Workspace)
	}
	if m.Id != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Id))
	}
	if len(m.RoomId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.RoomId)))
		i += copy(dAtA[i:], m.RoomId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.PictureUrl) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.PictureUrl)))
		i += copy(dAtA[i:], m.PictureUrl)
	}
	if len(m.InformationUrl) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.InformationUrl)))
		i += copy(dAtA[i:], m.InformationUrl)
	}
	if len(m.MetaData) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.MetaData)))
		i += copy(dAtA[i:], m.MetaData)
	}
	if len(m.AvailableMessageTypes) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.AvailableMessageTypes)))
		i += copy(dAtA[i:], m.AvailableMessageTypes)
	}
	if m.Type != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Type))
	}
	if len(m.WebhookToken) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.WebhookToken)))
		i += copy(dAtA[i:], m.WebhookToken)
	}
	if len(m.LastMessage) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.LastMessage)))
		i += copy(dAtA[i:], m.LastMessage)
	}
	if m.LastMessageUpdated != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.LastMessageUpdated))
	}
	if m.MessageCount != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.MessageCount))
	}
	if len(m.NotificationTopicId) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.NotificationTopicId)))
		i += copy(dAtA[i:], m.NotificationTopicId)
	}
	if m.CanLeft {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if m.CanLeft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SpeechMode != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.SpeechMode))
	}
	if m.Created != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Created))
	}
	if m.Modified != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Modified))
	}
	if m.Deleted != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Deleted))
	}
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintChatMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UserIds) > 0 {
		for _, s := range m.UserIds {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x2
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Messages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Messages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AllCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.AllCount))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Limit))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Offset))
	}
	if len(m.Order) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Order)))
		i += copy(dAtA[i:], m.Order)
	}
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintChatMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workspace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Workspace)))
		i += copy(dAtA[i:], m.Workspace)
	}
	if len(m.Endpoint) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Endpoint)))
		i += copy(dAtA[i:], m.Endpoint)
	}
	if len(m.Authorization) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Authorization)))
		i += copy(dAtA[i:], m.Authorization)
	}
	if len(m.UserIds) > 0 {
		for _, s := range m.UserIds {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.RoomId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.RoomId)))
		i += copy(dAtA[i:], m.RoomId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.EventName) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.EventName)))
		i += copy(dAtA[i:], m.EventName)
	}
	if m.Payload != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Payload.Size()))
		n5, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Role != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Role))
	}
	if len(m.WebhookToken) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.WebhookToken)))
		i += copy(dAtA[i:], m.WebhookToken)
	}
	if m.Created != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Created))
	}
	if m.Modified != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Modified))
	}
	return i, nil
}

func (m *MessagePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.Mime) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Mime)))
		i += copy(dAtA[i:], m.Mime)
	}
	if len(m.Filename) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Filename)))
		i += copy(dAtA[i:], m.Filename)
	}
	if len(m.SourceUrl) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.SourceUrl)))
		i += copy(dAtA[i:], m.SourceUrl)
	}
	if len(m.ThumbnailUrl) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.ThumbnailUrl)))
		i += copy(dAtA[i:], m.ThumbnailUrl)
	}
	if m.Width != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.Height))
	}
	return i, nil
}

func (m *RoomIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		for _, s := range m.RoomIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UserIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		for _, s := range m.UserIds {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RoleIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoleIds) > 0 {
		dAtA7 := make([]byte, len(m.RoleIds)*10)
		var j6 int
		for _, num1 := range m.RoleIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	return i, nil
}

func (m *UserRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRole) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.RoleId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.RoleId))
	}
	return i, nil
}

func (m *CreateUserRolesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserRolesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workspace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Workspace)))
		i += copy(dAtA[i:], m.Workspace)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.RoleIds) > 0 {
		dAtA9 := make([]byte, len(m.RoleIds)*10)
		var j8 int
		for _, num1 := range m.RoleIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x62
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	return i, nil
}

func (m *GetUserIdsOfUserRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserIdsOfUserRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workspace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Workspace)))
		i += copy(dAtA[i:], m.Workspace)
	}
	if m.RoleId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.RoleId))
	}
	return i, nil
}

func (m *GetRoleIdsOfUserRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoleIdsOfUserRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workspace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Workspace)))
		i += copy(dAtA[i:], m.Workspace)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	return i, nil
}

func (m *DeleteUserRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workspace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Workspace)))
		i += copy(dAtA[i:], m.Workspace)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.RoleId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.RoleId))
	}
	return i, nil
}

func (m *RoomUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.RoomId)))
		i += copy(dAtA[i:], m.RoomId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.UnreadCount))
	}
	if m.Display {
		dAtA[i] = 0x70
		i++
		if m.Display {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreateRoomUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoomUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workspace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Workspace)))
		i += copy(dAtA[i:], m.Workspace)
	}
	if len(m.RoomId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.RoomId)))
		i += copy(dAtA[i:], m.RoomId)
	}
	if len(m.UserIds) > 0 {
		for _, s := range m.UserIds {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Display {
		dAtA[i] = 0x68
		i++
		if m.Display {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateRoomUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRoomUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workspace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Workspace)))
		i += copy(dAtA[i:], m.Workspace)
	}
	if len(m.RoomId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.RoomId)))
		i += copy(dAtA[i:], m.RoomId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.UnreadCount != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.UnreadCount))
	}
	if m.Display {
		dAtA[i] = 0x70
		i++
		if m.Display {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetUserIdsOfRoomUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserIdsOfRoomUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workspace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Workspace)))
		i += copy(dAtA[i:], m.Workspace)
	}
	if len(m.RoomId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.RoomId)))
		i += copy(dAtA[i:], m.RoomId)
	}
	if len(m.RoleIds) > 0 {
		dAtA11 := make([]byte, len(m.RoleIds)*10)
		var j10 int
		for _, num1 := range m.RoleIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0x62
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	return i, nil
}

func (m *DeleteRoomUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRoomUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Workspace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.Workspace)))
		i += copy(dAtA[i:], m.Workspace)
	}
	if len(m.RoomId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(len(m.RoomId)))
		i += copy(dAtA[i:], m.RoomId)
	}
	if len(m.UserIds) > 0 {
		for _, s := range m.UserIds {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Struct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Struct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for k, _ := range m.Fields {
			dAtA[i] = 0xa
			i++
			v := m.Fields[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovChatMessage(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovChatMessage(uint64(len(k))) + msgSize
			i = encodeVarintChatMessage(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatMessage(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintChatMessage(dAtA, i, uint64(v.Size()))
				n12, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n12
			}
		}
	}
	return i, nil
}

func (m *Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != nil {
		nn13, err := m.Kind.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	return i, nil
}

func (m *Value_NullValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintChatMessage(dAtA, i, uint64(m.NullValue))
	return i, nil
}
func (m *Value_NumberValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.NumberValue))))
	i += 8
	return i, nil
}
func (m *Value_StringValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintChatMessage(dAtA, i, uint64(len(m.StringValue)))
	i += copy(dAtA[i:], m.StringValue)
	return i, nil
}
func (m *Value_BoolValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Value_StructValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StructValue != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.StructValue.Size()))
		n14, err := m.StructValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Value_ListValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ListValue != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChatMessage(dAtA, i, uint64(m.ListValue.Size()))
		n15, err := m.ListValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *ListValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChatMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintChatMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *User) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChatMessage(uint64(m.Id))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.PictureUrl)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.InformationUrl)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.UnreadCount != 0 {
		n += 2 + sovChatMessage(uint64(m.UnreadCount))
	}
	if len(m.MetaData) > 0 {
		for k, v := range m.MetaData {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovChatMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovChatMessage(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovChatMessage(uint64(mapEntrySize))
		}
	}
	if m.Public {
		n += 3
	}
	if m.CanBlock {
		n += 3
	}
	l = len(m.Lang)
	if l > 0 {
		n += 2 + l + sovChatMessage(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 2 + l + sovChatMessage(uint64(l))
	}
	l = len(m.LastAccessRoomId)
	if l > 0 {
		n += 2 + l + sovChatMessage(uint64(l))
	}
	if m.LastAccessed != 0 {
		n += 2 + sovChatMessage(uint64(m.LastAccessed))
	}
	if m.Created != 0 {
		n += 2 + sovChatMessage(uint64(m.Created))
	}
	if m.Modified != 0 {
		n += 2 + sovChatMessage(uint64(m.Modified))
	}
	if m.Deleted != 0 {
		n += 2 + sovChatMessage(uint64(m.Deleted))
	}
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovChatMessage(uint64(e))
		}
		n += 2 + sovChatMessage(uint64(l)) + l
	}
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 2 + l + sovChatMessage(uint64(l))
		}
	}
	if len(m.Devices) > 0 {
		for _, e := range m.Devices {
			l = e.Size()
			n += 2 + l + sovChatMessage(uint64(l))
		}
	}
	if len(m.Blocks) > 0 {
		for _, s := range m.Blocks {
			l = len(s)
			n += 2 + l + sovChatMessage(uint64(l))
		}
	}
	return n
}

func (m *CreateUserRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.PictureUrl)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.InformationUrl)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if len(m.MetaData) > 0 {
		for k, v := range m.MetaData {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovChatMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovChatMessage(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovChatMessage(uint64(mapEntrySize))
		}
	}
	if m.Public {
		n += 3
	}
	if m.CanBlock {
		n += 3
	}
	l = len(m.Lang)
	if l > 0 {
		n += 2 + l + sovChatMessage(uint64(l))
	}
	return n
}

func (m *GetUserRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	return n
}

func (m *Device) Size() (n int) {
	var l int
	_ = l
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.Platform != 0 {
		n += 1 + sovChatMessage(uint64(m.Platform))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.NotificationDeviceID)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	return n
}

func (m *RoomForUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomID)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.PictureURL)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.InformationURL)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.MetaData)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovChatMessage(uint64(m.Type))
	}
	l = len(m.LastMessage)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.LastMessageUpdated != 0 {
		n += 1 + sovChatMessage(uint64(m.LastMessageUpdated))
	}
	if m.CanLeft {
		n += 2
	}
	if m.Created != 0 {
		n += 1 + sovChatMessage(uint64(m.Created))
	}
	if m.Modified != 0 {
		n += 1 + sovChatMessage(uint64(m.Modified))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovChatMessage(uint64(l))
		}
	}
	if m.RuUnreadCount != 0 {
		n += 1 + sovChatMessage(uint64(m.RuUnreadCount))
	}
	return n
}

func (m *UserForRoom) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomID)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.PictureURL)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.InformationURL)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.MetaData)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.CanBlock {
		n += 2
	}
	if m.LastAccessed != 0 {
		n += 1 + sovChatMessage(uint64(m.LastAccessed))
	}
	if m.Created != 0 {
		n += 1 + sovChatMessage(uint64(m.Created))
	}
	if m.Modified != 0 {
		n += 1 + sovChatMessage(uint64(m.Modified))
	}
	if m.RuDisplay {
		n += 2
	}
	return n
}

func (m *Room) Size() (n int) {
	var l int
	_ = l
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovChatMessage(uint64(m.Id))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.PictureUrl)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.InformationUrl)
	if l > 0 {
		n += 2 + l + sovChatMessage(uint64(l))
	}
	l = len(m.MetaData)
	if l > 0 {
		n += 2 + l + sovChatMessage(uint64(l))
	}
	l = len(m.AvailableMessageTypes)
	if l > 0 {
		n += 2 + l + sovChatMessage(uint64(l))
	}
	if m.Type != 0 {
		n += 2 + sovChatMessage(uint64(m.Type))
	}
	l = len(m.WebhookToken)
	if l > 0 {
		n += 2 + l + sovChatMessage(uint64(l))
	}
	l = len(m.LastMessage)
	if l > 0 {
		n += 2 + l + sovChatMessage(uint64(l))
	}
	if m.LastMessageUpdated != 0 {
		n += 2 + sovChatMessage(uint64(m.LastMessageUpdated))
	}
	if m.MessageCount != 0 {
		n += 2 + sovChatMessage(uint64(m.MessageCount))
	}
	l = len(m.NotificationTopicId)
	if l > 0 {
		n += 2 + l + sovChatMessage(uint64(l))
	}
	if m.CanLeft {
		n += 3
	}
	if m.SpeechMode != 0 {
		n += 2 + sovChatMessage(uint64(m.SpeechMode))
	}
	if m.Created != 0 {
		n += 2 + sovChatMessage(uint64(m.Created))
	}
	if m.Modified != 0 {
		n += 2 + sovChatMessage(uint64(m.Modified))
	}
	if m.Deleted != 0 {
		n += 2 + sovChatMessage(uint64(m.Deleted))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 2 + l + sovChatMessage(uint64(l))
		}
	}
	if len(m.UserIds) > 0 {
		for _, s := range m.UserIds {
			l = len(s)
			n += 2 + l + sovChatMessage(uint64(l))
		}
	}
	return n
}

func (m *Messages) Size() (n int) {
	var l int
	_ = l
	if m.AllCount != 0 {
		n += 1 + sovChatMessage(uint64(m.AllCount))
	}
	if m.Limit != 0 {
		n += 1 + sovChatMessage(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovChatMessage(uint64(m.Offset))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovChatMessage(uint64(l))
		}
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.Authorization)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if len(m.UserIds) > 0 {
		for _, s := range m.UserIds {
			l = len(s)
			n += 1 + l + sovChatMessage(uint64(l))
		}
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.EventName)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.Role != 0 {
		n += 2 + sovChatMessage(uint64(m.Role))
	}
	l = len(m.WebhookToken)
	if l > 0 {
		n += 2 + l + sovChatMessage(uint64(l))
	}
	if m.Created != 0 {
		n += 2 + sovChatMessage(uint64(m.Created))
	}
	if m.Modified != 0 {
		n += 2 + sovChatMessage(uint64(m.Modified))
	}
	return n
}

func (m *MessagePayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.Mime)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.SourceUrl)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.ThumbnailUrl)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.Width != 0 {
		n += 1 + sovChatMessage(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 2 + sovChatMessage(uint64(m.Height))
	}
	return n
}

func (m *RoomIds) Size() (n int) {
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		for _, s := range m.RoomIds {
			l = len(s)
			n += 1 + l + sovChatMessage(uint64(l))
		}
	}
	return n
}

func (m *UserIds) Size() (n int) {
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		for _, s := range m.UserIds {
			l = len(s)
			n += 1 + l + sovChatMessage(uint64(l))
		}
	}
	return n
}

func (m *RoleIds) Size() (n int) {
	var l int
	_ = l
	if len(m.RoleIds) > 0 {
		l = 0
		for _, e := range m.RoleIds {
			l += sovChatMessage(uint64(e))
		}
		n += 1 + sovChatMessage(uint64(l)) + l
	}
	return n
}

func (m *UserRole) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.RoleId != 0 {
		n += 1 + sovChatMessage(uint64(m.RoleId))
	}
	return n
}

func (m *CreateUserRolesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if len(m.RoleIds) > 0 {
		l = 0
		for _, e := range m.RoleIds {
			l += sovChatMessage(uint64(e))
		}
		n += 1 + sovChatMessage(uint64(l)) + l
	}
	return n
}

func (m *GetUserIdsOfUserRoleRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.RoleId != 0 {
		n += 1 + sovChatMessage(uint64(m.RoleId))
	}
	return n
}

func (m *GetRoleIdsOfUserRoleRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	return n
}

func (m *DeleteUserRoleRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.RoleId != 0 {
		n += 1 + sovChatMessage(uint64(m.RoleId))
	}
	return n
}

func (m *RoomUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovChatMessage(uint64(m.UnreadCount))
	}
	if m.Display {
		n += 2
	}
	return n
}

func (m *CreateRoomUsersRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if len(m.UserIds) > 0 {
		for _, s := range m.UserIds {
			l = len(s)
			n += 1 + l + sovChatMessage(uint64(l))
		}
	}
	if m.Display {
		n += 2
	}
	return n
}

func (m *UpdateRoomUserRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovChatMessage(uint64(m.UnreadCount))
	}
	if m.Display {
		n += 2
	}
	return n
}

func (m *GetUserIdsOfRoomUserRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if len(m.RoleIds) > 0 {
		l = 0
		for _, e := range m.RoleIds {
			l += sovChatMessage(uint64(e))
		}
		n += 1 + sovChatMessage(uint64(l)) + l
	}
	return n
}

func (m *DeleteRoomUserRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Workspace)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovChatMessage(uint64(l))
	}
	if len(m.UserIds) > 0 {
		for _, s := range m.UserIds {
			l = len(s)
			n += 1 + l + sovChatMessage(uint64(l))
		}
	}
	return n
}

func (m *Struct) Size() (n int) {
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for k, v := range m.Fields {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovChatMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovChatMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovChatMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Value) Size() (n int) {
	var l int
	_ = l
	if m.Kind != nil {
		n += m.Kind.Size()
	}
	return n
}

func (m *Value_NullValue) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovChatMessage(uint64(m.NullValue))
	return n
}
func (m *Value_NumberValue) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *Value_StringValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.StringValue)
	n += 1 + l + sovChatMessage(uint64(l))
	return n
}
func (m *Value_BoolValue) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *Value_StructValue) Size() (n int) {
	var l int
	_ = l
	if m.StructValue != nil {
		l = m.StructValue.Size()
		n += 1 + l + sovChatMessage(uint64(l))
	}
	return n
}
func (m *Value_ListValue) Size() (n int) {
	var l int
	_ = l
	if m.ListValue != nil {
		l = m.ListValue.Size()
		n += 1 + l + sovChatMessage(uint64(l))
	}
	return n
}
func (m *ListValue) Size() (n int) {
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovChatMessage(uint64(l))
		}
	}
	return n
}

func sovChatMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChatMessage(x uint64) (n int) {
	return sovChatMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PictureUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PictureUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InformationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InformationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetaData == nil {
				m.MetaData = make(map[string]*Value)
			}
			var mapkey string
			var mapvalue *Value
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthChatMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChatMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthChatMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Value{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChatMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthChatMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MetaData[mapkey] = mapvalue
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Public = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanBlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanBlock = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAccessRoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastAccessRoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAccessed", wireType)
			}
			m.LastAccessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastAccessed |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			m.Modified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modified |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, &RoomForUser{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devices = append(m.Devices, &Device{})
			if err := m.Devices[len(m.Devices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PictureUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PictureUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InformationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InformationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetaData == nil {
				m.MetaData = make(map[string]*Value)
			}
			var mapkey string
			var mapvalue *Value
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthChatMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChatMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthChatMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Value{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChatMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthChatMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MetaData[mapkey] = mapvalue
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Public = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanBlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanBlock = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomForUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomForUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomForUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PictureURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PictureURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InformationURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InformationURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaData = append(m.MetaData[:0], dAtA[iNdEx:postIndex]...)
			if m.MetaData == nil {
				m.MetaData = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (RoomType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageUpdated", wireType)
			}
			m.LastMessageUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMessageUpdated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanLeft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanLeft = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			m.Modified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modified |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserForRoom{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuUnreadCount", wireType)
			}
			m.RuUnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuUnreadCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserForRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserForRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserForRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PictureURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PictureURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InformationURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InformationURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaData = append(m.MetaData[:0], dAtA[iNdEx:postIndex]...)
			if m.MetaData == nil {
				m.MetaData = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanBlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanBlock = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAccessed", wireType)
			}
			m.LastAccessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastAccessed |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			m.Modified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modified |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuDisplay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RuDisplay = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Room) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Room: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Room: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PictureUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PictureUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InformationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InformationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaData = append(m.MetaData[:0], dAtA[iNdEx:postIndex]...)
			if m.MetaData == nil {
				m.MetaData = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableMessageTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableMessageTypes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (RoomType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebhookToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebhookToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageUpdated", wireType)
			}
			m.LastMessageUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMessageUpdated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageCount", wireType)
			}
			m.MessageCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationTopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationTopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanLeft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanLeft = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpeechMode", wireType)
			}
			m.SpeechMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpeechMode |= (SpeechMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			m.Modified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modified |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserForRoom{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIds = append(m.UserIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Messages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Messages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Messages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllCount", wireType)
			}
			m.AllCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &Message{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authorization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIds = append(m.UserIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &MessagePayload{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebhookToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebhookToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			m.Modified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modified |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbnailUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbnailUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomIds = append(m.RoomIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIds = append(m.UserIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoleIds = append(m.RoleIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoleIds = append(m.RoleIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserRolesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserRolesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserRolesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoleIds = append(m.RoleIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoleIds = append(m.RoleIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserIdsOfUserRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserIdsOfUserRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserIdsOfUserRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoleIdsOfUserRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoleIdsOfUserRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoleIdsOfUserRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Display", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Display = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoomUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoomUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoomUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIds = append(m.UserIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Display", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Display = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRoomUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRoomUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRoomUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Display", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Display = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserIdsOfRoomUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserIdsOfRoomUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserIdsOfRoomUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoleIds = append(m.RoleIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoleIds = append(m.RoleIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRoomUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRoomUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRoomUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Workspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIds = append(m.UserIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Struct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Struct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Struct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = make(map[string]*Value)
			}
			var mapkey string
			var mapvalue *Value
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthChatMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChatMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthChatMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Value{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChatMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthChatMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Fields[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullValue", wireType)
			}
			var v NullValue
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (NullValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kind = &Value_NullValue{v}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Kind = &Value_NumberValue{float64(math.Float64frombits(v))}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = &Value_StringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Kind = &Value_BoolValue{b}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Struct{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &Value_StructValue{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &Value_ListValue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Value{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChatMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChatMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChatMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChatMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("chatMessage.proto", fileDescriptorChatMessage) }

var fileDescriptorChatMessage = []byte{
	// 1874 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x4f, 0x73, 0x1b, 0x49,
	0x15, 0xf7, 0xe8, 0x9f, 0xa5, 0x27, 0x59, 0x91, 0x3b, 0x71, 0xd2, 0x76, 0x8c, 0xa3, 0x0c, 0x0b,
	0x08, 0x53, 0xa5, 0x6c, 0x79, 0x53, 0x14, 0x05, 0x2c, 0x55, 0x4e, 0x9c, 0xb0, 0xae, 0x92, 0xed,
	0xd4, 0xc4, 0xde, 0x54, 0x71, 0x51, 0x8d, 0x66, 0x5a, 0x56, 0xe3, 0xd1, 0xb4, 0x98, 0x3f, 0x0e,
	0xe6, 0xcc, 0x81, 0x23, 0x47, 0xa8, 0xe2, 0x44, 0xed, 0x87, 0xe0, 0xc6, 0x85, 0x03, 0xdc, 0xf8,
	0x08, 0x54, 0xe0, 0xc2, 0xb7, 0xa0, 0xfa, 0x75, 0xcf, 0x68, 0x46, 0x1e, 0xa5, 0x9c, 0xc5, 0x39,
	0xec, 0x6d, 0xde, 0xeb, 0xd7, 0xaf, 0xdf, 0xdf, 0x5f, 0xbf, 0x1e, 0x58, 0x77, 0x26, 0x76, 0x74,
	0xc4, 0xc2, 0xd0, 0x3e, 0x67, 0xfd, 0x59, 0x20, 0x22, 0x41, 0xd6, 0xc3, 0xb7, 0xf6, 0xb9, 0x64,
	0x2b, 0x7a, 0x14, 0x8f, 0xcd, 0xff, 0x56, 0xa1, 0x72, 0x16, 0xb2, 0x80, 0xb4, 0xa1, 0xc4, 0x5d,
	0xda, 0xec, 0x1a, 0xbd, 0x8a, 0x55, 0xe2, 0x2e, 0xb9, 0x0f, 0xb5, 0x38, 0x64, 0xc1, 0xa1, 0x4b,
	0x5b, 0x5d, 0xa3, 0xd7, 0xb0, 0x34, 0x45, 0x08, 0x54, 0x7c, 0x7b, 0xca, 0xe8, 0x1a, 0x72, 0xf1,
	0x9b, 0xec, 0x00, 0xcc, 0xb8, 0x13, 0xc5, 0x01, 0x3b, 0x0b, 0x3c, 0xda, 0xc6, 0x95, 0x0c, 0x87,
	0x7c, 0x17, 0xda, 0xdc, 0x1f, 0x8b, 0x60, 0x6a, 0x47, 0x5c, 0xf8, 0x52, 0xe6, 0x0e, 0xca, 0x2c,
	0x70, 0x49, 0x17, 0x9a, 0xb1, 0x1f, 0x30, 0xdb, 0x7d, 0x2e, 0x62, 0x3f, 0xa2, 0x1d, 0x34, 0x26,
	0xcb, 0x22, 0xfb, 0x50, 0x9f, 0xb2, 0xc8, 0x3e, 0xb0, 0x23, 0x9b, 0xae, 0x77, 0xcb, 0xbd, 0xe6,
	0xde, 0x77, 0xfa, 0xd7, 0x9c, 0xea, 0x4b, 0x87, 0xfa, 0x47, 0x5a, 0xee, 0x85, 0x1f, 0x05, 0x57,
	0x56, 0xba, 0x4d, 0x3a, 0x36, 0x8b, 0x47, 0x1e, 0x77, 0x28, 0xe9, 0x1a, 0xbd, 0xba, 0xa5, 0x29,
	0xb2, 0x05, 0x75, 0xc7, 0xf6, 0x9f, 0x79, 0xc2, 0xb9, 0xa0, 0x77, 0x71, 0x25, 0xa5, 0xa5, 0xd3,
	0x9e, 0xed, 0x9f, 0xd3, 0x7b, 0xca, 0x69, 0xf9, 0x2d, 0x8d, 0xb5, 0x1d, 0x87, 0x85, 0xe1, 0xa9,
	0xb8, 0x60, 0x3e, 0xdd, 0xc0, 0xa5, 0x2c, 0x8b, 0xec, 0x42, 0xc7, 0xb3, 0xc3, 0x68, 0x1f, 0x59,
	0x96, 0x10, 0xd3, 0x43, 0x97, 0xde, 0x47, 0xb1, 0x6b, 0x7c, 0x62, 0x42, 0x6b, 0xce, 0x63, 0x2e,
	0x7d, 0xd0, 0x35, 0x7a, 0x65, 0x2b, 0xc7, 0x23, 0x14, 0x56, 0x9d, 0x80, 0xd9, 0x11, 0x73, 0xe9,
	0x23, 0x5c, 0x4e, 0x48, 0x69, 0xfb, 0x54, 0xb8, 0x7c, 0xcc, 0x99, 0x4b, 0xbb, 0xb8, 0x94, 0xd2,
	0x72, 0x97, 0xcb, 0x3c, 0x26, 0x77, 0x3d, 0x56, 0xbb, 0x34, 0x49, 0xee, 0x41, 0x35, 0x10, 0x1e,
	0x0b, 0x69, 0xaf, 0x5b, 0xee, 0x55, 0x2d, 0x45, 0x90, 0xa7, 0x92, 0x2b, 0xa6, 0x21, 0xfd, 0x3e,
	0xc6, 0x77, 0xa7, 0x20, 0xbe, 0xd2, 0xe6, 0x97, 0x22, 0x90, 0x61, 0xb6, 0x94, 0x30, 0xf9, 0x4c,
	0x9e, 0x72, 0xc9, 0x1d, 0x16, 0xd2, 0x5d, 0xdc, 0xb7, 0x59, 0xb0, 0xef, 0x00, 0x25, 0xac, 0x44,
	0x52, 0xa6, 0x62, 0x24, 0xe3, 0x1b, 0xd2, 0x1f, 0x74, 0xcb, 0xb2, 0xc6, 0x14, 0xb5, 0x75, 0x06,
	0x6b, 0xb9, 0xec, 0x91, 0x0e, 0x94, 0x2f, 0xd8, 0x15, 0x35, 0x30, 0x78, 0xf2, 0x93, 0xf4, 0xa1,
	0x7a, 0x69, 0x7b, 0x31, 0xa3, 0xa5, 0xae, 0xd1, 0x6b, 0xee, 0xd1, 0x82, 0xd3, 0xbe, 0x94, 0xeb,
	0x96, 0x12, 0xfb, 0x71, 0xe9, 0x47, 0x86, 0xf9, 0xc7, 0x32, 0xac, 0x3f, 0xc7, 0x88, 0xa1, 0xe5,
	0xec, 0x57, 0x31, 0x0b, 0x23, 0xb2, 0x0d, 0x8d, 0xb7, 0x22, 0xb8, 0x08, 0x67, 0xb6, 0xc3, 0xf4,
	0x09, 0x73, 0x06, 0x79, 0x00, 0xab, 0xb2, 0xf0, 0x87, 0xfc, 0x26, 0x7d, 0xf0, 0x08, 0x9a, 0xba,
	0xea, 0x87, 0x71, 0x61, 0x23, 0x7c, 0x0f, 0xee, 0x64, 0x4a, 0x1e, 0x85, 0x8a, 0x3b, 0xe1, 0x04,
	0x1a, 0xb2, 0x60, 0x87, 0xee, 0xbc, 0xd0, 0xf7, 0x0a, 0x5c, 0xbc, 0xe6, 0xcd, 0x07, 0x57, 0xfd,
	0x43, 0x68, 0x38, 0xb6, 0x3f, 0x1c, 0xdd, 0xb4, 0xec, 0x3f, 0x56, 0x6e, 0x5e, 0x42, 0xfb, 0xe7,
	0x2c, 0xba, 0x79, 0x5e, 0x96, 0xc0, 0x93, 0xf9, 0x95, 0x01, 0x35, 0x55, 0x66, 0x37, 0x54, 0x70,
	0x80, 0x98, 0x97, 0x28, 0x38, 0x90, 0xad, 0x34, 0xf3, 0xec, 0x48, 0x66, 0x03, 0x55, 0x57, 0xad,
	0x94, 0x96, 0x0d, 0x13, 0x61, 0xb3, 0xab, 0xa4, 0x2b, 0x82, 0xec, 0xc1, 0x3d, 0x5f, 0x44, 0x7c,
	0xcc, 0x1d, 0x4c, 0x9f, 0x3a, 0xfd, 0xf0, 0x40, 0xa7, 0xbf, 0x70, 0xcd, 0xfc, 0x4f, 0x19, 0x9a,
	0x99, 0x2e, 0x92, 0xd6, 0xc8, 0x3e, 0x3a, 0x3c, 0xd0, 0x86, 0x6a, 0x2a, 0x63, 0x65, 0x29, 0x67,
	0x65, 0x52, 0x7d, 0xe5, 0x62, 0x14, 0xb6, 0x06, 0xb4, 0x92, 0x2f, 0x3e, 0x6b, 0xb0, 0x88, 0xc2,
	0xd6, 0x80, 0x56, 0xaf, 0xd7, 0x9e, 0x35, 0x40, 0x30, 0x49, 0x30, 0xb6, 0xd6, 0x35, 0x7a, 0xad,
	0x4c, 0x19, 0x3d, 0x81, 0x4a, 0x74, 0x35, 0x63, 0x74, 0xb5, 0x6b, 0xf4, 0xda, 0x7b, 0x0f, 0x97,
	0x60, 0xc3, 0xe9, 0xd5, 0x8c, 0x59, 0x28, 0x28, 0x51, 0x52, 0x62, 0x98, 0xbe, 0x87, 0x68, 0x5d,
	0xa1, 0x64, 0x86, 0x45, 0xfa, 0x40, 0x32, 0xe4, 0xd9, 0xcc, 0x45, 0x80, 0x6b, 0x20, 0x54, 0x15,
	0xac, 0x20, 0x0a, 0xda, 0xfe, 0x80, 0x8d, 0x23, 0x0a, 0x58, 0xaf, 0x09, 0x99, 0xc5, 0xc7, 0xe6,
	0x72, 0x7c, 0x6c, 0x2d, 0xe0, 0xe3, 0x53, 0xa8, 0xca, 0xa0, 0x86, 0x74, 0x6d, 0x29, 0xde, 0xc9,
	0x14, 0xbd, 0x14, 0x81, 0x74, 0xcd, 0x52, 0xc2, 0xe4, 0x13, 0x58, 0x0b, 0xe2, 0xb3, 0xcc, 0x65,
	0xd5, 0x46, 0xb5, 0x79, 0xa6, 0xf9, 0x8f, 0x12, 0x34, 0x33, 0x9b, 0xbf, 0x31, 0x69, 0xce, 0xde,
	0x85, 0xab, 0x0b, 0xa0, 0xb0, 0x78, 0x53, 0xd5, 0xdf, 0x7f, 0x53, 0x35, 0x96, 0x67, 0x02, 0x16,
	0x32, 0xb1, 0x0d, 0x8d, 0x20, 0x3e, 0xe0, 0xe1, 0xcc, 0xb3, 0xaf, 0x30, 0x83, 0x75, 0x6b, 0xce,
	0x30, 0x7f, 0x57, 0x83, 0x0a, 0x06, 0xf1, 0xfd, 0x7d, 0x5d, 0x30, 0xc7, 0x04, 0xea, 0xea, 0x6d,
	0x65, 0x42, 0x9e, 0x9d, 0x6f, 0xd6, 0x0a, 0x71, 0xbd, 0xbd, 0x74, 0xbe, 0xb9, 0x73, 0x83, 0xf9,
	0xa6, 0x53, 0x88, 0xea, 0x5b, 0x50, 0x3f, 0x9a, 0x4f, 0x2f, 0x18, 0xf2, 0x84, 0x26, 0x4f, 0x61,
	0x63, 0xff, 0xd2, 0xe6, 0x9e, 0x3d, 0xf2, 0x98, 0xae, 0x78, 0xd9, 0x46, 0x21, 0xe2, 0x75, 0xc3,
	0x2a, 0x5e, 0x4c, 0xfb, 0xf1, 0xee, 0x4d, 0xfb, 0xd1, 0x84, 0xd6, 0x1b, 0x36, 0x9a, 0x08, 0x71,
	0xa1, 0xc6, 0x16, 0x05, 0xed, 0x39, 0xde, 0x62, 0xcf, 0x6e, 0xdc, 0xb4, 0x67, 0xef, 0x2f, 0xed,
	0x59, 0x13, 0x5a, 0x53, 0xc5, 0x51, 0xcd, 0xa2, 0xa7, 0x9b, 0x2c, 0x8f, 0x7c, 0x0a, 0x77, 0xb3,
	0x50, 0x79, 0x2a, 0x66, 0xdc, 0x39, 0x74, 0x29, 0xc5, 0xd3, 0x8b, 0x96, 0xb2, 0x48, 0xb0, 0x99,
	0x47, 0x82, 0xcf, 0x01, 0xc2, 0x19, 0x63, 0xce, 0xe4, 0x48, 0xb8, 0x8c, 0x6e, 0x61, 0x70, 0xbe,
	0x55, 0x10, 0x9c, 0xd7, 0xa9, 0x90, 0x95, 0xd9, 0x90, 0x2d, 0xdf, 0x9d, 0xe5, 0xe5, 0xfb, 0x68,
	0xf9, 0xa0, 0xd5, 0xcd, 0x0f, 0x5a, 0x29, 0xc4, 0xf4, 0x3e, 0x04, 0x62, 0xa8, 0x1a, 0x3d, 0x0e,
	0x5d, 0x35, 0x8a, 0x35, 0xac, 0x84, 0x34, 0xff, 0x6c, 0xc8, 0x42, 0xc2, 0xd8, 0x85, 0xd2, 0x24,
	0xdb, 0xf3, 0x54, 0x5c, 0x0d, 0x65, 0x52, 0x42, 0xcb, 0x0b, 0xcb, 0xe3, 0x53, 0x1e, 0x21, 0xac,
	0x54, 0x2d, 0x45, 0xc8, 0xd2, 0x17, 0xe3, 0x71, 0xc8, 0x22, 0xc4, 0x95, 0xaa, 0xa5, 0x29, 0x29,
	0x2d, 0x02, 0x97, 0x05, 0x1a, 0x54, 0x14, 0x41, 0x7e, 0x28, 0x71, 0x42, 0x9d, 0x45, 0xab, 0x68,
	0xff, 0x56, 0x81, 0xfd, 0xda, 0x1c, 0x2b, 0x95, 0x35, 0x7f, 0x5f, 0x86, 0xd5, 0xa4, 0x5e, 0xde,
	0xdf, 0xb2, 0x5b, 0x50, 0x67, 0xbe, 0x3b, 0x13, 0xdc, 0x8f, 0x34, 0xfe, 0xa5, 0xb4, 0xc4, 0x59,
	0x3b, 0x8e, 0x26, 0x22, 0xe0, 0xbf, 0xc1, 0xdc, 0x6b, 0x28, 0xcc, 0x33, 0xb3, 0xa1, 0xaa, 0xe4,
	0x42, 0x95, 0x69, 0xff, 0xe6, 0x92, 0xf6, 0xbf, 0x36, 0xd6, 0x61, 0x43, 0xe9, 0xb1, 0x0e, 0x7b,
	0x66, 0x1b, 0x1a, 0xec, 0x92, 0xf9, 0xd1, 0xf1, 0x1c, 0x17, 0xe6, 0x0c, 0xf2, 0x13, 0x58, 0x9d,
	0xd9, 0x57, 0x9e, 0xb0, 0x5d, 0x44, 0x86, 0xe6, 0xde, 0xe3, 0xe5, 0xe1, 0x79, 0xa5, 0x04, 0xad,
	0x64, 0x87, 0x3c, 0x4e, 0x4e, 0xdd, 0x88, 0x17, 0x55, 0x0b, 0xbf, 0xaf, 0xb5, 0xe8, 0x7a, 0x41,
	0x8b, 0x7e, 0xad, 0x0a, 0x35, 0xff, 0x66, 0x40, 0x3b, 0x6f, 0x09, 0xfa, 0xcb, 0x7e, 0x1d, 0xe9,
	0xa4, 0xe0, 0xb7, 0xe4, 0x4d, 0xf9, 0x94, 0xe9, 0x88, 0xe1, 0xb7, 0x54, 0x3b, 0xe6, 0x1e, 0x43,
	0x68, 0x54, 0x11, 0x4b, 0x69, 0x19, 0x9f, 0x50, 0xc4, 0x81, 0x83, 0xe8, 0xa8, 0x02, 0x37, 0x67,
	0x48, 0x77, 0xa2, 0x49, 0x3c, 0x1d, 0xf9, 0x36, 0xf7, 0xe6, 0xcf, 0xc3, 0x1c, 0x4f, 0x56, 0xde,
	0x5b, 0xee, 0x46, 0x13, 0x8c, 0x60, 0xd5, 0x52, 0x84, 0xcc, 0xd1, 0x84, 0xf1, 0xf3, 0x49, 0xa4,
	0xc3, 0xa3, 0x29, 0xf3, 0x13, 0x58, 0x55, 0xaf, 0xa6, 0x90, 0x6c, 0x42, 0x5d, 0x26, 0x74, 0xc8,
	0xdd, 0x90, 0x1a, 0x2a, 0xf3, 0x2a, 0xc1, 0xa1, 0x94, 0x3a, 0xd3, 0x45, 0xb0, 0x09, 0x75, 0x3d,
	0xc4, 0xa7, 0x52, 0x49, 0x2b, 0xa1, 0x2e, 0x8f, 0xa5, 0xba, 0x3c, 0x96, 0x4a, 0x55, 0xa5, 0x2e,
	0x5c, 0x32, 0x7f, 0x0a, 0x75, 0x1c, 0x4d, 0x65, 0x7a, 0x32, 0x2f, 0x82, 0x66, 0xae, 0x74, 0x1e,
	0xc0, 0xaa, 0xde, 0xaf, 0x07, 0xc7, 0x9a, 0xda, 0x6e, 0xfe, 0x12, 0xee, 0x67, 0x06, 0x75, 0xf9,
	0xc8, 0xfa, 0xe0, 0xb7, 0x47, 0xfe, 0xa4, 0xac, 0xa5, 0xad, 0xbc, 0xa5, 0xa7, 0xf0, 0x50, 0xcf,
	0xd1, 0x87, 0x6e, 0x78, 0x32, 0x4e, 0x4e, 0xbc, 0xf1, 0x81, 0xc5, 0x1e, 0x28, 0xad, 0x3a, 0x50,
	0x5f, 0x43, 0x6b, 0xa1, 0x1b, 0xe6, 0x39, 0x6c, 0x1c, 0x20, 0x42, 0xde, 0x8e, 0xbe, 0xe5, 0xe6,
	0x5f, 0x41, 0x5d, 0x16, 0x0c, 0x4e, 0xda, 0x28, 0x84, 0x15, 0xb3, 0x80, 0x08, 0x4b, 0x5f, 0x7a,
	0x8f, 0xa1, 0xa5, 0x7e, 0x41, 0x0c, 0x1d, 0x04, 0xd9, 0x35, 0xd4, 0x9d, 0xfb, 0x2d, 0x21, 0xa1,
	0x5f, 0xcf, 0x2d, 0x6d, 0x75, 0x13, 0x69, 0xd2, 0xfc, 0xad, 0x91, 0x24, 0x3f, 0xb1, 0x20, 0xfc,
	0x80, 0x5c, 0x14, 0xd9, 0x99, 0x2d, 0xe6, 0x56, 0x1e, 0xec, 0x32, 0x66, 0xac, 0xe5, 0xcd, 0xf8,
	0xca, 0x80, 0x0d, 0x75, 0x19, 0x27, 0x66, 0xfc, 0x9f, 0x56, 0x7c, 0x9c, 0x68, 0x89, 0x7c, 0xf5,
	0xde, 0x92, 0xad, 0xef, 0x69, 0x17, 0x9e, 0x94, 0xe0, 0xed, 0x1d, 0xb5, 0x24, 0x39, 0xe6, 0x9f,
	0x0c, 0xa8, 0xbd, 0x8e, 0x82, 0xd8, 0x91, 0xe3, 0x49, 0x6d, 0xcc, 0x99, 0xa7, 0x71, 0xa6, 0xf8,
	0x1f, 0x96, 0x12, 0xed, 0xbf, 0x44, 0x39, 0xf5, 0x9a, 0xd7, 0x9b, 0xb6, 0x5e, 0x43, 0x33, 0xc3,
	0xbe, 0xa5, 0x07, 0xf8, 0x5f, 0x4a, 0x50, 0x45, 0xa6, 0x1c, 0x9e, 0xfc, 0xd8, 0xf3, 0x86, 0x4a,
	0x85, 0x81, 0xc3, 0xd3, 0x76, 0x81, 0x8a, 0xe3, 0xd8, 0xf3, 0x70, 0xc7, 0x17, 0x2b, 0x56, 0xc3,
	0x4f, 0x08, 0xf2, 0x6d, 0x68, 0xf9, 0xf1, 0x74, 0xc4, 0x82, 0xe1, 0xdc, 0x06, 0xe3, 0x8b, 0x15,
	0xab, 0xa9, 0xb8, 0xa9, 0x50, 0x18, 0x05, 0xdc, 0x3f, 0xd7, 0x42, 0x78, 0xab, 0x4b, 0x21, 0xc5,
	0x55, 0x42, 0x8f, 0x00, 0x46, 0x42, 0x24, 0x86, 0xc8, 0xa1, 0xa4, 0x2e, 0x8f, 0x92, 0x3c, 0x25,
	0xf0, 0x33, 0xd4, 0x12, 0x3b, 0x91, 0x16, 0xa9, 0xa2, 0xbb, 0x9b, 0x4b, 0xa3, 0xa9, 0x0f, 0x88,
	0x9d, 0x28, 0xf5, 0xd4, 0xe3, 0x61, 0xb2, 0xbb, 0x86, 0xbb, 0x8b, 0x3c, 0x1d, 0xf0, 0x30, 0x4a,
	0x3d, 0xf5, 0x12, 0xe2, 0x59, 0x0d, 0x2a, 0x17, 0xdc, 0x77, 0xcd, 0xcf, 0xa1, 0x91, 0x4a, 0x90,
	0x4f, 0xa1, 0x86, 0xea, 0x92, 0xdc, 0x2e, 0x0f, 0xbe, 0x96, 0xdb, 0x75, 0x15, 0x3a, 0xc9, 0x21,
	0x9d, 0xd4, 0xa1, 0x72, 0x7c, 0x72, 0xfc, 0xa2, 0xb3, 0x42, 0x5a, 0x50, 0x3f, 0xf1, 0xd9, 0x89,
	0x7f, 0xe2, 0xb3, 0x8e, 0x41, 0xee, 0x40, 0xf3, 0x55, 0xc0, 0x2f, 0x75, 0xff, 0x76, 0x4a, 0xa4,
	0x0d, 0xf0, 0x0a, 0xff, 0xe0, 0x20, 0x5d, 0x96, 0xf4, 0xb1, 0x88, 0xb8, 0xa3, 0xd6, 0x2b, 0x72,
	0x43, 0xa2, 0xf4, 0x85, 0xef, 0x76, 0xaa, 0xbb, 0x7f, 0x35, 0x00, 0xe6, 0xe3, 0x2e, 0x21, 0xd0,
	0x9e, 0x53, 0xc7, 0xc2, 0x67, 0x9d, 0x15, 0xb2, 0x0d, 0x74, 0xce, 0x7b, 0x63, 0x5f, 0xb0, 0x78,
	0xf6, 0x86, 0x8d, 0x4e, 0xc5, 0x1b, 0x36, 0xea, 0x18, 0x64, 0x07, 0xb6, 0x0a, 0x57, 0x9f, 0x7b,
	0x22, 0x76, 0x3b, 0x25, 0xd2, 0x85, 0xed, 0xc5, 0x75, 0x5c, 0x4a, 0x24, 0xca, 0xe4, 0x1e, 0x74,
	0xe6, 0x12, 0xfb, 0xde, 0x5b, 0xfb, 0x2a, 0xec, 0x54, 0xf2, 0xdc, 0x23, 0xdb, 0x8f, 0x6d, 0xaf,
	0x53, 0x25, 0xeb, 0xb0, 0x36, 0xe7, 0x4a, 0x0f, 0x6a, 0xbb, 0x0f, 0xa1, 0x91, 0x96, 0x1c, 0xfa,
	0x7b, 0x36, 0x18, 0x0c, 0xbf, 0xdc, 0x1f, 0x9c, 0xbd, 0xe8, 0xac, 0x3c, 0xeb, 0xff, 0xfd, 0xdd,
	0x8e, 0xf1, 0xcf, 0x77, 0x3b, 0xc6, 0xbf, 0xde, 0xed, 0x18, 0x7f, 0xf8, 0xf7, 0xce, 0xca, 0x2f,
	0xb6, 0xcf, 0x79, 0x34, 0x89, 0x47, 0x7d, 0x47, 0x4c, 0x9f, 0x24, 0x29, 0x78, 0x92, 0xa4, 0x60,
	0x54, 0xc3, 0xaf, 0xcf, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xf9, 0x55, 0xa3, 0x26, 0x17,
	0x00, 0x00,
}
