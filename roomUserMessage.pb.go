// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: roomUserMessage.proto

package protobuf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RoomUser struct {
	RoomID      string `protobuf:"bytes,11,opt,name=room_id,json=roomId" json:"roomId" db:"room_id,notnull"`
	UserID      string `protobuf:"bytes,12,opt,name=user_id,json=userId" json:"userId" db:"user_id,notnull"`
	UnreadCount int32  `protobuf:"varint,13,opt,name=unread_count,json=unreadCount" json:"unreadCount,omitempty" db:"unread_count,notnull"`
	Display     bool   `protobuf:"varint,14,opt,name=display" json:"display,omitempty" db:"display,notnull"`
}

func (m *RoomUser) Reset()                    { *m = RoomUser{} }
func (m *RoomUser) String() string            { return proto.CompactTextString(m) }
func (*RoomUser) ProtoMessage()               {}
func (*RoomUser) Descriptor() ([]byte, []int) { return fileDescriptorRoomUserMessage, []int{0} }

func (m *RoomUser) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *RoomUser) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *RoomUser) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *RoomUser) GetDisplay() bool {
	if m != nil {
		return m.Display
	}
	return false
}

type CreateRoomUsersRequest struct {
	RoomID  string   `protobuf:"bytes,11,opt,name=room_id,json=roomId" json:"roomId"`
	UserIDs []string `protobuf:"bytes,12,rep,name=user_ids,json=userIds" json:"userIds,omitempty"`
	Display bool     `protobuf:"varint,13,opt,name=display" json:"display,omitempty"`
}

func (m *CreateRoomUsersRequest) Reset()         { *m = CreateRoomUsersRequest{} }
func (m *CreateRoomUsersRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRoomUsersRequest) ProtoMessage()    {}
func (*CreateRoomUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRoomUserMessage, []int{1}
}

func (m *CreateRoomUsersRequest) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *CreateRoomUsersRequest) GetUserIDs() []string {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

func (m *CreateRoomUsersRequest) GetDisplay() bool {
	if m != nil {
		return m.Display
	}
	return false
}

type GetUserIdsOfRoomUserRequest struct {
	RoomID  string  `protobuf:"bytes,11,opt,name=room_id,json=roomId" json:"roomId"`
	RoleIDs []int32 `protobuf:"varint,12,rep,name=role_ids,json=roleIds" json:"roleIds,omitempty"`
}

func (m *GetUserIdsOfRoomUserRequest) Reset()         { *m = GetUserIdsOfRoomUserRequest{} }
func (m *GetUserIdsOfRoomUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserIdsOfRoomUserRequest) ProtoMessage()    {}
func (*GetUserIdsOfRoomUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRoomUserMessage, []int{2}
}

func (m *GetUserIdsOfRoomUserRequest) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *GetUserIdsOfRoomUserRequest) GetRoleIDs() []int32 {
	if m != nil {
		return m.RoleIDs
	}
	return nil
}

type UpdateRoomUserRequest struct {
	RoomID      string `protobuf:"bytes,11,opt,name=room_id,json=roomId" json:"roomId"`
	UserID      string `protobuf:"bytes,12,opt,name=user_id,json=userId" json:"userId"`
	UnreadCount *int32 `protobuf:"varint,13,opt,name=unread_count,json=unreadCount" json:"unreadCount,omitempty"`
	Display     *bool  `protobuf:"varint,14,opt,name=display" json:"display,omitempty"`
}

func (m *UpdateRoomUserRequest) Reset()         { *m = UpdateRoomUserRequest{} }
func (m *UpdateRoomUserRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRoomUserRequest) ProtoMessage()    {}
func (*UpdateRoomUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRoomUserMessage, []int{3}
}

func (m *UpdateRoomUserRequest) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *UpdateRoomUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpdateRoomUserRequest) GetUnreadCount() int32 {
	if m != nil && m.UnreadCount != nil {
		return *m.UnreadCount
	}
	return 0
}

func (m *UpdateRoomUserRequest) GetDisplay() bool {
	if m != nil && m.Display != nil {
		return *m.Display
	}
	return false
}

type DeleteRoomUsersRequest struct {
	RoomID  string   `protobuf:"bytes,11,opt,name=room_id,json=roomId" json:"roomId"`
	UserIDs []string `protobuf:"bytes,12,rep,name=user_ids,json=userIds" json:"userIds,omitempty"`
}

func (m *DeleteRoomUsersRequest) Reset()         { *m = DeleteRoomUsersRequest{} }
func (m *DeleteRoomUsersRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRoomUsersRequest) ProtoMessage()    {}
func (*DeleteRoomUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRoomUserMessage, []int{4}
}

func (m *DeleteRoomUsersRequest) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *DeleteRoomUsersRequest) GetUserIDs() []string {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*RoomUser)(nil), "swagchat.protobuf.RoomUser")
	proto.RegisterType((*CreateRoomUsersRequest)(nil), "swagchat.protobuf.CreateRoomUsersRequest")
	proto.RegisterType((*GetUserIdsOfRoomUserRequest)(nil), "swagchat.protobuf.GetUserIdsOfRoomUserRequest")
	proto.RegisterType((*UpdateRoomUserRequest)(nil), "swagchat.protobuf.UpdateRoomUserRequest")
	proto.RegisterType((*DeleteRoomUsersRequest)(nil), "swagchat.protobuf.DeleteRoomUsersRequest")
}

func init() { proto.RegisterFile("roomUserMessage.proto", fileDescriptorRoomUserMessage) }

var fileDescriptorRoomUserMessage = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x37, 0xea, 0x6e, 0xba, 0xb3, 0x5d, 0x61, 0xc3, 0x66, 0x49, 0x55, 0x9c, 0x90, 0x53,
	0x0e, 0x4b, 0x63, 0xf1, 0x56, 0x3d, 0xa5, 0x05, 0x29, 0x22, 0x42, 0xa0, 0x17, 0x41, 0x4a, 0xda,
	0x4c, 0xd3, 0x40, 0x92, 0x89, 0x99, 0x09, 0xd2, 0x2f, 0xe1, 0xc5, 0x4f, 0xe0, 0x67, 0xf1, 0xe2,
	0x51, 0xfc, 0x00, 0x39, 0xf4, 0xd8, 0x63, 0x3f, 0x81, 0x4c, 0x66, 0xf2, 0xa7, 0xc1, 0x80, 0xd0,
	0xc3, 0xde, 0x9a, 0x79, 0xde, 0xfc, 0xfa, 0x3e, 0x4f, 0x1e, 0x06, 0xa8, 0x29, 0xc6, 0xd1, 0x9c,
	0xa0, 0xf4, 0x03, 0x22, 0xc4, 0xf5, 0xd1, 0x30, 0x49, 0x31, 0xc5, 0xca, 0x0d, 0xf9, 0xea, 0xfa,
	0xab, 0x8d, 0x4b, 0xf9, 0xf3, 0x32, 0x5b, 0x3f, 0xbb, 0xf5, 0xb1, 0x8f, 0x8b, 0x27, 0x8b, 0xfd,
	0xe2, 0x82, 0xf1, 0xe7, 0x11, 0xe8, 0x39, 0x02, 0xa1, 0xcc, 0x80, 0xcc, 0x70, 0x8b, 0xc0, 0xd3,
	0xae, 0x74, 0xc9, 0xbc, 0xb4, 0x5f, 0xfd, 0xca, 0xe1, 0xd9, 0x2e, 0x87, 0x17, 0x6c, 0x64, 0x36,
	0xdd, 0xe7, 0xf0, 0x82, 0x0d, 0xcc, 0xbc, 0x43, 0x0e, 0x6f, 0xbd, 0xe5, 0xd8, 0x10, 0xe3, 0xf7,
	0x31, 0xa6, 0x71, 0x16, 0x86, 0x86, 0x23, 0x74, 0x86, 0xca, 0x08, 0x4a, 0x19, 0xaa, 0x7f, 0x8c,
	0x62, 0xff, 0xc4, 0x51, 0x6c, 0xa0, 0x46, 0x89, 0xf1, 0x06, 0x8a, 0xeb, 0xca, 0x67, 0xd0, 0xcf,
	0xe2, 0x14, 0xb9, 0xde, 0x62, 0x85, 0xb3, 0x98, 0x6a, 0xd7, 0xba, 0x64, 0x9e, 0xdb, 0x63, 0xc6,
	0xdb, 0xe7, 0x50, 0xe5, 0xda, 0x84, 0x49, 0xf7, 0x38, 0x0a, 0x28, 0x8a, 0x12, 0xba, 0x3d, 0xe4,
	0x70, 0x50, 0x40, 0x1b, 0x2f, 0xd6, 0xe4, 0xab, 0xc6, 0x3b, 0xca, 0x7b, 0x20, 0x7b, 0x01, 0x49,
	0x42, 0x77, 0xab, 0x3d, 0xd5, 0x25, 0xb3, 0x67, 0x8f, 0x04, 0xf9, 0x46, 0x1c, 0x1f, 0x51, 0x8b,
	0x55, 0x4b, 0xa1, 0x02, 0x96, 0x84, 0xf1, 0x93, 0xdf, 0x3f, 0xe0, 0x99, 0xf1, 0x53, 0x02, 0x77,
	0x93, 0x14, 0xb9, 0x14, 0x95, 0xd1, 0x12, 0x07, 0x7d, 0xc9, 0x10, 0xa1, 0xca, 0xa8, 0x1d, 0xb1,
	0xd6, 0x15, 0x71, 0x15, 0xe5, 0x1b, 0xd0, 0x13, 0xd9, 0x10, 0xad, 0xaf, 0x3f, 0x36, 0x2f, 0x6d,
	0x7d, 0x97, 0x43, 0x99, 0xe7, 0x48, 0xd8, 0xa2, 0x3c, 0x28, 0x52, 0x2f, 0xea, 0xc8, 0xe2, 0x48,
	0x79, 0x5d, 0xbb, 0xbb, 0x2e, 0xdc, 0x0d, 0x3a, 0xdd, 0xb5, 0x5d, 0x7c, 0x97, 0xc0, 0xf3, 0x77,
	0x88, 0xce, 0x39, 0xe9, 0xe3, 0xba, 0xf4, 0x72, 0x9a, 0x95, 0x14, 0x87, 0xa8, 0xb2, 0x72, 0xce,
	0xad, 0x38, 0x38, 0x44, 0xc2, 0x0a, 0x93, 0x5b, 0x56, 0xc4, 0x91, 0xd8, 0xea, 0x20, 0x01, 0x75,
	0x9e, 0x78, 0x8d, 0x6c, 0x4f, 0xd8, 0x67, 0xd4, 0x6e, 0xa9, 0xd6, 0xd5, 0xd2, 0xaa, 0x8d, 0x6f,
	0xff, 0xd9, 0xc6, 0x41, 0x67, 0x13, 0x8f, 0xcb, 0x66, 0xb5, 0xcb, 0xa6, 0xfe, 0xd7, 0xa7, 0xf8,
	0x26, 0x81, 0xbb, 0x29, 0x0a, 0xd1, 0xc3, 0x17, 0x8a, 0x2f, 0x64, 0xbf, 0xfc, 0xf4, 0xc2, 0x0f,
	0xe8, 0x26, 0x5b, 0x0e, 0x57, 0x38, 0xb2, 0xca, 0xcb, 0xc6, 0x2a, 0x2f, 0x9b, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x1c, 0x83, 0xd3, 0x15, 0x97, 0x04, 0x00, 0x00,
}
