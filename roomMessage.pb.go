// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: roomMessage.proto

package protobuf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RoomType int32

const (
	RoomType_NONE        RoomType = 0
	RoomType_OneOnOne    RoomType = 1
	RoomType_PrivateRoom RoomType = 2
	RoomType_PublicRoom  RoomType = 3
	RoomType_NoticeRoom  RoomType = 4
	RoomType_RoomTypeEnd RoomType = 5
)

var RoomType_name = map[int32]string{
	0: "NONE",
	1: "OneOnOne",
	2: "PrivateRoom",
	3: "PublicRoom",
	4: "NoticeRoom",
	5: "RoomTypeEnd",
}
var RoomType_value = map[string]int32{
	"NONE":        0,
	"OneOnOne":    1,
	"PrivateRoom": 2,
	"PublicRoom":  3,
	"NoticeRoom":  4,
	"RoomTypeEnd": 5,
}

func (x RoomType) Enum() *RoomType {
	p := new(RoomType)
	*p = x
	return p
}
func (x RoomType) String() string {
	return proto.EnumName(RoomType_name, int32(x))
}
func (x *RoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RoomType_value, data, "RoomType")
	if err != nil {
		return err
	}
	*x = RoomType(value)
	return nil
}
func (RoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{0} }

type SpeechMode int32

const (
	SpeechMode_SpeechModeNone               SpeechMode = 0
	SpeechMode_SpeechModeWakeupWebToWeb     SpeechMode = 1
	SpeechMode_SpeechModeWakeupWebToCloud   SpeechMode = 2
	SpeechMode_SpeechModeWakeupCloudToCloud SpeechMode = 3
	SpeechMode_SpeechModeAlways             SpeechMode = 4
	SpeechMode_SpeechModeManual             SpeechMode = 5
	SpeechMode_SpeechModeEnd                SpeechMode = 6
)

var SpeechMode_name = map[int32]string{
	0: "SpeechModeNone",
	1: "SpeechModeWakeupWebToWeb",
	2: "SpeechModeWakeupWebToCloud",
	3: "SpeechModeWakeupCloudToCloud",
	4: "SpeechModeAlways",
	5: "SpeechModeManual",
	6: "SpeechModeEnd",
}
var SpeechMode_value = map[string]int32{
	"SpeechModeNone":               0,
	"SpeechModeWakeupWebToWeb":     1,
	"SpeechModeWakeupWebToCloud":   2,
	"SpeechModeWakeupCloudToCloud": 3,
	"SpeechModeAlways":             4,
	"SpeechModeManual":             5,
	"SpeechModeEnd":                6,
}

func (x SpeechMode) Enum() *SpeechMode {
	p := new(SpeechMode)
	*p = x
	return p
}
func (x SpeechMode) String() string {
	return proto.EnumName(SpeechMode_name, int32(x))
}
func (x *SpeechMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SpeechMode_value, data, "SpeechMode")
	if err != nil {
		return err
	}
	*x = SpeechMode(value)
	return nil
}
func (SpeechMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{1} }

type Room struct {
	Workspace             string        `protobuf:"bytes,1,opt,name=workspace" json:"workspace"`
	ID                    uint64        `protobuf:"varint,11,opt,name=id" json:"-" db:"id"`
	RoomID                string        `protobuf:"bytes,12,opt,name=room_id,json=roomId" json:"roomId" db:"user_id"`
	UserID                string        `protobuf:"bytes,13,opt,name=user_id,json=userId" json:"userId" db:"room_id"`
	Name                  string        `protobuf:"bytes,14,opt,name=name" json:"name" db:"name"`
	PictureURL            string        `protobuf:"bytes,15,opt,name=picture_url,json=pictureUrl" json:"pictureUrl" db:"picture_url"`
	InformationURL        string        `protobuf:"bytes,16,opt,name=information_url,json=informationUrl" json:"informationUrl" db:"information_url"`
	MetaData              []byte        `protobuf:"bytes,17,opt,name=meta_data,json=metaData" json:"metaData" db:"meta_data"`
	AvailableMessageTypes string        `protobuf:"bytes,18,opt,name=available_message_types,json=availableMessageTypes" json:"availableMessageTypes" db:"available_message_types"`
	Type                  RoomType      `protobuf:"varint,7,opt,name=type,enum=swagchat.protobuf.RoomType" json:"type" db:"type"`
	WebhookToken          string        `protobuf:"bytes,20,opt,name=webhook_token,json=webhookToken" json:"webhookToken" db:"webhook_token"`
	LastMessage           string        `protobuf:"bytes,21,opt,name=last_message,json=lastMessage" json:"lastMessage" db:"last_message"`
	LastMessageUpdated    int64         `protobuf:"varint,22,opt,name=last_message_updated,json=lastMessageUpdated" json:"lastMessageUpdated" db:"last_message_updated"`
	MessageCount          *int64        `protobuf:"varint,23,opt,name=message_count,json=messageCount" json:"messageCount,omitempty" db:"-"`
	NotificationTopicID   string        `protobuf:"bytes,24,opt,name=notification_topic_id,json=notificationTopicId" json:"notificationTopicId" db:"notification_topic_id"`
	Can_Left              *bool         `protobuf:"varint,25,opt,name=can_Left,json=canLeft" json:"canLeft,omitempty" db:"can_left"`
	SpeechMode            SpeechMode    `protobuf:"varint,26,opt,name=speech_mode,json=speechMode,enum=swagchat.protobuf.SpeechMode" json:"speechMode" db:"speech_mode"`
	Created               int64         `protobuf:"varint,31,opt,name=created" json:"created" db:"created"`
	Modified              int64         `protobuf:"varint,32,opt,name=modified" json:"modified" db:"modified"`
	Deleted               int64         `protobuf:"varint,33,opt,name=deleted" json:"deleted" db:"deleted"`
	Users                 []UserForRoom `protobuf:"bytes,40,rep,name=users" json:"users" db:"-"`
	UserIDs               []string      `protobuf:"bytes,41,rep,name=user_ids,json=userIds" json:"userIds,omitempty" db:"-"`
}

func (m *Room) Reset()                    { *m = Room{} }
func (m *Room) String() string            { return proto.CompactTextString(m) }
func (*Room) ProtoMessage()               {}
func (*Room) Descriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{0} }

func (m *Room) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *Room) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Room) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *Room) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Room) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Room) GetPictureURL() string {
	if m != nil {
		return m.PictureURL
	}
	return ""
}

func (m *Room) GetInformationURL() string {
	if m != nil {
		return m.InformationURL
	}
	return ""
}

func (m *Room) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *Room) GetAvailableMessageTypes() string {
	if m != nil {
		return m.AvailableMessageTypes
	}
	return ""
}

func (m *Room) GetType() RoomType {
	if m != nil {
		return m.Type
	}
	return RoomType_NONE
}

func (m *Room) GetWebhookToken() string {
	if m != nil {
		return m.WebhookToken
	}
	return ""
}

func (m *Room) GetLastMessage() string {
	if m != nil {
		return m.LastMessage
	}
	return ""
}

func (m *Room) GetLastMessageUpdated() int64 {
	if m != nil {
		return m.LastMessageUpdated
	}
	return 0
}

func (m *Room) GetMessageCount() int64 {
	if m != nil && m.MessageCount != nil {
		return *m.MessageCount
	}
	return 0
}

func (m *Room) GetNotificationTopicID() string {
	if m != nil {
		return m.NotificationTopicID
	}
	return ""
}

func (m *Room) GetCan_Left() bool {
	if m != nil && m.Can_Left != nil {
		return *m.Can_Left
	}
	return false
}

func (m *Room) GetSpeechMode() SpeechMode {
	if m != nil {
		return m.SpeechMode
	}
	return SpeechMode_SpeechModeNone
}

func (m *Room) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Room) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

func (m *Room) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *Room) GetUsers() []UserForRoom {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Room) GetUserIDs() []string {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

type UserForRoom struct {
	RoomID         string `protobuf:"bytes,1,opt,name=room_id,json=roomId" json:"roomId" db:"room_id"`
	UserID         string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"userId" db:"user_id"`
	Name           string `protobuf:"bytes,3,opt,name=name" json:"name" db:"name"`
	PictureURL     string `protobuf:"bytes,4,opt,name=picture_url,json=pictureUrl" json:"pictureUrl" db:"picture_url"`
	InformationURL string `protobuf:"bytes,5,opt,name=information_url,json=informationUrl" json:"informationUrl" db:"information_url"`
	MetaData       []byte `protobuf:"bytes,6,opt,name=meta_data,json=metaData" json:"metaData" db:"meta_data"`
	CanBlock       *bool  `protobuf:"varint,7,opt,name=can_block,json=canBlock" json:"canBlock" db:"can_block"`
	LastAccessed   int64  `protobuf:"varint,8,opt,name=lastAccessed" json:"lastAccessed" db:"last_accessed"`
	RuDisplay      *bool  `protobuf:"varint,9,opt,name=ru_display,json=ruDisplay" json:"ruDisplay" db:"ru_display"`
	Created        int64  `protobuf:"varint,21,opt,name=created" json:"created" db:"created"`
	Modified       int64  `protobuf:"varint,22,opt,name=modified" json:"modified" db:"modified"`
}

func (m *UserForRoom) Reset()                    { *m = UserForRoom{} }
func (m *UserForRoom) String() string            { return proto.CompactTextString(m) }
func (*UserForRoom) ProtoMessage()               {}
func (*UserForRoom) Descriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{1} }

func (m *UserForRoom) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *UserForRoom) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserForRoom) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserForRoom) GetPictureURL() string {
	if m != nil {
		return m.PictureURL
	}
	return ""
}

func (m *UserForRoom) GetInformationURL() string {
	if m != nil {
		return m.InformationURL
	}
	return ""
}

func (m *UserForRoom) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *UserForRoom) GetCanBlock() bool {
	if m != nil && m.CanBlock != nil {
		return *m.CanBlock
	}
	return false
}

func (m *UserForRoom) GetLastAccessed() int64 {
	if m != nil {
		return m.LastAccessed
	}
	return 0
}

func (m *UserForRoom) GetRuDisplay() bool {
	if m != nil && m.RuDisplay != nil {
		return *m.RuDisplay
	}
	return false
}

func (m *UserForRoom) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *UserForRoom) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

func init() {
	proto.RegisterType((*Room)(nil), "swagchat.protobuf.Room")
	proto.RegisterType((*UserForRoom)(nil), "swagchat.protobuf.UserForRoom")
	proto.RegisterEnum("swagchat.protobuf.RoomType", RoomType_name, RoomType_value)
	proto.RegisterEnum("swagchat.protobuf.SpeechMode", SpeechMode_name, SpeechMode_value)
}

func init() { proto.RegisterFile("roomMessage.proto", fileDescriptorRoomMessage) }

var fileDescriptorRoomMessage = []byte{
	// 1141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0x36, 0x25, 0xd9, 0x92, 0x46, 0xb2, 0x4c, 0x4d, 0xe4, 0x84, 0xd1, 0xef, 0xdf, 0xa3, 0x0e,
	0xda, 0x40, 0x35, 0x1a, 0x07, 0x0d, 0x0a, 0x14, 0x48, 0xd0, 0x8b, 0x15, 0xbb, 0x80, 0xd1, 0xf8,
	0x02, 0xd6, 0x86, 0x81, 0x6e, 0x84, 0x11, 0x39, 0xb2, 0x09, 0x53, 0x1c, 0x81, 0x97, 0x18, 0xde,
	0xf7, 0x45, 0xfa, 0x24, 0xdd, 0x76, 0xd9, 0x27, 0x20, 0x8a, 0xec, 0xaa, 0x25, 0x9f, 0xa0, 0x38,
	0xc3, 0xa1, 0x48, 0xd9, 0x2a, 0x60, 0x2f, 0xda, 0x1d, 0x79, 0xbe, 0xcb, 0x99, 0x21, 0xcf, 0x05,
	0xb5, 0x7d, 0x21, 0x26, 0x47, 0x3c, 0x08, 0xd8, 0x25, 0xdf, 0x9d, 0xfa, 0x22, 0x14, 0xb8, 0x1d,
	0xdc, 0xb0, 0x4b, 0xeb, 0x8a, 0x85, 0xe9, 0xfb, 0x28, 0x1a, 0x77, 0x3b, 0x97, 0xe2, 0x52, 0xc8,
	0xb7, 0x57, 0xf0, 0x94, 0x02, 0xf4, 0xaf, 0x26, 0xaa, 0x98, 0x42, 0x4c, 0x30, 0x45, 0xf5, 0x1b,
	0xe1, 0x5f, 0x07, 0x53, 0x66, 0x71, 0x43, 0xeb, 0x69, 0xfd, 0xfa, 0xa0, 0xf2, 0x7b, 0x4c, 0x56,
	0xcc, 0x3c, 0x8c, 0x77, 0x50, 0xc9, 0xb1, 0x8d, 0x46, 0x4f, 0xeb, 0x57, 0x06, 0x5d, 0x00, 0x3f,
	0xc6, 0xa4, 0x74, 0xb8, 0x3f, 0x8b, 0x89, 0xf6, 0x32, 0x89, 0x49, 0xd5, 0x1e, 0xbd, 0xa1, 0x8e,
	0x4d, 0xcd, 0x92, 0x63, 0xe3, 0x3d, 0x54, 0x85, 0x63, 0x0d, 0x1d, 0xdb, 0x68, 0x4a, 0xb7, 0xbe,
	0x12, 0xac, 0x41, 0x3a, 0x29, 0x5a, 0x03, 0xc2, 0xa1, 0x9d, 0xc4, 0xa4, 0x09, 0xca, 0x28, 0xe0,
	0xfe, 0x10, 0xe4, 0x2a, 0x0e, 0x16, 0x2a, 0x66, 0xac, 0x2f, 0x5a, 0x9c, 0x07, 0xdc, 0x4f, 0x2d,
	0x80, 0x90, 0x5b, 0xa8, 0x8c, 0xd4, 0x54, 0x71, 0xfc, 0x19, 0xaa, 0x78, 0x6c, 0xc2, 0x8d, 0x96,
	0xd4, 0xb7, 0x41, 0x9f, 0xc4, 0xa4, 0x0e, 0x5c, 0x88, 0x53, 0x53, 0xc2, 0xf8, 0x1c, 0x35, 0xa6,
	0x8e, 0x15, 0x46, 0x3e, 0x1f, 0x46, 0xbe, 0x6b, 0x6c, 0x48, 0xf6, 0x57, 0x2a, 0x1b, 0x3a, 0x4d,
	0xa1, 0x73, 0xf3, 0xfd, 0x2c, 0x26, 0x48, 0x11, 0xcf, 0x7d, 0x37, 0x89, 0x89, 0x0e, 0x4e, 0x05,
	0x29, 0x35, 0x0b, 0x38, 0x76, 0xd0, 0x86, 0xe3, 0x8d, 0x85, 0x3f, 0x61, 0xa1, 0x23, 0x3c, 0x69,
	0xad, 0x4b, 0xeb, 0xef, 0x95, 0x75, 0xeb, 0x30, 0x87, 0x53, 0xfb, 0x56, 0x41, 0x90, 0xa6, 0xe8,
	0xc8, 0xaf, 0xba, 0x68, 0x43, 0xcd, 0x3b, 0x3c, 0xfc, 0x16, 0xd5, 0x27, 0x3c, 0x64, 0x43, 0x9b,
	0x85, 0xcc, 0x68, 0xf7, 0xb4, 0x7e, 0x73, 0xb0, 0x3d, 0x8b, 0x49, 0x0d, 0x82, 0xfb, 0x2c, 0x64,
	0x49, 0x4c, 0x5a, 0x60, 0x34, 0x27, 0x51, 0x73, 0x8e, 0xe1, 0x08, 0x3d, 0x63, 0x1f, 0x98, 0xe3,
	0xb2, 0x91, 0xcb, 0x87, 0x93, 0xb4, 0x90, 0x86, 0xe1, 0xed, 0x94, 0x07, 0x06, 0x96, 0xe7, 0xfd,
	0x06, 0xce, 0x3b, 0x8b, 0xc9, 0xe6, 0x9c, 0xa6, 0xca, 0xed, 0x0c, 0x48, 0x49, 0x4c, 0xb6, 0xc0,
	0xfb, 0x1f, 0x3c, 0xa8, 0xb9, 0x5c, 0x86, 0x07, 0xa8, 0x02, 0x04, 0xa3, 0xda, 0xd3, 0xfa, 0xad,
	0xd7, 0xff, 0xdb, 0xbd, 0x57, 0xb3, 0xbb, 0x50, 0x2a, 0xc0, 0x5d, 0xfc, 0x73, 0x20, 0xa2, 0xa6,
	0xd4, 0xe2, 0x13, 0xb4, 0x7e, 0xc3, 0x47, 0x57, 0x42, 0x5c, 0x0f, 0x43, 0x71, 0xcd, 0x3d, 0xa3,
	0x23, 0x0f, 0xbc, 0xa3, 0x0e, 0xdc, 0x54, 0xe0, 0x19, 0x60, 0x49, 0x4c, 0x30, 0xe8, 0x17, 0x04,
	0xd4, 0x5c, 0xe0, 0xe0, 0x1f, 0x51, 0xd3, 0x65, 0x41, 0x98, 0x5d, 0xc1, 0xd8, 0xcc, 0x2b, 0x6f,
	0x16, 0x93, 0x06, 0x60, 0xea, 0x12, 0x49, 0x4c, 0xda, 0x60, 0x57, 0xa4, 0x53, 0xb3, 0xc8, 0xc0,
	0x0e, 0xea, 0x14, 0xd1, 0x61, 0x34, 0xb5, 0x59, 0xc8, 0x6d, 0xe3, 0x69, 0x4f, 0xeb, 0x97, 0x07,
	0x5f, 0x2b, 0x53, 0x5c, 0x90, 0x9c, 0xa7, 0x8c, 0x24, 0x26, 0xcf, 0xef, 0x7a, 0x67, 0x6a, 0x6a,
	0x2e, 0x11, 0xe0, 0x43, 0xb4, 0x9e, 0xf1, 0x2c, 0x11, 0x79, 0xa1, 0xf1, 0x4c, 0xe6, 0xf8, 0x74,
	0x16, 0x93, 0xa7, 0x0a, 0x78, 0x07, 0xf1, 0x2f, 0xc4, 0xc4, 0x09, 0xf9, 0x64, 0x1a, 0xde, 0x26,
	0x31, 0x59, 0x83, 0x1c, 0x2f, 0xa9, 0xd9, 0x2c, 0x32, 0xf0, 0x2f, 0x1a, 0xda, 0xf4, 0x44, 0xe8,
	0x8c, 0x1d, 0x2b, 0xad, 0xb8, 0x50, 0x4c, 0x1d, 0x0b, 0xda, 0xd0, 0x90, 0x1f, 0xe3, 0x54, 0x55,
	0xef, 0x93, 0xe3, 0x02, 0xe9, 0x0c, 0x38, 0xb2, 0x27, 0x9f, 0x78, 0xf7, 0xc2, 0x70, 0x9f, 0xae,
	0x6c, 0xba, 0x65, 0xb6, 0xd4, 0x5c, 0x26, 0xc1, 0x7b, 0xa8, 0x66, 0x31, 0x6f, 0xf8, 0x9e, 0x8f,
	0x43, 0xe3, 0x79, 0x4f, 0xeb, 0xd7, 0x06, 0x2f, 0x66, 0x31, 0x69, 0x5b, 0xcc, 0x83, 0xd0, 0xc2,
	0x3d, 0xd6, 0xc1, 0x1b, 0xc8, 0x2e, 0x1f, 0x87, 0xd4, 0xac, 0x2a, 0x0e, 0x1e, 0xa3, 0x46, 0x30,
	0xe5, 0xdc, 0xba, 0x1a, 0x4e, 0x84, 0xcd, 0x8d, 0xae, 0x2c, 0xb4, 0xff, 0x2f, 0x29, 0xb4, 0x9f,
	0x24, 0xeb, 0x48, 0xd8, 0x7c, 0xf0, 0x42, 0xfd, 0x15, 0x14, 0xcc, 0x63, 0x59, 0xa3, 0x17, 0xbc,
	0xa8, 0x59, 0xc0, 0xf1, 0x2e, 0xaa, 0x5a, 0x3e, 0x97, 0xbf, 0x96, 0xc8, 0xcf, 0xde, 0x51, 0xf5,
	0x2a, 0xa7, 0x92, 0x82, 0xe0, 0x5c, 0xe9, 0x13, 0xfe, 0x12, 0xd5, 0x26, 0xc2, 0x76, 0xc6, 0x0e,
	0xb7, 0x8d, 0x9e, 0x14, 0x6c, 0x2a, 0x81, 0xbc, 0x49, 0x86, 0x41, 0x8f, 0xaa, 0x47, 0x48, 0x61,
	0x73, 0x97, 0x43, 0x8a, 0x4f, 0xee, 0xa7, 0x50, 0x10, 0x35, 0x33, 0x12, 0xde, 0x47, 0xab, 0x30,
	0x03, 0x03, 0xa3, 0xdf, 0x2b, 0xf7, 0x1b, 0xaf, 0xb7, 0x97, 0x5c, 0x1a, 0xa6, 0xe8, 0x0f, 0xc2,
	0x87, 0x26, 0x1b, 0xb4, 0x94, 0x5b, 0x56, 0x11, 0xa9, 0x18, 0x1f, 0xa0, 0x9a, 0x1a, 0xc1, 0x81,
	0xf1, 0x79, 0xaf, 0x0c, 0x9d, 0xf5, 0x31, 0x26, 0xd5, 0x74, 0xfe, 0x06, 0xf0, 0x3b, 0xd2, 0x41,
	0x1b, 0x2c, 0x2d, 0xab, 0xaa, 0x02, 0xdf, 0x54, 0xfe, 0xf8, 0x95, 0xac, 0xd0, 0x3f, 0x57, 0x51,
	0xa3, 0x90, 0xb3, 0xb8, 0x22, 0xb4, 0x87, 0xad, 0x88, 0x7c, 0xbe, 0xdf, 0x5f, 0x11, 0xa5, 0x87,
	0xad, 0x88, 0x7c, 0xcb, 0xdc, 0x59, 0x11, 0xe5, 0x47, 0xad, 0x88, 0xca, 0xbf, 0xb7, 0x22, 0x56,
	0xff, 0x8b, 0x15, 0xb1, 0xf6, 0xc8, 0x15, 0xf1, 0x16, 0xd5, 0xa1, 0xbf, 0x46, 0xae, 0xb0, 0xae,
	0xe5, 0xc0, 0xae, 0xa5, 0x62, 0x8b, 0x79, 0x03, 0x88, 0x65, 0xe2, 0x39, 0x89, 0x9a, 0x73, 0x0c,
	0x7f, 0x9b, 0xce, 0xd4, 0x3d, 0xcb, 0xe2, 0x41, 0xc0, 0x6d, 0xa3, 0x26, 0x0b, 0xb8, 0xab, 0x3e,
	0x35, 0x9e, 0x0f, 0x3a, 0xa6, 0x08, 0xd4, 0x5c, 0xe0, 0xe3, 0xef, 0x10, 0xf2, 0xa3, 0xa1, 0xed,
	0x04, 0x53, 0x97, 0xdd, 0x1a, 0x75, 0x99, 0xbd, 0x37, 0x8b, 0x49, 0xdd, 0x8f, 0xf6, 0xd3, 0x60,
	0x12, 0x93, 0x0d, 0x59, 0x20, 0x73, 0x1a, 0x35, 0x73, 0xb4, 0xd8, 0x9f, 0x9b, 0x8f, 0xed, 0xcf,
	0xa7, 0x0f, 0xea, 0xcf, 0xb4, 0xc4, 0x77, 0x6c, 0x54, 0xcb, 0x76, 0x16, 0xae, 0xa1, 0xca, 0xf1,
	0xc9, 0xf1, 0x81, 0xbe, 0x82, 0x9b, 0xa8, 0x76, 0xe2, 0xf1, 0x13, 0xef, 0xc4, 0xe3, 0xba, 0x86,
	0x37, 0x50, 0xe3, 0xd4, 0x77, 0x3e, 0xb0, 0x90, 0x03, 0x55, 0x2f, 0xe1, 0x16, 0x42, 0xa7, 0xd1,
	0xc8, 0x75, 0x2c, 0xf9, 0x5e, 0x86, 0x77, 0x98, 0xac, 0x56, 0x8a, 0x57, 0x40, 0x90, 0x99, 0x1e,
	0x78, 0xb6, 0xbe, 0xba, 0xf3, 0x9b, 0x86, 0x50, 0x3e, 0xb1, 0x30, 0x46, 0xad, 0xfc, 0xed, 0x58,
	0x78, 0x5c, 0x5f, 0xc1, 0x5b, 0xc8, 0xc8, 0x63, 0x17, 0xec, 0x9a, 0x47, 0xd3, 0x0b, 0x3e, 0x3a,
	0x13, 0x17, 0x7c, 0xa4, 0x6b, 0x78, 0x1b, 0x75, 0x97, 0xa2, 0xef, 0x5c, 0x11, 0xd9, 0x7a, 0x09,
	0xf7, 0xd0, 0xd6, 0x5d, 0x5c, 0x42, 0x19, 0xa3, 0x8c, 0x3b, 0x48, 0xcf, 0x19, 0x7b, 0xee, 0x0d,
	0xbb, 0x0d, 0xf4, 0xca, 0x62, 0xf4, 0x88, 0x79, 0x11, 0x73, 0xf5, 0x55, 0xdc, 0x46, 0xeb, 0x79,
	0x14, 0x6e, 0xb0, 0x36, 0xd8, 0xfe, 0x79, 0xeb, 0xd2, 0x09, 0xaf, 0xa2, 0xd1, 0xae, 0x25, 0x26,
	0xaf, 0xb2, 0xd1, 0xf4, 0x2a, 0x1b, 0x4d, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x8e, 0xb8,
	0x4d, 0xd3, 0x0a, 0x00, 0x00,
}
