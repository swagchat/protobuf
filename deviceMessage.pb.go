// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: deviceMessage.proto

package protobuf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Device struct {
	Workspace            string `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty" db:"-"`
	UserID               string `protobuf:"bytes,11,opt,name=user_id,json=userId,proto3" json:"userId" db:"user_id"`
	Platform             int32  `protobuf:"varint,12,opt,name=platform,proto3" json:"platform,omitempty" db:"platform"`
	Token                string `protobuf:"bytes,13,opt,name=token,proto3" json:"token" db:"token"`
	NotificationDeviceID string `protobuf:"bytes,14,opt,name=notification_device_id,json=notificationDeviceId,proto3" json:"notificationDeviceId" db:"notification_device_id"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptorDeviceMessage, []int{0} }

func (m *Device) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *Device) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Device) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *Device) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Device) GetNotificationDeviceID() string {
	if m != nil {
		return m.NotificationDeviceID
	}
	return ""
}

func init() {
	proto.RegisterType((*Device)(nil), "swagchat.protobuf.Device")
}

func init() { proto.RegisterFile("deviceMessage.proto", fileDescriptorDeviceMessage) }

var fileDescriptorDeviceMessage = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xa9, 0xb0, 0xea, 0xe2, 0x26, 0x2c, 0x1b, 0x5a, 0x54, 0xcc, 0x0c, 0x1e, 0x76, 0x70,
	0xdb, 0xc1, 0x9b, 0x20, 0xc2, 0xd8, 0x65, 0x07, 0x15, 0x0a, 0x5e, 0xbc, 0x8c, 0xb4, 0xcd, 0xba,
	0x30, 0xdb, 0x94, 0x26, 0x75, 0xf8, 0x01, 0xfc, 0x9a, 0x39, 0xec, 0xd8, 0x83, 0x87, 0x7e, 0x02,
	0x49, 0xb2, 0x4e, 0xc1, 0xdd, 0xf2, 0x7e, 0xef, 0xff, 0x7f, 0xef, 0xe5, 0x3d, 0xd0, 0x8d, 0xe8,
	0x07, 0x0b, 0xe9, 0x13, 0x15, 0x82, 0xc4, 0x74, 0x94, 0xe5, 0x5c, 0x72, 0xd8, 0x11, 0x6b, 0x12,
	0x87, 0x4b, 0x22, 0x6d, 0x1c, 0x14, 0x8b, 0xf3, 0x5e, 0xcc, 0x63, 0x6e, 0xa2, 0xb1, 0x7e, 0xd9,
	0x04, 0xfe, 0x3e, 0x00, 0xee, 0xd4, 0x14, 0x80, 0x8f, 0xa0, 0xb9, 0xe6, 0xf9, 0x4a, 0x64, 0x24,
	0xa4, 0x9e, 0xd3, 0x77, 0x06, 0xcd, 0xc9, 0x75, 0xa9, 0x50, 0x77, 0x07, 0x6f, 0x79, 0xc2, 0x24,
	0x4d, 0x32, 0xf9, 0x59, 0x29, 0xe4, 0x46, 0xc1, 0x3d, 0x1e, 0x62, 0xff, 0xd7, 0x03, 0x1f, 0xc0,
	0x61, 0x21, 0x68, 0x3e, 0x67, 0x91, 0x77, 0x6c, 0xec, 0x37, 0x1b, 0x85, 0xdc, 0x57, 0x41, 0xf3,
	0xd9, 0xb4, 0x54, 0xc8, 0xd5, 0xc9, 0x59, 0x54, 0x29, 0xd4, 0xd2, 0xde, 0xad, 0x14, 0xfb, 0x5b,
	0x0e, 0x87, 0xe0, 0x28, 0x7b, 0x27, 0x72, 0xc1, 0xf3, 0xc4, 0x6b, 0xf5, 0x9d, 0x41, 0x63, 0xd2,
	0xa9, 0x14, 0x6a, 0x6b, 0x6d, 0xcd, 0xb1, 0xbf, 0x93, 0xc0, 0x21, 0x68, 0x48, 0xbe, 0xa2, 0xa9,
	0xd7, 0x36, 0xbd, 0xce, 0x4a, 0x85, 0x2c, 0xa8, 0x14, 0x02, 0xda, 0x64, 0x02, 0xec, 0x5b, 0x08,
	0xbf, 0x1c, 0x70, 0x9a, 0x72, 0xc9, 0x16, 0x2c, 0x24, 0x92, 0xf1, 0x74, 0x6e, 0xd7, 0xa6, 0x87,
	0x3d, 0x31, 0x05, 0x5e, 0x36, 0x0a, 0xf5, 0x9e, 0xff, 0x28, 0xec, 0x5a, 0xcc, 0xe8, 0xbd, 0xf4,
	0x3f, 0xd7, 0x1f, 0xb9, 0xd0, 0x7d, 0xf6, 0x57, 0xc5, 0xfe, 0x5e, 0xd3, 0xe4, 0xea, 0xed, 0x32,
	0x66, 0x72, 0x59, 0x04, 0xa3, 0x90, 0x27, 0xe3, 0xfa, 0x4c, 0xe3, 0xfa, 0x4c, 0x81, 0x6b, 0x5e,
	0x77, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x93, 0xb5, 0xa3, 0x43, 0xd7, 0x01, 0x00, 0x00,
}
