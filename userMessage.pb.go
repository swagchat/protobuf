// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: userMessage.proto

package protobuf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	ID               uint64         `protobuf:"varint,1,opt,name=id" json:"-" db:"id"`
	UserID           string         `protobuf:"bytes,12,opt,name=user_id,json=userId" json:"userId" db:"user_id"`
	Name             string         `protobuf:"bytes,13,opt,name=name" json:"name" db:"name"`
	PictureURL       string         `protobuf:"bytes,14,opt,name=picture_url,json=pictureUrl" json:"pictureUrl" db:"picture_url"`
	InformationURL   string         `protobuf:"bytes,15,opt,name=information_url,json=informationUrl" json:"informationUrl" db:"information_url"`
	UnreadCount      uint64         `protobuf:"varint,16,opt,name=unread_count,json=unreadCount" json:"unreadCount,omitempty" db:"unread_count"`
	MetaData         []byte         `protobuf:"bytes,17,opt,name=meta_data,json=metaData" json:"metaData" db:"-"`
	Public           bool           `protobuf:"varint,18,opt,name=public" json:"public" db:"public"`
	CanBlock         bool           `protobuf:"varint,19,opt,name=can_block,json=canBlock" json:"canBlock,omitempty" db:"can_block"`
	Lang             string         `protobuf:"bytes,20,opt,name=lang" json:"lang" db:"lang"`
	AccessToken      string         `protobuf:"bytes,21,opt,name=access_token,json=accessToken" json:"accessToken,omitempty" db:"-"`
	LastAccessRoomID string         `protobuf:"bytes,22,opt,name=last_access_room_id,json=lastAccessRoomId" json:"last_access_room_id" db:"last_access_room_id"`
	LastAccessed     int64          `protobuf:"varint,23,opt,name=last_accessed,json=lastAccessed" json:"last_accessed" db:"last_accessed"`
	Created          int64          `protobuf:"varint,31,opt,name=created" json:"created" db:"created"`
	Modified         int64          `protobuf:"varint,32,opt,name=modified" json:"modified" db:"modified"`
	Deleted          int64          `protobuf:"varint,33,opt,name=deleted" json:"deleted" db:"deleted"`
	Roles            []int32        `protobuf:"varint,40,rep,name=roles" json:"roles,omitempty" db:"-"`
	Rooms            []*RoomForUser `protobuf:"bytes,41,rep,name=rooms" json:"rooms,omitempty" db:"-"`
	Devices          []*Device      `protobuf:"bytes,42,rep,name=devices" json:"devices,omitempty" db:"-"`
	Blocks           []string       `protobuf:"bytes,43,rep,name=blocks" json:"blocks,omitempty" db:"-"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorUserMessage, []int{0} }

func (m *User) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetPictureURL() string {
	if m != nil {
		return m.PictureURL
	}
	return ""
}

func (m *User) GetInformationURL() string {
	if m != nil {
		return m.InformationURL
	}
	return ""
}

func (m *User) GetUnreadCount() uint64 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *User) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *User) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *User) GetCanBlock() bool {
	if m != nil {
		return m.CanBlock
	}
	return false
}

func (m *User) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *User) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *User) GetLastAccessRoomID() string {
	if m != nil {
		return m.LastAccessRoomID
	}
	return ""
}

func (m *User) GetLastAccessed() int64 {
	if m != nil {
		return m.LastAccessed
	}
	return 0
}

func (m *User) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *User) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

func (m *User) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *User) GetRoles() []int32 {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *User) GetRooms() []*RoomForUser {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func (m *User) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *User) GetBlocks() []string {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type RoomForUser struct {
	RoomID             string         `protobuf:"bytes,1,opt,name=room_id,json=roomId" json:"roomId" db:"room_id"`
	UserID             string         `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"userId" db:"user_id"`
	Name               string         `protobuf:"bytes,3,opt,name=name" json:"name" db:"name"`
	PictureURL         string         `protobuf:"bytes,4,opt,name=picture_url,json=pictureUrl" json:"pictureUrl" db:"picture_url"`
	InformationURL     string         `protobuf:"bytes,5,opt,name=information_url,json=informationUrl" json:"informationUrl" db:"information_url"`
	MetaData           []byte         `protobuf:"bytes,6,opt,name=meta_data,json=metaData" json:"metaData" db:"meta_data"`
	Type               RoomType       `protobuf:"varint,7,opt,name=type,enum=swagchat.protobuf.RoomType" json:"type" db:"type"`
	LastMessage        string         `protobuf:"bytes,8,opt,name=last_message,json=lastMessage" json:"lastMessage" db:"last_message"`
	LastMessageUpdated int64          `protobuf:"varint,9,opt,name=last_message_updated,json=lastMessageUpdated" json:"lastMessageUpdated" db:"last_message_updated"`
	CanLeft            bool           `protobuf:"varint,10,opt,name=can_left,json=canLeft" json:"canLeft" db:"can_left"`
	Created            int64          `protobuf:"varint,21,opt,name=created" json:"created" db:"created"`
	Modified           int64          `protobuf:"varint,22,opt,name=modified" json:"modified" db:"modified"`
	Users              []*UserForRoom `protobuf:"bytes,13,rep,name=users" json:"users,omitempty" db:"-"`
	RuUnreadCount      int64          `protobuf:"varint,14,opt,name=ru_unread_count,json=ruUnreadCount" json:"ruUnreadCount" db:"ru_unread_count"`
}

func (m *RoomForUser) Reset()                    { *m = RoomForUser{} }
func (m *RoomForUser) String() string            { return proto.CompactTextString(m) }
func (*RoomForUser) ProtoMessage()               {}
func (*RoomForUser) Descriptor() ([]byte, []int) { return fileDescriptorUserMessage, []int{1} }

func (m *RoomForUser) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *RoomForUser) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *RoomForUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoomForUser) GetPictureURL() string {
	if m != nil {
		return m.PictureURL
	}
	return ""
}

func (m *RoomForUser) GetInformationURL() string {
	if m != nil {
		return m.InformationURL
	}
	return ""
}

func (m *RoomForUser) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *RoomForUser) GetType() RoomType {
	if m != nil {
		return m.Type
	}
	return RoomType_NONE
}

func (m *RoomForUser) GetLastMessage() string {
	if m != nil {
		return m.LastMessage
	}
	return ""
}

func (m *RoomForUser) GetLastMessageUpdated() int64 {
	if m != nil {
		return m.LastMessageUpdated
	}
	return 0
}

func (m *RoomForUser) GetCanLeft() bool {
	if m != nil {
		return m.CanLeft
	}
	return false
}

func (m *RoomForUser) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *RoomForUser) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

func (m *RoomForUser) GetUsers() []*UserForRoom {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *RoomForUser) GetRuUnreadCount() int64 {
	if m != nil {
		return m.RuUnreadCount
	}
	return 0
}

type CreateUserRequest struct {
	UserID         string  `protobuf:"bytes,11,opt,name=user_id,json=userId" json:"userId"`
	Name           string  `protobuf:"bytes,12,opt,name=name" json:"name"`
	PictureURL     string  `protobuf:"bytes,13,opt,name=picture_url,json=pictureUrl" json:"pictureUrl"`
	InformationURL string  `protobuf:"bytes,14,opt,name=information_url,json=informationUrl" json:"informationUrl"`
	MetaData       []byte  `protobuf:"bytes,15,opt,name=meta_data,json=metaData" json:"metaData"`
	Public         bool    `protobuf:"varint,16,opt,name=public" json:"public"`
	CanBlock       bool    `protobuf:"varint,17,opt,name=can_block,json=canBlock" json:"canBlock,omitempty"`
	Lang           string  `protobuf:"bytes,18,opt,name=lang" json:"lang"`
	RoleIDs        []int32 `protobuf:"varint,19,rep,name=role_ids,json=roleIds" json:"roleIds,omitempty" db:"-"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorUserMessage, []int{2} }

func (m *CreateUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *CreateUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateUserRequest) GetPictureURL() string {
	if m != nil {
		return m.PictureURL
	}
	return ""
}

func (m *CreateUserRequest) GetInformationURL() string {
	if m != nil {
		return m.InformationURL
	}
	return ""
}

func (m *CreateUserRequest) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *CreateUserRequest) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *CreateUserRequest) GetCanBlock() bool {
	if m != nil {
		return m.CanBlock
	}
	return false
}

func (m *CreateUserRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *CreateUserRequest) GetRoleIDs() []int32 {
	if m != nil {
		return m.RoleIDs
	}
	return nil
}

type GetUsersRequest struct {
	Limit  int32  `protobuf:"varint,11,opt,name=limit" json:"limit"`
	Offset int32  `protobuf:"varint,12,opt,name=offset" json:"offset"`
	Order  string `protobuf:"bytes,13,opt,name=order" json:"order"`
}

func (m *GetUsersRequest) Reset()                    { *m = GetUsersRequest{} }
func (m *GetUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUsersRequest) ProtoMessage()               {}
func (*GetUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptorUserMessage, []int{3} }

func (m *GetUsersRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetUsersRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetUsersRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

type UsersResponse struct {
	Users    []*User `protobuf:"bytes,1,rep,name=users" json:"users"`
	AllCount int64   `protobuf:"varint,2,opt,name=allCount" json:"allCount"`
	Limit    int32   `protobuf:"varint,3,opt,name=limit" json:"limit"`
	Offset   int32   `protobuf:"varint,4,opt,name=offset" json:"offset"`
	Order    string  `protobuf:"bytes,5,opt,name=order" json:"order"`
}

func (m *UsersResponse) Reset()                    { *m = UsersResponse{} }
func (m *UsersResponse) String() string            { return proto.CompactTextString(m) }
func (*UsersResponse) ProtoMessage()               {}
func (*UsersResponse) Descriptor() ([]byte, []int) { return fileDescriptorUserMessage, []int{4} }

func (m *UsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UsersResponse) GetAllCount() int64 {
	if m != nil {
		return m.AllCount
	}
	return 0
}

func (m *UsersResponse) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *UsersResponse) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *UsersResponse) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

type GetUserRequest struct {
	Workspace string `protobuf:"bytes,1,opt,name=workspace" json:"-"`
	UserID    string `protobuf:"bytes,11,opt,name=user_id,json=userId" json:"userId"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorUserMessage, []int{5} }

func (m *GetUserRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *GetUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type UpdateUserRequest struct {
	UserID         string  `protobuf:"bytes,11,opt,name=user_id,json=userId" json:"userId"`
	Name           *string `protobuf:"bytes,13,opt,name=name" json:"name,omitempty" db:"name"`
	PictureURL     *string `protobuf:"bytes,14,opt,name=picture_url,json=pictureUrl" json:"pictureUrl" db:"picture_url"`
	InformationURL *string `protobuf:"bytes,15,opt,name=information_url,json=informationUrl" json:"informationUrl" db:"information_url"`
	MetaData       []byte  `protobuf:"bytes,17,opt,name=meta_data,json=metaData" json:"metaData" db:"meta_data"`
	Public         *bool   `protobuf:"varint,18,opt,name=public" json:"public,omitempty" db:"public"`
	CanBlock       *bool   `protobuf:"varint,19,opt,name=can_block,json=canBlock" json:"canBlock,omitempty" db:"can_block"`
	Lang           *string `protobuf:"bytes,20,opt,name=lang" json:"lang,omitempty" db:"lang"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorUserMessage, []int{6} }

func (m *UpdateUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UpdateUserRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *UpdateUserRequest) GetPictureURL() string {
	if m != nil && m.PictureURL != nil {
		return *m.PictureURL
	}
	return ""
}

func (m *UpdateUserRequest) GetInformationURL() string {
	if m != nil && m.InformationURL != nil {
		return *m.InformationURL
	}
	return ""
}

func (m *UpdateUserRequest) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *UpdateUserRequest) GetPublic() bool {
	if m != nil && m.Public != nil {
		return *m.Public
	}
	return false
}

func (m *UpdateUserRequest) GetCanBlock() bool {
	if m != nil && m.CanBlock != nil {
		return *m.CanBlock
	}
	return false
}

func (m *UpdateUserRequest) GetLang() string {
	if m != nil && m.Lang != nil {
		return *m.Lang
	}
	return ""
}

type DeleteUserRequest struct {
	Workspace string `protobuf:"bytes,1,opt,name=workspace" json:"-"`
	UserID    string `protobuf:"bytes,11,opt,name=user_id,json=userId" json:"userId"`
}

func (m *DeleteUserRequest) Reset()                    { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()               {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorUserMessage, []int{7} }

func (m *DeleteUserRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *DeleteUserRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type GetContactsRequest struct {
	UserID string `protobuf:"bytes,11,opt,name=user_id,json=userId" json:"userId" db:"user_id"`
	Limit  int32  `protobuf:"varint,12,opt,name=limit" json:"limit"`
	Offset int32  `protobuf:"varint,13,opt,name=offset" json:"offset"`
	Order  string `protobuf:"bytes,14,opt,name=order" json:"order"`
}

func (m *GetContactsRequest) Reset()                    { *m = GetContactsRequest{} }
func (m *GetContactsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetContactsRequest) ProtoMessage()               {}
func (*GetContactsRequest) Descriptor() ([]byte, []int) { return fileDescriptorUserMessage, []int{8} }

func (m *GetContactsRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *GetContactsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetContactsRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetContactsRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

type GetProfileRequest struct {
	UserID string `protobuf:"bytes,11,opt,name=user_id,json=userId" json:"userId"`
}

func (m *GetProfileRequest) Reset()                    { *m = GetProfileRequest{} }
func (m *GetProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProfileRequest) ProtoMessage()               {}
func (*GetProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorUserMessage, []int{9} }

func (m *GetProfileRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "swagchat.protobuf.User")
	proto.RegisterType((*RoomForUser)(nil), "swagchat.protobuf.RoomForUser")
	proto.RegisterType((*CreateUserRequest)(nil), "swagchat.protobuf.CreateUserRequest")
	proto.RegisterType((*GetUsersRequest)(nil), "swagchat.protobuf.GetUsersRequest")
	proto.RegisterType((*UsersResponse)(nil), "swagchat.protobuf.UsersResponse")
	proto.RegisterType((*GetUserRequest)(nil), "swagchat.protobuf.GetUserRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "swagchat.protobuf.UpdateUserRequest")
	proto.RegisterType((*DeleteUserRequest)(nil), "swagchat.protobuf.DeleteUserRequest")
	proto.RegisterType((*GetContactsRequest)(nil), "swagchat.protobuf.GetContactsRequest")
	proto.RegisterType((*GetProfileRequest)(nil), "swagchat.protobuf.GetProfileRequest")
}

func init() { proto.RegisterFile("userMessage.proto", fileDescriptorUserMessage) }

var fileDescriptorUserMessage = []byte{
	// 1373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x5d, 0x6f, 0xdb, 0x36,
	0x17, 0xae, 0x62, 0x3b, 0xb6, 0xe9, 0x8f, 0x44, 0x4c, 0xd2, 0xb2, 0x79, 0x8b, 0x4a, 0x15, 0xf0,
	0xa2, 0xee, 0x47, 0xd2, 0xb5, 0x1b, 0xd0, 0xa1, 0x1d, 0xd0, 0xc6, 0x4d, 0x5b, 0x78, 0xcb, 0x80,
	0x96, 0xa8, 0x6f, 0x76, 0x23, 0x28, 0x12, 0x9d, 0x0a, 0x95, 0x44, 0x4f, 0xa4, 0x56, 0xf4, 0xe7,
	0xec, 0x37, 0xec, 0x4f, 0xec, 0x72, 0xc0, 0xae, 0xa7, 0x01, 0xbd, 0xf4, 0xa5, 0xb1, 0x9b, 0xdd,
	0x0d, 0xa4, 0x28, 0x5b, 0xb2, 0xe3, 0x74, 0x69, 0xd1, 0xdd, 0xd9, 0x3c, 0xcf, 0x39, 0x24, 0xcf,
	0x39, 0xcf, 0x73, 0x28, 0xa0, 0x27, 0x8c, 0xc4, 0xdf, 0x13, 0xc6, 0x9c, 0x13, 0xb2, 0x3f, 0x8e,
	0x29, 0xa7, 0x50, 0x67, 0x6f, 0x9d, 0x13, 0xf7, 0xb5, 0xc3, 0xb3, 0xff, 0xc7, 0xc9, 0x68, 0x77,
	0xfb, 0x84, 0x9e, 0x50, 0xf9, 0xef, 0x8e, 0xf8, 0x95, 0x19, 0x76, 0xb7, 0x3c, 0xf2, 0x93, 0xef,
	0x92, 0x92, 0xf7, 0xae, 0x1e, 0x53, 0x1a, 0x96, 0x96, 0xac, 0x3f, 0x9a, 0xa0, 0x3a, 0x64, 0x24,
	0x86, 0x37, 0xc1, 0x9a, 0xef, 0x21, 0xcd, 0xd4, 0x7a, 0xd5, 0xfe, 0xee, 0xaf, 0xa9, 0x71, 0xe1,
	0x7d, 0x6a, 0xac, 0x0d, 0x0e, 0x27, 0xa9, 0xa1, 0xed, 0x4d, 0x53, 0xa3, 0xee, 0x1d, 0x3f, 0xb0,
	0x7c, 0xcf, 0xc2, 0x6b, 0xbe, 0x07, 0x0f, 0x40, 0x5d, 0x1c, 0xcd, 0xf6, 0x3d, 0xd4, 0x36, 0xb5,
	0x5e, 0xb3, 0xdf, 0x53, 0x0e, 0xeb, 0x22, 0x94, 0x74, 0x5a, 0x17, 0x80, 0x81, 0x37, 0x4d, 0x8d,
	0xb6, 0xf0, 0x54, 0x70, 0x0b, 0xab, 0x75, 0xf8, 0x7f, 0x50, 0x8d, 0x9c, 0x90, 0xa0, 0x8e, 0xf4,
	0xd7, 0x85, 0xff, 0x34, 0x35, 0x9a, 0x02, 0x2b, 0xd6, 0x2d, 0x2c, 0xcd, 0x70, 0x08, 0x5a, 0x63,
	0xdf, 0xe5, 0x49, 0x4c, 0xec, 0x24, 0x0e, 0x50, 0x57, 0xa2, 0xbf, 0x52, 0xbb, 0x81, 0x17, 0x99,
	0x69, 0x88, 0x8f, 0x26, 0xa9, 0x01, 0x14, 0x70, 0x18, 0x07, 0xd3, 0xd4, 0xd8, 0x14, 0x91, 0x0a,
	0xae, 0x16, 0x2e, 0xd8, 0xa1, 0x0f, 0x36, 0xfc, 0x68, 0x44, 0xe3, 0xd0, 0xe1, 0x3e, 0x8d, 0x64,
	0xe8, 0x0d, 0x19, 0xfa, 0xb1, 0x0a, 0xdd, 0x1d, 0xcc, 0xcd, 0x59, 0xf8, 0x6e, 0xc1, 0x21, 0xdb,
	0x62, 0x5b, 0xa6, 0xa4, 0x1c, 0xc6, 0xc2, 0x0b, 0x38, 0x38, 0x04, 0xed, 0x24, 0x8a, 0x89, 0xe3,
	0xd9, 0x2e, 0x4d, 0x22, 0x8e, 0x36, 0x65, 0x86, 0xef, 0x89, 0x7d, 0x26, 0xa9, 0xb1, 0x93, 0xd9,
	0x9e, 0x08, 0xd3, 0x6d, 0x1a, 0xfa, 0x9c, 0x84, 0x63, 0xfe, 0x6e, 0x9a, 0x1a, 0xba, 0xcc, 0x5a,
	0xc1, 0xd1, 0xc2, 0xad, 0x02, 0x16, 0x7e, 0x09, 0x9a, 0x21, 0xe1, 0x8e, 0xed, 0x39, 0xdc, 0x41,
	0xba, 0xa9, 0xf5, 0xda, 0xfd, 0x8b, 0x93, 0xd4, 0x68, 0x88, 0xc5, 0x43, 0x87, 0x3b, 0xd3, 0xd4,
	0x58, 0x17, 0x21, 0xf6, 0x2c, 0x3c, 0x5b, 0x83, 0xb7, 0xc0, 0xfa, 0x38, 0x39, 0x0e, 0x7c, 0x17,
	0x41, 0x53, 0xeb, 0x35, 0xfa, 0x5b, 0x2a, 0xed, 0x2d, 0x99, 0x2c, 0x69, 0xb1, 0xb0, 0x82, 0xc0,
	0x01, 0x68, 0xba, 0x4e, 0x64, 0x1f, 0x07, 0xd4, 0x7d, 0x83, 0xb6, 0x24, 0xfe, 0xb6, 0x3a, 0x35,
	0x74, 0x9d, 0xa8, 0x2f, 0xd6, 0x4b, 0x47, 0xee, 0x8a, 0x28, 0x33, 0x17, 0x0b, 0x37, 0x72, 0x94,
	0x28, 0x76, 0xe0, 0x44, 0x27, 0x68, 0x7b, 0xb9, 0xd8, 0x62, 0xdd, 0xc2, 0xd2, 0x0c, 0xbf, 0x05,
	0x6d, 0xc7, 0x75, 0x09, 0x63, 0x36, 0xa7, 0x6f, 0x48, 0x84, 0x76, 0x24, 0xfc, 0x7a, 0x9e, 0xaa,
	0xcc, 0xf6, 0x4a, 0x98, 0x4a, 0xfb, 0xe6, 0xf7, 0x6c, 0x15, 0x00, 0xd0, 0x05, 0x5b, 0x81, 0xc3,
	0xb8, 0xad, 0x02, 0x8a, 0xc6, 0x17, 0xed, 0x7a, 0xb1, 0xd4, 0x40, 0x9b, 0x47, 0x0e, 0xe3, 0x07,
	0x12, 0x81, 0x29, 0x0d, 0x07, 0x87, 0xd3, 0xd4, 0x40, 0xd9, 0xa9, 0x96, 0x5c, 0x2d, 0xbc, 0x19,
	0x94, 0xd1, 0x1e, 0x7c, 0x04, 0x3a, 0x05, 0x24, 0xf1, 0xd0, 0x25, 0x53, 0xeb, 0x55, 0x32, 0xfa,
	0x4c, 0x53, 0x03, 0x2e, 0x84, 0x22, 0x9e, 0x85, 0xdb, 0xf3, 0x20, 0xc4, 0x83, 0xfb, 0xa0, 0xee,
	0xc6, 0xc4, 0xe1, 0xc4, 0x43, 0x86, 0x74, 0xdd, 0x56, 0xae, 0x92, 0x34, 0xca, 0x64, 0xe1, 0x1c,
	0x04, 0xef, 0x82, 0x46, 0x48, 0x3d, 0x7f, 0xe4, 0x13, 0x0f, 0x99, 0xd2, 0x61, 0x47, 0x39, 0x74,
	0x84, 0x43, 0x6e, 0x13, 0x35, 0x57, 0x3f, 0xc5, 0x16, 0x1e, 0x09, 0x88, 0xd8, 0xe2, 0xda, 0xf2,
	0x16, 0xca, 0x64, 0xe1, 0x1c, 0x04, 0x4d, 0x50, 0x8b, 0x69, 0x40, 0x18, 0xea, 0x99, 0x95, 0x5e,
	0xad, 0x0f, 0x0a, 0x09, 0xce, 0x0c, 0xf0, 0xb1, 0x40, 0xd0, 0x90, 0xa1, 0x1b, 0x66, 0xa5, 0xd7,
	0xba, 0x77, 0x75, 0x7f, 0x49, 0x93, 0xf6, 0x45, 0x7e, 0x9e, 0xd1, 0x58, 0xa8, 0xc1, 0x62, 0x04,
	0x1a, 0x32, 0xf8, 0x48, 0x9c, 0x49, 0xc8, 0x13, 0x43, 0x37, 0x65, 0x8c, 0xcb, 0xa7, 0xc4, 0x38,
	0x94, 0x88, 0x92, 0x7b, 0xee, 0x05, 0x2d, 0xb0, 0x2e, 0x9b, 0x8c, 0xa1, 0x5b, 0x66, 0xa5, 0xd7,
	0x2c, 0x81, 0x94, 0xe5, 0x41, 0xf5, 0xb7, 0x9f, 0x8d, 0x0b, 0xd6, 0x5f, 0x75, 0xd0, 0x2a, 0x9c,
	0x46, 0x48, 0x57, 0xde, 0x0b, 0x5a, 0x59, 0xba, 0xb2, 0x0e, 0x10, 0xd2, 0x15, 0xcb, 0xea, 0xe6,
	0x29, 0x9a, 0xd5, 0x5f, 0xad, 0x17, 0xd5, 0x6f, 0xed, 0x13, 0xd5, 0xaf, 0x72, 0x2e, 0xf5, 0xab,
	0x7e, 0x3e, 0xf5, 0xab, 0x7d, 0x26, 0xf5, 0x7b, 0x58, 0x94, 0xa9, 0x75, 0x29, 0x53, 0x57, 0x17,
	0x64, 0x4a, 0xca, 0xc6, 0x0c, 0x54, 0x94, 0xab, 0x3e, 0xa8, 0xf2, 0x77, 0x63, 0x82, 0xea, 0xa6,
	0xd6, 0xeb, 0xde, 0xfb, 0xdf, 0x8a, 0x3e, 0x7b, 0xf5, 0x6e, 0x4c, 0xca, 0x29, 0x14, 0x4e, 0x16,
	0x96, 0xbe, 0xf0, 0x3b, 0x20, 0x19, 0x67, 0x87, 0xd9, 0xd4, 0x43, 0x8d, 0x79, 0xc5, 0x26, 0xa9,
	0xd1, 0x12, 0x36, 0x35, 0x10, 0x73, 0xd1, 0x2d, 0xc2, 0x2d, 0x5c, 0x44, 0x40, 0x1f, 0x6c, 0x17,
	0xad, 0x76, 0x32, 0xf6, 0x24, 0x77, 0x9b, 0x92, 0x58, 0xf7, 0x73, 0x75, 0x2c, 0xb8, 0x0c, 0x33,
	0xc4, 0x34, 0x35, 0x2e, 0x2f, 0xc6, 0xce, 0xbd, 0x2d, 0x7c, 0x8a, 0x03, 0x7c, 0x08, 0x84, 0x7c,
	0xda, 0x01, 0x19, 0x71, 0x04, 0xa4, 0xf8, 0x9a, 0x2a, 0x7c, 0xdd, 0x75, 0xa2, 0x23, 0x32, 0xe2,
	0x39, 0xe9, 0x73, 0x98, 0x90, 0x89, 0xcc, 0x52, 0x94, 0x95, 0x9d, 0xf3, 0xca, 0xca, 0xc5, 0x7f,
	0x27, 0x2b, 0x8f, 0x41, 0x4d, 0xf4, 0x32, 0x43, 0x9d, 0x95, 0x22, 0x20, 0xd8, 0xf0, 0x8c, 0xc6,
	0xa2, 0x46, 0x65, 0x11, 0x90, 0x8e, 0x70, 0x08, 0x36, 0xe2, 0xc4, 0x2e, 0xcd, 0xc6, 0xae, 0xdc,
	0x7b, 0x4f, 0x5d, 0xb4, 0x13, 0x27, 0xc3, 0xf9, 0xc4, 0xcb, 0x5b, 0x6e, 0xc1, 0xc7, 0xc2, 0x65,
	0x98, 0xa2, 0xfd, 0x9f, 0x15, 0xa0, 0x3f, 0x91, 0xb7, 0x13, 0xa7, 0xc0, 0xe4, 0xc7, 0x84, 0x30,
	0x0e, 0xef, 0xce, 0x99, 0xdb, 0x92, 0x7d, 0x80, 0x56, 0x31, 0x77, 0xc6, 0x54, 0xa4, 0x98, 0x9a,
	0xbd, 0x73, 0xaa, 0x02, 0xaf, 0xc8, 0x79, 0x50, 0x26, 0x67, 0xf6, 0x90, 0x31, 0x3f, 0x44, 0xce,
	0x12, 0x11, 0x5f, 0x2e, 0x13, 0xb1, 0x5b, 0x52, 0x94, 0x0f, 0x12, 0x71, 0x89, 0x70, 0x37, 0x8a,
	0x84, 0xdb, 0x90, 0x84, 0x6b, 0x17, 0x09, 0x57, 0xa0, 0xd7, 0x95, 0xd9, 0x6b, 0x60, 0x53, 0x36,
	0x58, 0x76, 0xb9, 0x7c, 0xfc, 0xdf, 0x2f, 0x8e, 0x7f, 0x5d, 0x02, 0x76, 0x57, 0x8f, 0xff, 0xc2,
	0xb0, 0x47, 0x6a, 0xd8, 0xc3, 0x62, 0xc6, 0xe4, 0x7c, 0x7f, 0x0a, 0x1a, 0x62, 0x82, 0xd8, 0xbe,
	0xc7, 0xd0, 0x96, 0x9c, 0x2e, 0x37, 0xdf, 0xa7, 0x46, 0x1d, 0xd3, 0x80, 0x0c, 0x0e, 0xd9, 0x24,
	0x35, 0x74, 0x61, 0x1e, 0x78, 0xec, 0xd4, 0xf1, 0x5e, 0x57, 0x46, 0x55, 0xe1, 0x10, 0x6c, 0x3c,
	0x27, 0x5c, 0xd4, 0x8d, 0xe5, 0xe5, 0xdd, 0x05, 0xb5, 0xc0, 0x0f, 0x7d, 0x2e, 0x8b, 0x5b, 0x53,
	0x5b, 0x67, 0x4b, 0xe2, 0xb2, 0x74, 0x34, 0x62, 0x84, 0xcb, 0x4a, 0xe6, 0x46, 0xb5, 0x26, 0x3c,
	0x69, 0xec, 0x91, 0x58, 0x55, 0x51, 0x79, 0xca, 0x25, 0xb5, 0xdd, 0xef, 0x1a, 0xe8, 0xa8, 0xcd,
	0xd8, 0x98, 0x46, 0x8c, 0xc0, 0xaf, 0x73, 0x06, 0x68, 0x92, 0x01, 0x97, 0x56, 0x30, 0xa0, 0xdf,
	0x9c, 0xa4, 0x46, 0x86, 0xcc, 0x3b, 0xff, 0x36, 0x68, 0x38, 0x41, 0x20, 0xdb, 0x55, 0x4e, 0x90,
	0x4a, 0x7f, 0x53, 0x65, 0x76, 0xb6, 0x8e, 0x67, 0xbf, 0xe6, 0xb7, 0xaa, 0x9c, 0x75, 0xab, 0xea,
	0x59, 0xb7, 0xaa, 0xad, 0xba, 0x55, 0x0c, 0xba, 0x2a, 0x89, 0x79, 0x0e, 0xaf, 0x83, 0xe6, 0x5b,
	0x1a, 0xbf, 0x61, 0x63, 0xc7, 0x25, 0x6a, 0x42, 0x36, 0xd5, 0xe1, 0xb4, 0x3d, 0x3c, 0xb7, 0x7d,
	0x04, 0x97, 0xd4, 0x9e, 0x7f, 0x57, 0x80, 0x9e, 0xa9, 0xdc, 0x27, 0x52, 0xf3, 0x5a, 0xe9, 0x13,
	0xa2, 0x73, 0xda, 0x00, 0x7d, 0x79, 0xda, 0xe7, 0xc3, 0x17, 0x9f, 0x34, 0x3c, 0xc9, 0xaa, 0x4f,
	0x87, 0x6f, 0x3e, 0xdf, 0xe0, 0xd4, 0xcf, 0x39, 0x38, 0xaf, 0x2f, 0xbc, 0xf3, 0x37, 0x56, 0xbd,
	0xf1, 0x9f, 0x2e, 0xbf, 0xf1, 0x7b, 0x1f, 0xf1, 0xbe, 0xbf, 0x56, 0x7a, 0xdf, 0x77, 0x4e, 0x79,
	0xdb, 0xab, 0xda, 0x27, 0x40, 0x3f, 0x94, 0xef, 0xcc, 0xff, 0xb6, 0xe5, 0x7e, 0xd1, 0x00, 0x7c,
	0x4e, 0xf8, 0x13, 0x1a, 0x71, 0xc7, 0xe5, 0x33, 0xbd, 0x38, 0x58, 0x8c, 0x77, 0xfe, 0x87, 0xdc,
	0x8c, 0x9c, 0xed, 0xb3, 0xc8, 0xd9, 0x39, 0x8b, 0x9c, 0xdd, 0x55, 0xe4, 0x3c, 0x02, 0xfa, 0x73,
	0xc2, 0x5f, 0xc4, 0x74, 0xe4, 0x07, 0xe4, 0xe3, 0x79, 0x92, 0x45, 0xeb, 0x5f, 0xfd, 0xe1, 0xca,
	0x89, 0xcf, 0x5f, 0x27, 0xc7, 0xfb, 0x2e, 0x0d, 0xef, 0xe4, 0x5a, 0x75, 0x27, 0xd7, 0xaa, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x86, 0x58, 0x16, 0x6d, 0x10, 0x00, 0x00,
}
