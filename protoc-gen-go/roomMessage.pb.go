// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: roomMessage.proto

package protoc_gen_go

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RoomType int32

const (
	RoomType_OneOnOneRoom RoomType = 0
	RoomType_PrivateRoom  RoomType = 1
	RoomType_PublicRoom   RoomType = 2
	RoomType_NoticeRoom   RoomType = 3
)

var RoomType_name = map[int32]string{
	0: "OneOnOneRoom",
	1: "PrivateRoom",
	2: "PublicRoom",
	3: "NoticeRoom",
}
var RoomType_value = map[string]int32{
	"OneOnOneRoom": 0,
	"PrivateRoom":  1,
	"PublicRoom":   2,
	"NoticeRoom":   3,
}

func (x RoomType) Enum() *RoomType {
	p := new(RoomType)
	*p = x
	return p
}
func (x RoomType) String() string {
	return proto.EnumName(RoomType_name, int32(x))
}
func (x *RoomType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RoomType_value, data, "RoomType")
	if err != nil {
		return err
	}
	*x = RoomType(value)
	return nil
}
func (RoomType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{0} }

type SpeechMode int32

const (
	SpeechMode_SpeechModeNone     SpeechMode = 0
	SpeechMode_WakeupWebToWeb     SpeechMode = 1
	SpeechMode_WakeupWebToCloud   SpeechMode = 2
	SpeechMode_WakeupCloudToCloud SpeechMode = 3
	SpeechMode_Always             SpeechMode = 4
	SpeechMode_Manual             SpeechMode = 5
)

var SpeechMode_name = map[int32]string{
	0: "SpeechModeNone",
	1: "WakeupWebToWeb",
	2: "WakeupWebToCloud",
	3: "WakeupCloudToCloud",
	4: "Always",
	5: "Manual",
}
var SpeechMode_value = map[string]int32{
	"SpeechModeNone":     0,
	"WakeupWebToWeb":     1,
	"WakeupWebToCloud":   2,
	"WakeupCloudToCloud": 3,
	"Always":             4,
	"Manual":             5,
}

func (x SpeechMode) Enum() *SpeechMode {
	p := new(SpeechMode)
	*p = x
	return p
}
func (x SpeechMode) String() string {
	return proto.EnumName(SpeechMode_name, int32(x))
}
func (x *SpeechMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SpeechMode_value, data, "SpeechMode")
	if err != nil {
		return err
	}
	*x = SpeechMode(value)
	return nil
}
func (SpeechMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{1} }

type Room struct {
	ID                          uint64      `protobuf:"varint,11,opt,name=id" json:"id" db:"id,primarykey,autoincrement"`
	RoomID                      string      `protobuf:"bytes,12,opt,name=room_id,json=roomId" json:"room_id" db:"room_id,notnull"`
	UserID                      string      `protobuf:"bytes,13,opt,name=user_id,json=userId" json:"user_id" db:"user_id,notnull"`
	Name                        string      `protobuf:"bytes,14,opt,name=name" json:"name" db:"name"`
	PictureURL                  string      `protobuf:"bytes,15,opt,name=picture_url,json=pictureUrl" json:"picture_url" db:"picture_url"`
	InformationURL              string      `protobuf:"bytes,16,opt,name=information_url,json=informationUrl" json:"information_url" db:"information_url"`
	Type                        RoomType    `protobuf:"varint,17,opt,name=type,enum=swagchat.protobuf.RoomType" json:"type" db:"type,notnull"`
	CanLeft                     bool        `protobuf:"varint,18,opt,name=can_Left,json=canLeft" json:"can_Left" db:"can_left,notnull"`
	SpeechMode                  SpeechMode  `protobuf:"varint,19,opt,name=speech_mode,json=speechMode,enum=swagchat.protobuf.SpeechMode" json:"speech_mode" db:"speech_mode,notnull"`
	MetaData                    []byte      `protobuf:"bytes,20,opt,name=meta_data,json=metaData" json:"meta_data,omitempty" db:"meta_data"`
	AvailableMessageTypes       string      `protobuf:"bytes,21,opt,name=available_message_types,json=availableMessageTypes" json:"available_message_types" db:"available_message_types"`
	LastMessage                 string      `protobuf:"bytes,22,opt,name=last_message,json=lastMessage" json:"last_message" db:"last_message"`
	LastMessageUpdatedTimestamp int64       `protobuf:"varint,23,opt,name=last_message_updated_timestamp,json=lastMessageUpdatedTimestamp" json:"last_message_updated_timestamp" db:"last_message_updated,notnull"`
	LastMessageUpdated          string      `protobuf:"bytes,24,opt,name=last_message_updated,json=lastMessageUpdated" json:"last_message_updated" db:"-"`
	MessageCount                int64       `protobuf:"varint,25,opt,name=message_count,json=messageCount" json:"message_count" db:"-"`
	NotificationTopicID         string      `protobuf:"bytes,26,opt,name=notification_topic_id,json=notificationTopicId" json:"notification_topic_id" db:"notification_topic_id"`
	CreatedTimestamp            int64       `protobuf:"varint,31,opt,name=created_timestamp,json=createdTimestamp" json:"created_timestamp" db:"created,notnull"`
	Created                     string      `protobuf:"bytes,32,opt,name=created" json:"created" db:"-"`
	ModifiedTimestamp           int64       `protobuf:"varint,33,opt,name=modified_timestamp,json=modifiedTimestamp" json:"modified_timestamp" db:"modified,notnull"`
	Modified                    string      `protobuf:"bytes,34,opt,name=modified" json:"modified" db:"-"`
	DeletedTimestamp            int64       `protobuf:"varint,35,opt,name=deleted_timestamp,json=deletedTimestamp" json:"deleted_timestamp" db:"deleted,notnull"`
	Users                       []*MiniUser `protobuf:"bytes,40,rep,name=users" json:"users,omitempty" db:"-"`
}

func (m *Room) Reset()                    { *m = Room{} }
func (m *Room) String() string            { return proto.CompactTextString(m) }
func (*Room) ProtoMessage()               {}
func (*Room) Descriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{0} }

func (m *Room) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Room) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *Room) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Room) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Room) GetPictureURL() string {
	if m != nil {
		return m.PictureURL
	}
	return ""
}

func (m *Room) GetInformationURL() string {
	if m != nil {
		return m.InformationURL
	}
	return ""
}

func (m *Room) GetType() RoomType {
	if m != nil {
		return m.Type
	}
	return RoomType_OneOnOneRoom
}

func (m *Room) GetCanLeft() bool {
	if m != nil {
		return m.CanLeft
	}
	return false
}

func (m *Room) GetSpeechMode() SpeechMode {
	if m != nil {
		return m.SpeechMode
	}
	return SpeechMode_SpeechModeNone
}

func (m *Room) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *Room) GetAvailableMessageTypes() string {
	if m != nil {
		return m.AvailableMessageTypes
	}
	return ""
}

func (m *Room) GetLastMessage() string {
	if m != nil {
		return m.LastMessage
	}
	return ""
}

func (m *Room) GetLastMessageUpdatedTimestamp() int64 {
	if m != nil {
		return m.LastMessageUpdatedTimestamp
	}
	return 0
}

func (m *Room) GetLastMessageUpdated() string {
	if m != nil {
		return m.LastMessageUpdated
	}
	return ""
}

func (m *Room) GetMessageCount() int64 {
	if m != nil {
		return m.MessageCount
	}
	return 0
}

func (m *Room) GetNotificationTopicID() string {
	if m != nil {
		return m.NotificationTopicID
	}
	return ""
}

func (m *Room) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

func (m *Room) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Room) GetModifiedTimestamp() int64 {
	if m != nil {
		return m.ModifiedTimestamp
	}
	return 0
}

func (m *Room) GetModified() string {
	if m != nil {
		return m.Modified
	}
	return ""
}

func (m *Room) GetDeletedTimestamp() int64 {
	if m != nil {
		return m.DeletedTimestamp
	}
	return 0
}

func (m *Room) GetUsers() []*MiniUser {
	if m != nil {
		return m.Users
	}
	return nil
}

type MiniUser struct {
	RoomID                string `protobuf:"bytes,1,opt,name=room_id,json=roomId" json:"room_id" db:"room_id"`
	UserID                string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id" db:"user_id"`
	Name                  string `protobuf:"bytes,3,opt,name=name" json:"name" db:"name"`
	PictureURL            string `protobuf:"bytes,4,opt,name=picture_url,json=pictureUrl" json:"picture_url" db:"picture_url"`
	InformationURL        string `protobuf:"bytes,5,opt,name=information_url,json=informationUrl" json:"information_url" db:"information_url"`
	MetaData              []byte `protobuf:"bytes,6,opt,name=meta_data,json=metaData" json:"meta_data,omitempty" db:"meta_data"`
	CanBlock              *bool  `protobuf:"varint,7,opt,name=can_block,json=canBlock" json:"can_block,omitempty" db:"can_block"`
	LastAccessedTimestamp int64  `protobuf:"varint,8,opt,name=last_accessed_timestamp,json=lastAccessedTimestamp" json:"last_accessed_timestamp" db:"last_accessed"`
	LastAccessed          string `protobuf:"bytes,9,opt,name=last_accessed,json=lastAccessed" json:"last_accessed" db:"-"`
	RuDisplay             *bool  `protobuf:"varint,10,opt,name=ru_display,json=ruDisplay" json:"ru_display,omitempty" db:"ru_display"`
	CreatedTimestamp      int64  `protobuf:"varint,21,opt,name=created_timestamp,json=createdTimestamp" json:"created_timestamp" db:"created"`
	Created               string `protobuf:"bytes,22,opt,name=created" json:"created" db:"-"`
	ModifiedTimestamp     int64  `protobuf:"varint,23,opt,name=modified_timestamp,json=modifiedTimestamp" json:"modified_timestamp" db:"modified"`
	Modified              string `protobuf:"bytes,24,opt,name=modified" json:"modified" db:"-"`
}

func (m *MiniUser) Reset()                    { *m = MiniUser{} }
func (m *MiniUser) String() string            { return proto.CompactTextString(m) }
func (*MiniUser) ProtoMessage()               {}
func (*MiniUser) Descriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{1} }

func (m *MiniUser) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *MiniUser) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *MiniUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MiniUser) GetPictureURL() string {
	if m != nil {
		return m.PictureURL
	}
	return ""
}

func (m *MiniUser) GetInformationURL() string {
	if m != nil {
		return m.InformationURL
	}
	return ""
}

func (m *MiniUser) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *MiniUser) GetCanBlock() bool {
	if m != nil && m.CanBlock != nil {
		return *m.CanBlock
	}
	return false
}

func (m *MiniUser) GetLastAccessedTimestamp() int64 {
	if m != nil {
		return m.LastAccessedTimestamp
	}
	return 0
}

func (m *MiniUser) GetLastAccessed() string {
	if m != nil {
		return m.LastAccessed
	}
	return ""
}

func (m *MiniUser) GetRuDisplay() bool {
	if m != nil && m.RuDisplay != nil {
		return *m.RuDisplay
	}
	return false
}

func (m *MiniUser) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

func (m *MiniUser) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *MiniUser) GetModifiedTimestamp() int64 {
	if m != nil {
		return m.ModifiedTimestamp
	}
	return 0
}

func (m *MiniUser) GetModified() string {
	if m != nil {
		return m.Modified
	}
	return ""
}

type CreateRoomRequest struct {
	RoomID                *string     `protobuf:"bytes,12,opt,name=room_id,json=roomId" json:"roomId"`
	UserID                *string     `protobuf:"bytes,13,opt,name=user_id,json=userId" json:"userId"`
	Name                  *string     `protobuf:"bytes,14,opt,name=name" json:"name,omitempty"`
	PictureURL            *string     `protobuf:"bytes,15,opt,name=picture_url,json=pictureUrl" json:"pictureUrl"`
	InformationURL        *string     `protobuf:"bytes,16,opt,name=information_url,json=informationUrl" json:"informationUrl"`
	Type                  *RoomType   `protobuf:"varint,7,opt,name=type,enum=swagchat.protobuf.RoomType" json:"type,omitempty"`
	CanLeft               *bool       `protobuf:"varint,25,opt,name=can_Left,json=canLeft" json:"canLeft"`
	SpeechMode            *SpeechMode `protobuf:"varint,26,opt,name=speech_mode,json=speechMode,enum=swagchat.protobuf.SpeechMode" json:"speechMode"`
	MetaData              []byte      `protobuf:"bytes,17,opt,name=meta_data,json=metaData" json:"metaData"`
	AvailableMessageTypes *string     `protobuf:"bytes,18,opt,name=available_message_types,json=availableMessageTypes" json:"availableMessageTypes"`
	UserIDs               []string    `protobuf:"bytes,41,rep,name=user_ids,json=userIds" json:"userIds,omitempty"`
}

func (m *CreateRoomRequest) Reset()                    { *m = CreateRoomRequest{} }
func (m *CreateRoomRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRoomRequest) ProtoMessage()               {}
func (*CreateRoomRequest) Descriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{2} }

func (m *CreateRoomRequest) GetRoomID() string {
	if m != nil && m.RoomID != nil {
		return *m.RoomID
	}
	return ""
}

func (m *CreateRoomRequest) GetUserID() string {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return ""
}

func (m *CreateRoomRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CreateRoomRequest) GetPictureURL() string {
	if m != nil && m.PictureURL != nil {
		return *m.PictureURL
	}
	return ""
}

func (m *CreateRoomRequest) GetInformationURL() string {
	if m != nil && m.InformationURL != nil {
		return *m.InformationURL
	}
	return ""
}

func (m *CreateRoomRequest) GetType() RoomType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RoomType_OneOnOneRoom
}

func (m *CreateRoomRequest) GetCanLeft() bool {
	if m != nil && m.CanLeft != nil {
		return *m.CanLeft
	}
	return false
}

func (m *CreateRoomRequest) GetSpeechMode() SpeechMode {
	if m != nil && m.SpeechMode != nil {
		return *m.SpeechMode
	}
	return SpeechMode_SpeechModeNone
}

func (m *CreateRoomRequest) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *CreateRoomRequest) GetAvailableMessageTypes() string {
	if m != nil && m.AvailableMessageTypes != nil {
		return *m.AvailableMessageTypes
	}
	return ""
}

func (m *CreateRoomRequest) GetUserIDs() []string {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

type RetrieveRoomsRequest struct {
	Limit  int32        `protobuf:"varint,11,opt,name=limit" json:"limit"`
	Offset int32        `protobuf:"varint,12,opt,name=offset" json:"offset"`
	Orders []*OrderInfo `protobuf:"bytes,13,rep,name=orders" json:"orders,omitempty"`
	UserID string       `protobuf:"bytes,14,opt,name=user_id,json=userId" json:"user_id"`
}

func (m *RetrieveRoomsRequest) Reset()                    { *m = RetrieveRoomsRequest{} }
func (m *RetrieveRoomsRequest) String() string            { return proto.CompactTextString(m) }
func (*RetrieveRoomsRequest) ProtoMessage()               {}
func (*RetrieveRoomsRequest) Descriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{3} }

func (m *RetrieveRoomsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RetrieveRoomsRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *RetrieveRoomsRequest) GetOrders() []*OrderInfo {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *RetrieveRoomsRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

type RoomsResponse struct {
	Rooms    []*Room      `protobuf:"bytes,1,rep,name=rooms" json:"rooms"`
	AllCount int64        `protobuf:"varint,2,opt,name=allCount" json:"allCount"`
	Limit    int32        `protobuf:"varint,3,opt,name=limit" json:"limit"`
	Offset   int32        `protobuf:"varint,4,opt,name=offset" json:"offset"`
	Orders   []*OrderInfo `protobuf:"bytes,5,rep,name=orders" json:"orders,omitempty"`
}

func (m *RoomsResponse) Reset()                    { *m = RoomsResponse{} }
func (m *RoomsResponse) String() string            { return proto.CompactTextString(m) }
func (*RoomsResponse) ProtoMessage()               {}
func (*RoomsResponse) Descriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{4} }

func (m *RoomsResponse) GetRooms() []*Room {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func (m *RoomsResponse) GetAllCount() int64 {
	if m != nil {
		return m.AllCount
	}
	return 0
}

func (m *RoomsResponse) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RoomsResponse) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *RoomsResponse) GetOrders() []*OrderInfo {
	if m != nil {
		return m.Orders
	}
	return nil
}

type RetrieveRoomRequest struct {
	RoomID string `protobuf:"bytes,11,opt,name=room_id,json=roomId" json:"roomId"`
}

func (m *RetrieveRoomRequest) Reset()                    { *m = RetrieveRoomRequest{} }
func (m *RetrieveRoomRequest) String() string            { return proto.CompactTextString(m) }
func (*RetrieveRoomRequest) ProtoMessage()               {}
func (*RetrieveRoomRequest) Descriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{5} }

func (m *RetrieveRoomRequest) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

type UpdateRoomRequest struct {
	RoomID                string      `protobuf:"bytes,11,opt,name=room_id,json=roomId" json:"roomId"`
	Name                  *string     `protobuf:"bytes,13,opt,name=name" json:"name,omitempty" db:"name"`
	PictureURL            *string     `protobuf:"bytes,14,opt,name=picture_url,json=pictureUrl" json:"pictureUrl"`
	InformationURL        *string     `protobuf:"bytes,15,opt,name=information_url,json=informationUrl" json:"informationUrl"`
	Type                  *RoomType   `protobuf:"varint,17,opt,name=type,enum=swagchat.protobuf.RoomType" json:"type,omitempty" db:"type"`
	CanLeft               *bool       `protobuf:"varint,18,opt,name=can_Left,json=canLeft" json:"canLeft"`
	SpeechMode            *SpeechMode `protobuf:"varint,19,opt,name=speech_mode,json=speechMode,enum=swagchat.protobuf.SpeechMode" json:"speechMode"`
	MetaData              []byte      `protobuf:"bytes,20,opt,name=meta_data,json=metaData" json:"metaData"`
	AvailableMessageTypes *string     `protobuf:"bytes,21,opt,name=available_message_types,json=availableMessageTypes" json:"availableMessageTypes"`
	UserIDs               []string    `protobuf:"bytes,22,rep,name=user_ids,json=userIds" json:"userIds,omitempty"`
}

func (m *UpdateRoomRequest) Reset()                    { *m = UpdateRoomRequest{} }
func (m *UpdateRoomRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoomRequest) ProtoMessage()               {}
func (*UpdateRoomRequest) Descriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{6} }

func (m *UpdateRoomRequest) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *UpdateRoomRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *UpdateRoomRequest) GetPictureURL() string {
	if m != nil && m.PictureURL != nil {
		return *m.PictureURL
	}
	return ""
}

func (m *UpdateRoomRequest) GetInformationURL() string {
	if m != nil && m.InformationURL != nil {
		return *m.InformationURL
	}
	return ""
}

func (m *UpdateRoomRequest) GetType() RoomType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RoomType_OneOnOneRoom
}

func (m *UpdateRoomRequest) GetCanLeft() bool {
	if m != nil && m.CanLeft != nil {
		return *m.CanLeft
	}
	return false
}

func (m *UpdateRoomRequest) GetSpeechMode() SpeechMode {
	if m != nil && m.SpeechMode != nil {
		return *m.SpeechMode
	}
	return SpeechMode_SpeechModeNone
}

func (m *UpdateRoomRequest) GetMetaData() []byte {
	if m != nil {
		return m.MetaData
	}
	return nil
}

func (m *UpdateRoomRequest) GetAvailableMessageTypes() string {
	if m != nil && m.AvailableMessageTypes != nil {
		return *m.AvailableMessageTypes
	}
	return ""
}

func (m *UpdateRoomRequest) GetUserIDs() []string {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

type DeleteRoomRequest struct {
	RoomID string `protobuf:"bytes,11,opt,name=room_id,json=roomId" json:"roomId"`
}

func (m *DeleteRoomRequest) Reset()                    { *m = DeleteRoomRequest{} }
func (m *DeleteRoomRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoomRequest) ProtoMessage()               {}
func (*DeleteRoomRequest) Descriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{7} }

func (m *DeleteRoomRequest) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

type RetrieveRoomMessagesRequest struct {
	Limit   int32        `protobuf:"varint,11,opt,name=limit" json:"limit"`
	Offset  int32        `protobuf:"varint,12,opt,name=offset" json:"offset"`
	Orders  []*OrderInfo `protobuf:"bytes,13,rep,name=orders" json:"orders,omitempty"`
	RoomID  string       `protobuf:"bytes,14,opt,name=room_id,json=roomId" json:"room_id"`
	RoleIDs []int32      `protobuf:"varint,15,rep,name=role_ids,json=roleIds" json:"roleIds"`
}

func (m *RetrieveRoomMessagesRequest) Reset()         { *m = RetrieveRoomMessagesRequest{} }
func (m *RetrieveRoomMessagesRequest) String() string { return proto.CompactTextString(m) }
func (*RetrieveRoomMessagesRequest) ProtoMessage()    {}
func (*RetrieveRoomMessagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorRoomMessage, []int{8}
}

func (m *RetrieveRoomMessagesRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RetrieveRoomMessagesRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *RetrieveRoomMessagesRequest) GetOrders() []*OrderInfo {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *RetrieveRoomMessagesRequest) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *RetrieveRoomMessagesRequest) GetRoleIDs() []int32 {
	if m != nil {
		return m.RoleIDs
	}
	return nil
}

type RoomMessagesResponse struct {
	Messages []*Message   `protobuf:"bytes,1,rep,name=messages" json:"messages"`
	AllCount int64        `protobuf:"varint,2,opt,name=allCount" json:"allCount"`
	Limit    int32        `protobuf:"varint,3,opt,name=limit" json:"limit"`
	Offset   int32        `protobuf:"varint,4,opt,name=offset" json:"offset"`
	Orders   []*OrderInfo `protobuf:"bytes,5,rep,name=orders" json:"orders,omitempty"`
	RoomID   string       `protobuf:"bytes,6,opt,name=room_id,json=roomId" json:"roomId,omitempty"`
	RoleIDs  []int32      `protobuf:"varint,7,rep,name=role_ids,json=roleIds" json:"roleIds,omitempty"`
}

func (m *RoomMessagesResponse) Reset()                    { *m = RoomMessagesResponse{} }
func (m *RoomMessagesResponse) String() string            { return proto.CompactTextString(m) }
func (*RoomMessagesResponse) ProtoMessage()               {}
func (*RoomMessagesResponse) Descriptor() ([]byte, []int) { return fileDescriptorRoomMessage, []int{9} }

func (m *RoomMessagesResponse) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *RoomMessagesResponse) GetAllCount() int64 {
	if m != nil {
		return m.AllCount
	}
	return 0
}

func (m *RoomMessagesResponse) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RoomMessagesResponse) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *RoomMessagesResponse) GetOrders() []*OrderInfo {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *RoomMessagesResponse) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *RoomMessagesResponse) GetRoleIDs() []int32 {
	if m != nil {
		return m.RoleIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*Room)(nil), "swagchat.protobuf.Room")
	proto.RegisterType((*MiniUser)(nil), "swagchat.protobuf.MiniUser")
	proto.RegisterType((*CreateRoomRequest)(nil), "swagchat.protobuf.CreateRoomRequest")
	proto.RegisterType((*RetrieveRoomsRequest)(nil), "swagchat.protobuf.RetrieveRoomsRequest")
	proto.RegisterType((*RoomsResponse)(nil), "swagchat.protobuf.RoomsResponse")
	proto.RegisterType((*RetrieveRoomRequest)(nil), "swagchat.protobuf.RetrieveRoomRequest")
	proto.RegisterType((*UpdateRoomRequest)(nil), "swagchat.protobuf.UpdateRoomRequest")
	proto.RegisterType((*DeleteRoomRequest)(nil), "swagchat.protobuf.DeleteRoomRequest")
	proto.RegisterType((*RetrieveRoomMessagesRequest)(nil), "swagchat.protobuf.RetrieveRoomMessagesRequest")
	proto.RegisterType((*RoomMessagesResponse)(nil), "swagchat.protobuf.RoomMessagesResponse")
	proto.RegisterEnum("swagchat.protobuf.RoomType", RoomType_name, RoomType_value)
	proto.RegisterEnum("swagchat.protobuf.SpeechMode", SpeechMode_name, SpeechMode_value)
}

func init() { proto.RegisterFile("roomMessage.proto", fileDescriptorRoomMessage) }

var fileDescriptorRoomMessage = []byte{
	// 1674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdd, 0x6e, 0xdb, 0x46,
	0x16, 0xb6, 0xac, 0xff, 0x63, 0x59, 0x96, 0xc6, 0x92, 0xcd, 0x28, 0x4e, 0xa8, 0x70, 0xb3, 0xbb,
	0x8a, 0xe1, 0x1f, 0x24, 0x59, 0x20, 0xbb, 0xc9, 0x26, 0xbb, 0x91, 0x0d, 0x2c, 0xbc, 0xf0, 0x4f,
	0x96, 0x6b, 0xc3, 0x40, 0x51, 0x40, 0xa5, 0xc8, 0x91, 0x43, 0x84, 0xe4, 0xa8, 0xfc, 0x49, 0xe0,
	0x3e, 0x41, 0x5f, 0xa3, 0x37, 0x7d, 0x83, 0xbe, 0x43, 0x7b, 0xd7, 0x27, 0xe0, 0x45, 0x2f, 0x05,
	0x14, 0x05, 0x7c, 0xd9, 0xde, 0x14, 0x33, 0x1c, 0xfe, 0x49, 0xb4, 0xe3, 0x26, 0x06, 0xda, 0x2b,
	0xcf, 0x9c, 0x39, 0xe7, 0xcc, 0x99, 0x8f, 0xe7, 0xfb, 0x74, 0x0c, 0x4d, 0x9b, 0x10, 0xf3, 0x00,
	0x3b, 0x8e, 0x72, 0x86, 0xb7, 0xc6, 0x36, 0x71, 0x09, 0x6a, 0x3a, 0xef, 0x94, 0x33, 0xf5, 0xb5,
	0xe2, 0x06, 0xfb, 0xa1, 0x37, 0xea, 0xb4, 0xce, 0xc8, 0x19, 0x61, 0xbb, 0x6d, 0xba, 0x0a, 0x0e,
	0x3a, 0xcb, 0x2a, 0x31, 0x4d, 0x62, 0xa5, 0xa2, 0x3b, 0x2d, 0x33, 0xd8, 0xa6, 0xac, 0xd2, 0xd7,
	0x35, 0x28, 0xc8, 0x84, 0x98, 0xe8, 0x05, 0xcc, 0xeb, 0x9a, 0xb0, 0xd0, 0xcd, 0xf5, 0x0a, 0xfd,
	0xad, 0x6f, 0x7d, 0x71, 0xee, 0x07, 0x5f, 0x9c, 0xdf, 0xdb, 0xbd, 0xf0, 0xc5, 0xae, 0x36, 0x7c,
	0x2a, 0xe9, 0xda, 0xc6, 0xd8, 0xd6, 0x4d, 0xc5, 0x3e, 0x7f, 0x83, 0xcf, 0x37, 0x14, 0xcf, 0x25,
	0xba, 0xa5, 0xda, 0xd8, 0xc4, 0x96, 0x2b, 0xc9, 0xf3, 0xba, 0x86, 0xfe, 0x05, 0x65, 0x5a, 0xf1,
	0x40, 0xd7, 0x84, 0x5a, 0x37, 0xd7, 0xab, 0xf6, 0xff, 0xc2, 0x93, 0x94, 0x68, 0x7a, 0x96, 0xa8,
	0x45, 0x13, 0x71, 0xa7, 0x0d, 0x8b, 0xb8, 0x96, 0x67, 0x18, 0x92, 0x5c, 0xa2, 0x96, 0x3d, 0x96,
	0xc0, 0x73, 0xb0, 0x4d, 0x13, 0x2c, 0xa6, 0x13, 0x9c, 0x38, 0xd8, 0x8e, 0x13, 0x70, 0xa7, 0x44,
	0x02, 0x6a, 0xd9, 0xd3, 0xd0, 0x9f, 0xa1, 0x60, 0x29, 0x26, 0x16, 0xea, 0x2c, 0xba, 0x49, 0xa3,
	0x2f, 0x7c, 0xb1, 0x4a, 0x63, 0xa8, 0x5d, 0x92, 0xd9, 0x31, 0xfa, 0x0f, 0x2c, 0x8c, 0x75, 0xd5,
	0xf5, 0x6c, 0x3c, 0xf0, 0x6c, 0x43, 0x58, 0x4a, 0xdd, 0x05, 0xaf, 0x82, 0xa3, 0x13, 0x79, 0xff,
	0xc2, 0x17, 0x1b, 0x34, 0x36, 0xe1, 0x2c, 0xc9, 0xc0, 0x77, 0x27, 0xb6, 0x81, 0x4e, 0x61, 0x49,
	0xb7, 0x46, 0xc4, 0x36, 0x15, 0x57, 0x27, 0x16, 0x4b, 0xd6, 0x60, 0xc9, 0x42, 0xf8, 0xea, 0x7b,
	0xf1, 0x71, 0x90, 0x90, 0x3d, 0x60, 0x2a, 0x48, 0x92, 0xeb, 0x09, 0x0b, 0x4d, 0xfc, 0x5f, 0x28,
	0xb8, 0xe7, 0x63, 0x2c, 0x34, 0xbb, 0xb9, 0x5e, 0xfd, 0xd1, 0xed, 0xad, 0x99, 0xcf, 0xbe, 0x45,
	0x21, 0x3d, 0x3e, 0x1f, 0xe3, 0xfe, 0x2d, 0xfe, 0xca, 0x26, 0x4d, 0x4c, 0x83, 0x62, 0x58, 0x58,
	0x0e, 0xb4, 0x03, 0x15, 0x55, 0xb1, 0x06, 0xfb, 0x78, 0xe4, 0x0a, 0xa8, 0x9b, 0xeb, 0x55, 0xfa,
	0x3d, 0x5e, 0x5d, 0x79, 0x47, 0xb1, 0xa8, 0xf9, 0xc2, 0x17, 0xdb, 0x34, 0x9a, 0xba, 0x19, 0x78,
	0xe4, 0xc6, 0x19, 0xca, 0x6a, 0xe0, 0x81, 0x3e, 0x83, 0x05, 0x67, 0x8c, 0xb1, 0xfa, 0x7a, 0x60,
	0x12, 0x0d, 0x0b, 0xcb, 0xac, 0xae, 0x3b, 0x19, 0x75, 0xfd, 0x9f, 0x79, 0x1d, 0x10, 0x0d, 0xf7,
	0xbb, 0xbc, 0x32, 0x81, 0xe6, 0x4e, 0x44, 0xc7, 0xe9, 0xc1, 0x89, 0xbc, 0xd1, 0x36, 0x54, 0x4d,
	0xec, 0x2a, 0x03, 0x4d, 0x71, 0x15, 0xa1, 0xd5, 0xcd, 0xf5, 0x6a, 0x7d, 0x74, 0xe1, 0x8b, 0x75,
	0x1a, 0x1c, 0x1d, 0x48, 0x72, 0x85, 0xae, 0x77, 0x15, 0x57, 0x41, 0x9f, 0xc2, 0xaa, 0xf2, 0x56,
	0xd1, 0x0d, 0x65, 0x68, 0xe0, 0x01, 0xef, 0xec, 0x01, 0x7d, 0xb1, 0x23, 0xb4, 0xd9, 0x47, 0xb8,
	0xcf, 0xef, 0x5f, 0xa3, 0x29, 0x2e, 0x71, 0x95, 0xe4, 0x76, 0x74, 0xc2, 0x69, 0x41, 0x51, 0x75,
	0xd0, 0x3f, 0xa1, 0x66, 0x28, 0x8e, 0x1b, 0x7a, 0x0b, 0x2b, 0x2c, 0x65, 0x0a, 0xec, 0xe4, 0xb9,
	0x24, 0x2f, 0xd0, 0x2d, 0x4f, 0x81, 0x2c, 0xb8, 0x9b, 0x3c, 0x1d, 0x78, 0x63, 0x4d, 0x71, 0xb1,
	0x36, 0x70, 0x75, 0x13, 0x3b, 0xae, 0x62, 0x8e, 0x85, 0xd5, 0x6e, 0xae, 0x97, 0xef, 0x3f, 0xe0,
	0xf9, 0xee, 0x4d, 0xe7, 0x0b, 0x23, 0x62, 0xac, 0x6e, 0x27, 0xf2, 0x9f, 0x04, 0x87, 0xc7, 0x61,
	0x36, 0xf4, 0x6f, 0x68, 0x65, 0x45, 0x0b, 0x02, 0xab, 0xba, 0xce, 0x6f, 0x29, 0xd1, 0x5b, 0x36,
	0x25, 0x19, 0xcd, 0xa6, 0x42, 0x8f, 0x61, 0x31, 0x0c, 0x56, 0x89, 0x67, 0xb9, 0xc2, 0x2d, 0x56,
	0xe0, 0x74, 0x68, 0x8d, 0x3b, 0xed, 0x50, 0x1f, 0x64, 0x42, 0xdb, 0x22, 0xae, 0x3e, 0xd2, 0xd5,
	0xa0, 0x97, 0x5d, 0x32, 0xd6, 0x55, 0x4a, 0xdf, 0x0e, 0xbb, 0xf7, 0x1f, 0xbc, 0xcf, 0x96, 0x0f,
	0x13, 0x4e, 0xc7, 0xd4, 0x87, 0x71, 0xb9, 0xc3, 0x78, 0x99, 0x15, 0x2f, 0xc9, 0xcb, 0xd6, 0x4c,
	0x88, 0x86, 0xf6, 0xa0, 0xa9, 0xda, 0x78, 0x0a, 0x48, 0x91, 0xd5, 0xb9, 0xc6, 0xeb, 0x64, 0xf4,
	0xe2, 0x4e, 0x31, 0x76, 0x0d, 0x6e, 0x89, 0x01, 0xeb, 0x41, 0x99, 0xdb, 0x84, 0x6e, 0x26, 0x46,
	0xe1, 0x31, 0xda, 0x07, 0x64, 0x12, 0x4d, 0x1f, 0xe9, 0xa9, 0x5b, 0xef, 0xb1, 0x5b, 0xef, 0xf0,
	0x20, 0xc6, 0x9e, 0xd0, 0x2b, 0xbe, 0xb6, 0x19, 0x9a, 0xe2, 0x7b, 0xd7, 0xa1, 0x12, 0x1a, 0x05,
	0x29, 0xf3, 0xe2, 0xe8, 0x9c, 0x3e, 0x57, 0xc3, 0x06, 0x4e, 0x3f, 0xf7, 0x4f, 0xb3, 0xcf, 0xe5,
	0x4e, 0x89, 0xe7, 0x72, 0x4b, 0x7c, 0xed, 0x73, 0x28, 0x52, 0x89, 0x74, 0x84, 0x5e, 0x37, 0xdf,
	0x5b, 0xc8, 0x14, 0x94, 0x03, 0xdd, 0xd2, 0xa9, 0xcc, 0xf6, 0x21, 0x51, 0x4c, 0x10, 0xf5, 0xb4,
	0xf0, 0xfd, 0x57, 0xe2, 0x9c, 0xf4, 0x5d, 0x09, 0x2a, 0xa1, 0x17, 0x7a, 0x12, 0x8b, 0x7d, 0x8e,
	0xbd, 0xe3, 0xee, 0x8c, 0xd8, 0xd7, 0x12, 0x62, 0x1f, 0x8b, 0xfc, 0x93, 0x58, 0xe4, 0xe7, 0xd3,
	0x81, 0x91, 0xc8, 0xd7, 0x12, 0x22, 0x3f, 0x2b, 0xee, 0xf9, 0xdf, 0x24, 0xee, 0x85, 0x9b, 0x14,
	0xf7, 0xe2, 0x8d, 0x88, 0x7b, 0x4a, 0xe9, 0x4a, 0xd7, 0x50, 0xba, 0x6d, 0xa8, 0x52, 0x69, 0x1e,
	0x1a, 0x44, 0x7d, 0x23, 0x94, 0x99, 0x84, 0x47, 0x01, 0xd1, 0x81, 0x24, 0x53, 0x99, 0xef, 0xd3,
	0x25, 0x92, 0x61, 0x95, 0xc9, 0x81, 0xa2, 0xaa, 0xd8, 0x71, 0x52, 0xfd, 0x53, 0x61, 0xfd, 0xd3,
	0xe1, 0xe8, 0xa1, 0x48, 0x77, 0x42, 0x57, 0x49, 0x6e, 0xd3, 0xfd, 0x4b, 0xbe, 0x8d, 0x5b, 0xe8,
	0x31, 0x2c, 0xa6, 0x1c, 0x85, 0x6a, 0x66, 0xfb, 0xd6, 0x92, 0xd1, 0xe8, 0x11, 0x80, 0xed, 0x0d,
	0x34, 0xdd, 0x19, 0x1b, 0xca, 0xb9, 0x00, 0xac, 0xf4, 0xe5, 0x0b, 0x5f, 0x5c, 0x62, 0xad, 0x11,
	0x9d, 0x48, 0x72, 0xd5, 0xf6, 0x76, 0x83, 0x35, 0x7a, 0x99, 0xc5, 0xf2, 0x36, 0x2b, 0xbb, 0xc5,
	0x2f, 0xab, 0x25, 0x58, 0xfe, 0x1e, 0x76, 0xaf, 0x5c, 0xcd, 0xee, 0xdd, 0x4c, 0x76, 0x07, 0xe2,
	0xdc, 0xe6, 0x41, 0x8b, 0x49, 0x76, 0xbf, 0x97, 0xd5, 0xc2, 0xd5, 0xac, 0xe6, 0x5c, 0xfa, 0xb2,
	0x08, 0xcd, 0x1d, 0x56, 0x03, 0xa5, 0x8b, 0x8c, 0x3f, 0xf7, 0xb0, 0xe3, 0xa2, 0xcd, 0xe9, 0x09,
	0xaa, 0x15, 0x13, 0x6a, 0xe2, 0x8b, 0x9c, 0x42, 0x11, 0x95, 0x36, 0xa7, 0xe7, 0xa5, 0x56, 0x4c,
	0x23, 0xea, 0x1e, 0x10, 0x27, 0x22, 0x10, 0x4a, 0x4e, 0x47, 0x9c, 0x2d, 0xcf, 0xb3, 0x46, 0xa1,
	0xb5, 0x34, 0x53, 0x26, 0xbe, 0x98, 0xe0, 0x45, 0x8a, 0x23, 0x07, 0x97, 0x0d, 0x40, 0xf7, 0x67,
	0xf9, 0x31, 0xf1, 0xc5, 0x29, 0x26, 0x64, 0x30, 0x23, 0x18, 0x7b, 0xca, 0xef, 0x1d, 0x7b, 0xf8,
	0x6c, 0xf3, 0x30, 0x31, 0xdb, 0xdc, 0x62, 0xdd, 0xb5, 0x92, 0x98, 0x6b, 0x26, 0xbe, 0x18, 0x0e,
	0x30, 0xf1, 0x24, 0x73, 0x98, 0x9e, 0x64, 0x3a, 0xd7, 0x99, 0x64, 0xea, 0x14, 0x82, 0x78, 0x56,
	0x49, 0xcd, 0x2d, 0x0f, 0x92, 0x6c, 0x6e, 0x32, 0x36, 0xd7, 0x26, 0xbe, 0x18, 0xb1, 0x37, 0xc1,
	0xe3, 0xff, 0x5d, 0x3e, 0xb1, 0xa0, 0x60, 0xbc, 0x98, 0xf8, 0x62, 0xf6, 0x3c, 0x72, 0xd9, 0x98,
	0xf2, 0x0c, 0x2a, 0xbc, 0x05, 0x1c, 0xe1, 0x41, 0x37, 0xdf, 0xab, 0xf6, 0xbb, 0x14, 0x80, 0xa0,
	0x07, 0x9c, 0x89, 0x2f, 0x36, 0x83, 0x8f, 0xef, 0x6c, 0x10, 0x53, 0x77, 0xb1, 0x39, 0x76, 0xcf,
	0xe5, 0x32, 0x37, 0xf1, 0x56, 0xfc, 0x26, 0x07, 0x2d, 0x19, 0xbb, 0xb6, 0x8e, 0xdf, 0xb2, 0x66,
	0x74, 0xc2, 0x6e, 0xec, 0x40, 0xd1, 0xd0, 0x4d, 0xdd, 0x65, 0xff, 0x12, 0x14, 0xfb, 0x05, 0xda,
	0xd2, 0x72, 0x60, 0x42, 0x6b, 0x50, 0x22, 0xa3, 0x91, 0x83, 0x5d, 0xd6, 0xa8, 0xe1, 0x21, 0xb7,
	0xa1, 0xbf, 0x41, 0x89, 0xd8, 0x1a, 0xfd, 0xbd, 0x59, 0x64, 0xbf, 0x37, 0x6b, 0x19, 0xf0, 0x1e,
	0x51, 0x07, 0xda, 0x21, 0x32, 0xf7, 0x45, 0x7f, 0x8d, 0xdb, 0xb9, 0x1e, 0x93, 0x28, 0x6e, 0xe9,
	0xb0, 0x91, 0x79, 0xdd, 0x3f, 0xe6, 0x60, 0x91, 0xd7, 0xeb, 0x8c, 0x89, 0xe5, 0x60, 0xf4, 0x77,
	0x28, 0x52, 0x66, 0x38, 0x42, 0x8e, 0xdd, 0xba, 0x7a, 0x49, 0xff, 0xf4, 0xab, 0x13, 0x5f, 0x0c,
	0x3c, 0xe5, 0xe0, 0x0f, 0xda, 0x80, 0x8a, 0x62, 0x18, 0x6c, 0xa8, 0x61, 0xbf, 0x4a, 0xf9, 0x7e,
	0x83, 0xde, 0x4d, 0xbf, 0x63, 0x68, 0x97, 0xa3, 0x55, 0x0c, 0x4c, 0xfe, 0x2a, 0x60, 0x0a, 0x57,
	0x02, 0x53, 0xbc, 0x3e, 0x30, 0xfc, 0xbd, 0x87, 0xb0, 0x9c, 0xfc, 0x4c, 0xe1, 0x57, 0x7a, 0x18,
	0x6b, 0xc6, 0x02, 0x43, 0x4d, 0x48, 0xff, 0x10, 0xcf, 0xea, 0x06, 0xcf, 0xf7, 0x4b, 0x01, 0x9a,
	0xc1, 0xf4, 0xf7, 0x71, 0xe9, 0xd0, 0x3d, 0xae, 0x2b, 0x81, 0x06, 0x2d, 0x66, 0xfd, 0x28, 0x4f,
	0xc9, 0x4c, 0xfd, 0xe3, 0x65, 0x66, 0xe9, 0x23, 0x64, 0xe6, 0xc5, 0xf5, 0xff, 0xbb, 0x8a, 0x5e,
	0x43, 0x03, 0xa4, 0x0c, 0xd5, 0x41, 0x1f, 0xa4, 0x3a, 0xcb, 0x37, 0xaa, 0x3a, 0xad, 0x0f, 0x55,
	0x9d, 0xf6, 0x0d, 0xa8, 0xce, 0xca, 0x87, 0xa9, 0xce, 0x3e, 0x34, 0x77, 0xd9, 0x94, 0x7a, 0x23,
	0xbd, 0xfc, 0x53, 0x0e, 0x6e, 0x27, 0xc9, 0xc1, 0xab, 0xfd, 0x3d, 0xa5, 0x2c, 0x7c, 0xc8, 0x94,
	0x94, 0x05, 0x0f, 0x89, 0xb8, 0xf3, 0x10, 0x2a, 0x36, 0x31, 0x30, 0x43, 0x72, 0xa9, 0x9b, 0xef,
	0x15, 0x83, 0x56, 0x92, 0x89, 0x81, 0x03, 0x24, 0xcb, 0xf4, 0x78, 0x4f, 0x73, 0xe4, 0x70, 0xc1,
	0x5f, 0xfc, 0xf3, 0x3c, 0xb4, 0xd2, 0x2f, 0xe5, 0x22, 0xb8, 0x0b, 0x15, 0xfe, 0x91, 0x43, 0x1d,
	0xec, 0x64, 0x4d, 0xfb, 0x81, 0x4b, 0xd8, 0x34, 0x3c, 0x47, 0xb4, 0xfa, 0x63, 0x0b, 0x22, 0x7a,
	0x16, 0xc3, 0x5b, 0x62, 0xf0, 0x4a, 0x33, 0x7d, 0xd2, 0x08, 0x00, 0x4e, 0x34, 0x60, 0x08, 0xf9,
	0xb3, 0x04, 0xe4, 0x65, 0x06, 0x79, 0x37, 0x0d, 0x79, 0x93, 0x23, 0x9d, 0x6c, 0xde, 0x14, 0xf8,
	0xeb, 0x07, 0x50, 0x09, 0x15, 0x02, 0x35, 0xa0, 0x76, 0x64, 0xe1, 0x23, 0xeb, 0xc8, 0x62, 0x9d,
	0xd7, 0x98, 0x43, 0x4b, 0xb0, 0xf0, 0xca, 0xd6, 0xdf, 0x72, 0x61, 0x6d, 0xe4, 0x50, 0x1d, 0xe0,
	0x95, 0x37, 0x34, 0x74, 0x95, 0xed, 0xe7, 0xe9, 0x9e, 0xfe, 0x47, 0xac, 0x06, 0xe7, 0xf9, 0xf5,
	0x2f, 0x00, 0x62, 0xda, 0x23, 0x04, 0xf5, 0x78, 0x77, 0x48, 0x2c, 0xdc, 0x98, 0xa3, 0xb6, 0x53,
	0xe5, 0x0d, 0xf6, 0xc6, 0xa7, 0x78, 0x78, 0x4c, 0x4e, 0xf1, 0xb0, 0x91, 0x43, 0x2d, 0x68, 0x24,
	0x6c, 0x3b, 0x06, 0xf1, 0xb4, 0xc6, 0x3c, 0x5a, 0x01, 0x14, 0x58, 0x99, 0x21, 0xb4, 0xe7, 0x11,
	0x40, 0xe9, 0xa5, 0xf1, 0x4e, 0x39, 0x77, 0x1a, 0x05, 0xba, 0x3e, 0x50, 0x2c, 0x4f, 0x31, 0x1a,
	0xc5, 0xfe, 0xc6, 0x27, 0xeb, 0x67, 0xba, 0xfb, 0xda, 0x1b, 0x6e, 0xa9, 0xc4, 0xdc, 0x0e, 0xc1,
	0xdf, 0x0e, 0xc1, 0x0f, 0x16, 0xea, 0xe6, 0x19, 0xb6, 0x36, 0xcf, 0xc8, 0xaf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xae, 0xd9, 0x97, 0x62, 0x93, 0x14, 0x00, 0x00,
}
