// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: commonMessage.proto

package protoc_gen_go

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ResponseType int32

const (
	ResponseType_UserIdList ResponseType = 0
	ResponseType_UserList   ResponseType = 1
)

var ResponseType_name = map[int32]string{
	0: "UserIdList",
	1: "UserList",
}
var ResponseType_value = map[string]int32{
	"UserIdList": 0,
	"UserList":   1,
}

func (x ResponseType) String() string {
	return proto.EnumName(ResponseType_name, int32(x))
}
func (ResponseType) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommonMessage, []int{0} }

type Order int32

const (
	Order_Asc  Order = 0
	Order_Desc Order = 1
)

var Order_name = map[int32]string{
	0: "Asc",
	1: "Desc",
}
var Order_value = map[string]int32{
	"Asc":  0,
	"Desc": 1,
}

func (x Order) String() string {
	return proto.EnumName(Order_name, int32(x))
}
func (Order) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommonMessage, []int{1} }

type RoomIds struct {
	RoomIDs []string `protobuf:"bytes,1,rep,name=room_ids,json=roomIds" json:"roomIds,omitempty"`
}

func (m *RoomIds) Reset()                    { *m = RoomIds{} }
func (m *RoomIds) String() string            { return proto.CompactTextString(m) }
func (*RoomIds) ProtoMessage()               {}
func (*RoomIds) Descriptor() ([]byte, []int) { return fileDescriptorCommonMessage, []int{0} }

func (m *RoomIds) GetRoomIDs() []string {
	if m != nil {
		return m.RoomIDs
	}
	return nil
}

type UserIds struct {
	UserIDs []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds" json:"userIds,omitempty"`
}

func (m *UserIds) Reset()                    { *m = UserIds{} }
func (m *UserIds) String() string            { return proto.CompactTextString(m) }
func (*UserIds) ProtoMessage()               {}
func (*UserIds) Descriptor() ([]byte, []int) { return fileDescriptorCommonMessage, []int{1} }

func (m *UserIds) GetUserIDs() []string {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

type RoleIds struct {
	RoleIDs []int32 `protobuf:"varint,1,rep,packed,name=role_ids,json=roleIds" json:"roleIds"`
}

func (m *RoleIds) Reset()                    { *m = RoleIds{} }
func (m *RoleIds) String() string            { return proto.CompactTextString(m) }
func (*RoleIds) ProtoMessage()               {}
func (*RoleIds) Descriptor() ([]byte, []int) { return fileDescriptorCommonMessage, []int{2} }

func (m *RoleIds) GetRoleIDs() []int32 {
	if m != nil {
		return m.RoleIDs
	}
	return nil
}

type ErrorResponse struct {
	Message          string          `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	DeveloperMessage string          `protobuf:"bytes,2,opt,name=developer_message,json=developerMessage,proto3" json:"developerMessage,omitempty"`
	Info             string          `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	InvalidParams    []*InvalidParam `protobuf:"bytes,5,rep,name=invalid_params,json=invalidParams" json:"invalidParams,omitempty"`
}

func (m *ErrorResponse) Reset()                    { *m = ErrorResponse{} }
func (m *ErrorResponse) String() string            { return proto.CompactTextString(m) }
func (*ErrorResponse) ProtoMessage()               {}
func (*ErrorResponse) Descriptor() ([]byte, []int) { return fileDescriptorCommonMessage, []int{3} }

func (m *ErrorResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ErrorResponse) GetDeveloperMessage() string {
	if m != nil {
		return m.DeveloperMessage
	}
	return ""
}

func (m *ErrorResponse) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *ErrorResponse) GetInvalidParams() []*InvalidParam {
	if m != nil {
		return m.InvalidParams
	}
	return nil
}

type InvalidParam struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *InvalidParam) Reset()                    { *m = InvalidParam{} }
func (m *InvalidParam) String() string            { return proto.CompactTextString(m) }
func (*InvalidParam) ProtoMessage()               {}
func (*InvalidParam) Descriptor() ([]byte, []int) { return fileDescriptorCommonMessage, []int{4} }

func (m *InvalidParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InvalidParam) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type OrderInfo struct {
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Order Order  `protobuf:"varint,2,opt,name=order,proto3,enum=swagchat.protobuf.Order" json:"order,omitempty"`
}

func (m *OrderInfo) Reset()                    { *m = OrderInfo{} }
func (m *OrderInfo) String() string            { return proto.CompactTextString(m) }
func (*OrderInfo) ProtoMessage()               {}
func (*OrderInfo) Descriptor() ([]byte, []int) { return fileDescriptorCommonMessage, []int{5} }

func (m *OrderInfo) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *OrderInfo) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return Order_Asc
}

func init() {
	proto.RegisterType((*RoomIds)(nil), "swagchat.protobuf.RoomIds")
	proto.RegisterType((*UserIds)(nil), "swagchat.protobuf.UserIds")
	proto.RegisterType((*RoleIds)(nil), "swagchat.protobuf.RoleIds")
	proto.RegisterType((*ErrorResponse)(nil), "swagchat.protobuf.ErrorResponse")
	proto.RegisterType((*InvalidParam)(nil), "swagchat.protobuf.InvalidParam")
	proto.RegisterType((*OrderInfo)(nil), "swagchat.protobuf.OrderInfo")
	proto.RegisterEnum("swagchat.protobuf.ResponseType", ResponseType_name, ResponseType_value)
	proto.RegisterEnum("swagchat.protobuf.Order", Order_name, Order_value)
}

func init() { proto.RegisterFile("commonMessage.proto", fileDescriptorCommonMessage) }

var fileDescriptorCommonMessage = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xeb, 0x26, 0xae, 0x93, 0x21, 0x8d, 0x92, 0xa5, 0x14, 0x2b, 0x48, 0x38, 0xe2, 0x80,
	0xa2, 0x28, 0x75, 0x44, 0xb9, 0xc1, 0x05, 0xac, 0x72, 0x88, 0x68, 0x05, 0x58, 0x70, 0xe1, 0x12,
	0x39, 0xf6, 0xc6, 0xb5, 0xe4, 0xf5, 0x58, 0xbb, 0x4e, 0x51, 0xdf, 0x06, 0xde, 0x88, 0x27, 0xf0,
	0x81, 0x63, 0x9e, 0x02, 0xed, 0x1f, 0x57, 0xa6, 0xe5, 0x36, 0xdf, 0xcc, 0xf7, 0xfd, 0x3c, 0x1e,
	0x1b, 0x1e, 0xc7, 0xc8, 0x18, 0x16, 0x57, 0x54, 0x88, 0x28, 0xa5, 0x7e, 0xc9, 0xb1, 0x42, 0x32,
	0x16, 0x3f, 0xa2, 0x34, 0xbe, 0x8e, 0x2a, 0xad, 0x37, 0xbb, 0xed, 0xe4, 0x24, 0xc5, 0x14, 0x95,
	0x5a, 0xca, 0x4a, 0x0f, 0x5e, 0x5c, 0x82, 0x13, 0x22, 0xb2, 0x55, 0x22, 0xc8, 0x5b, 0xe8, 0x71,
	0x44, 0xb6, 0xce, 0x12, 0xe1, 0x5a, 0xd3, 0xce, 0xac, 0x1f, 0x4c, 0xff, 0xd4, 0x9e, 0x1e, 0x5f,
	0x88, 0x7d, 0xed, 0x8d, 0xb9, 0x76, 0x2e, 0x90, 0x65, 0x15, 0x65, 0x65, 0x75, 0x1b, 0x3a, 0xa6,
	0xf5, 0xa6, 0xfb, 0xfb, 0x97, 0x77, 0x20, 0x69, 0xdf, 0x04, 0xe5, 0x86, 0xb6, 0x13, 0x94, 0xdf,
	0xa7, 0xa9, 0xb1, 0xa6, 0xed, 0xb4, 0xb3, 0x4d, 0x33, 0x2d, 0x43, 0x0b, 0xe4, 0x6e, 0x39, 0x95,
	0xb4, 0x57, 0x72, 0xb7, 0x9c, 0xde, 0xd1, 0xec, 0xe0, 0x54, 0xef, 0x96, 0x53, 0x4d, 0x73, 0xb8,
	0x76, 0x86, 0x4d, 0x61, 0x18, 0x3f, 0x0f, 0xe1, 0xf8, 0x03, 0xe7, 0xc8, 0x43, 0x2a, 0x4a, 0x2c,
	0x04, 0x25, 0x4b, 0x70, 0x98, 0xbe, 0x95, 0x6b, 0x4d, 0xad, 0x59, 0x3f, 0x78, 0x22, 0x97, 0x31,
	0xad, 0xf6, 0x32, 0xa6, 0x45, 0x3e, 0xc2, 0x38, 0xa1, 0x37, 0x34, 0xc7, 0x92, 0xf2, 0x75, 0x13,
	0x3d, 0x54, 0xd1, 0xe7, 0xfb, 0xda, 0x9b, 0xdc, 0x0d, 0xaf, 0x1e, 0x30, 0x46, 0xf7, 0x67, 0xe4,
	0x25, 0x74, 0xb3, 0x62, 0x8b, 0x6e, 0x47, 0xe5, 0xc9, 0xbe, 0xf6, 0x86, 0x52, 0xb7, 0x32, 0x6a,
	0x4e, 0x62, 0x18, 0x66, 0xc5, 0x4d, 0x94, 0x67, 0xc9, 0xba, 0x8c, 0x78, 0xc4, 0x84, 0x6b, 0x4f,
	0x3b, 0xb3, 0x47, 0xe7, 0x9e, 0xff, 0xe0, 0xcb, 0xfa, 0x2b, 0x6d, 0xfc, 0x2c, 0x7d, 0xc1, 0xb3,
	0x7d, 0xed, 0x3d, 0xcd, 0x5a, 0x9d, 0xf6, 0x81, 0x8f, 0xff, 0x19, 0x98, 0x13, 0xbd, 0x83, 0x41,
	0x9b, 0x40, 0x08, 0x74, 0x8b, 0x88, 0x99, 0xeb, 0x84, 0xaa, 0x26, 0xa7, 0x70, 0xc4, 0x69, 0x24,
	0xb0, 0xd0, 0x2f, 0x1e, 0x1a, 0x65, 0x08, 0x5f, 0xa0, 0xff, 0x89, 0x27, 0x94, 0xaf, 0xe4, 0xe6,
	0x27, 0x60, 0x6f, 0x33, 0x9a, 0x27, 0x26, 0xaf, 0x05, 0xf1, 0xc1, 0x46, 0x69, 0x51, 0xf9, 0xe1,
	0xb9, 0xfb, 0x9f, 0xd7, 0x50, 0x88, 0x50, 0xdb, 0xe6, 0x0b, 0x18, 0x34, 0x5f, 0xec, 0xeb, 0x6d,
	0x49, 0xc9, 0x10, 0x40, 0xff, 0x59, 0x97, 0x99, 0xa8, 0x46, 0x07, 0x64, 0x00, 0x3d, 0xa9, 0x95,
	0xb2, 0xe6, 0x13, 0xb0, 0x55, 0x9a, 0x38, 0xd0, 0x79, 0x2f, 0xe2, 0xd1, 0x01, 0xe9, 0x41, 0xf7,
	0x82, 0x8a, 0x78, 0x64, 0x05, 0x8b, 0xef, 0xf3, 0x34, 0xab, 0xae, 0x77, 0x1b, 0x3f, 0x46, 0xb6,
	0x6c, 0x1e, 0xbb, 0x6c, 0x1e, 0xab, 0x8b, 0xf8, 0x2c, 0xa5, 0xc5, 0x59, 0x8a, 0x9b, 0x23, 0x25,
	0x5f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x86, 0xd1, 0x07, 0xec, 0x56, 0x03, 0x00, 0x00,
}
