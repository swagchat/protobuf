// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blockUserService.proto

package protoc_gen_go

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BlockUserService service

type BlockUserServiceClient interface {
	CreateBlockUsers(ctx context.Context, in *CreateBlockUsersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	GetBlockUsers(ctx context.Context, in *GetBlockUsersRequest, opts ...grpc.CallOption) (*BlockUsersResponse, error)
	GetBlockUserIds(ctx context.Context, in *GetBlockUsersRequest, opts ...grpc.CallOption) (*BlockUserIdsResponse, error)
	GetBlockedUsers(ctx context.Context, in *GetBlockedUsersRequest, opts ...grpc.CallOption) (*BlockedUsersResponse, error)
	GetBlockedUserIds(ctx context.Context, in *GetBlockedUsersRequest, opts ...grpc.CallOption) (*BlockedUserIdsResponse, error)
	DeleteBlockUsers(ctx context.Context, in *DeleteBlockUsersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type blockUserServiceClient struct {
	cc *grpc.ClientConn
}

func NewBlockUserServiceClient(cc *grpc.ClientConn) BlockUserServiceClient {
	return &blockUserServiceClient{cc}
}

func (c *blockUserServiceClient) CreateBlockUsers(ctx context.Context, in *CreateBlockUsersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.BlockUserService/CreateBlockUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockUserServiceClient) GetBlockUsers(ctx context.Context, in *GetBlockUsersRequest, opts ...grpc.CallOption) (*BlockUsersResponse, error) {
	out := new(BlockUsersResponse)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.BlockUserService/GetBlockUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockUserServiceClient) GetBlockUserIds(ctx context.Context, in *GetBlockUsersRequest, opts ...grpc.CallOption) (*BlockUserIdsResponse, error) {
	out := new(BlockUserIdsResponse)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.BlockUserService/GetBlockUserIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockUserServiceClient) GetBlockedUsers(ctx context.Context, in *GetBlockedUsersRequest, opts ...grpc.CallOption) (*BlockedUsersResponse, error) {
	out := new(BlockedUsersResponse)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.BlockUserService/GetBlockedUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockUserServiceClient) GetBlockedUserIds(ctx context.Context, in *GetBlockedUsersRequest, opts ...grpc.CallOption) (*BlockedUserIdsResponse, error) {
	out := new(BlockedUserIdsResponse)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.BlockUserService/GetBlockedUserIds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockUserServiceClient) DeleteBlockUsers(ctx context.Context, in *DeleteBlockUsersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.BlockUserService/DeleteBlockUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlockUserService service

type BlockUserServiceServer interface {
	CreateBlockUsers(context.Context, *CreateBlockUsersRequest) (*google_protobuf1.Empty, error)
	GetBlockUsers(context.Context, *GetBlockUsersRequest) (*BlockUsersResponse, error)
	GetBlockUserIds(context.Context, *GetBlockUsersRequest) (*BlockUserIdsResponse, error)
	GetBlockedUsers(context.Context, *GetBlockedUsersRequest) (*BlockedUsersResponse, error)
	GetBlockedUserIds(context.Context, *GetBlockedUsersRequest) (*BlockedUserIdsResponse, error)
	DeleteBlockUsers(context.Context, *DeleteBlockUsersRequest) (*google_protobuf1.Empty, error)
}

func RegisterBlockUserServiceServer(s *grpc.Server, srv BlockUserServiceServer) {
	s.RegisterService(&_BlockUserService_serviceDesc, srv)
}

func _BlockUserService_CreateBlockUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlockUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockUserServiceServer).CreateBlockUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.BlockUserService/CreateBlockUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockUserServiceServer).CreateBlockUsers(ctx, req.(*CreateBlockUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockUserService_GetBlockUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockUserServiceServer).GetBlockUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.BlockUserService/GetBlockUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockUserServiceServer).GetBlockUsers(ctx, req.(*GetBlockUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockUserService_GetBlockUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockUserServiceServer).GetBlockUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.BlockUserService/GetBlockUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockUserServiceServer).GetBlockUserIds(ctx, req.(*GetBlockUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockUserService_GetBlockedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockUserServiceServer).GetBlockedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.BlockUserService/GetBlockedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockUserServiceServer).GetBlockedUsers(ctx, req.(*GetBlockedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockUserService_GetBlockedUserIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockUserServiceServer).GetBlockedUserIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.BlockUserService/GetBlockedUserIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockUserServiceServer).GetBlockedUserIds(ctx, req.(*GetBlockedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockUserService_DeleteBlockUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockUserServiceServer).DeleteBlockUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.BlockUserService/DeleteBlockUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockUserServiceServer).DeleteBlockUsers(ctx, req.(*DeleteBlockUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swagchat.protobuf.BlockUserService",
	HandlerType: (*BlockUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlockUsers",
			Handler:    _BlockUserService_CreateBlockUsers_Handler,
		},
		{
			MethodName: "GetBlockUsers",
			Handler:    _BlockUserService_GetBlockUsers_Handler,
		},
		{
			MethodName: "GetBlockUserIds",
			Handler:    _BlockUserService_GetBlockUserIds_Handler,
		},
		{
			MethodName: "GetBlockedUsers",
			Handler:    _BlockUserService_GetBlockedUsers_Handler,
		},
		{
			MethodName: "GetBlockedUserIds",
			Handler:    _BlockUserService_GetBlockedUserIds_Handler,
		},
		{
			MethodName: "DeleteBlockUsers",
			Handler:    _BlockUserService_DeleteBlockUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockUserService.proto",
}

func init() { proto.RegisterFile("blockUserService.proto", fileDescriptorBlockUserService) }

var fileDescriptorBlockUserService = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x7b, 0x10, 0x0f, 0x0b, 0x62, 0xba, 0x87, 0x1e, 0xa2, 0xa7, 0x82, 0x94, 0x16, 0xbb,
	0x01, 0x7d, 0x83, 0xaa, 0x48, 0x0f, 0x5e, 0x14, 0xa1, 0x78, 0xdb, 0x6c, 0xc6, 0x6d, 0x68, 0xba,
	0x13, 0xb3, 0x13, 0xc5, 0x17, 0xf6, 0x39, 0xa4, 0xcd, 0xff, 0xb4, 0x24, 0xf4, 0x96, 0x65, 0x7e,
	0x7c, 0xbf, 0x6f, 0x98, 0xb0, 0x91, 0x1f, 0xa1, 0xda, 0xbc, 0x5b, 0x48, 0xde, 0x20, 0xf9, 0x0e,
	0x15, 0x88, 0x38, 0x41, 0x42, 0x3e, 0xb4, 0x3f, 0x52, 0xab, 0xb5, 0xa4, 0xec, 0xed, 0xa7, 0x9f,
	0xee, 0xb5, 0x46, 0xd4, 0x11, 0x78, 0x32, 0x0e, 0x3d, 0x69, 0x0c, 0x92, 0xa4, 0x10, 0x8d, 0xcd,
	0x00, 0xf7, 0x2a, 0x9f, 0x16, 0xb8, 0x07, 0xdb, 0x98, 0x7e, 0xf3, 0x61, 0x65, 0x79, 0x01, 0x6b,
	0xa5, 0xce, 0x2d, 0x77, 0x7f, 0x67, 0xcc, 0x59, 0xb4, 0x0a, 0xf0, 0x15, 0x73, 0x1e, 0x12, 0x90,
	0x04, 0xe5, 0xc4, 0xf2, 0x99, 0x38, 0xe8, 0x23, 0xda, 0xd0, 0x2b, 0x7c, 0xa5, 0x60, 0xc9, 0x1d,
	0x89, 0xac, 0x4a, 0x45, 0x3e, 0xed, 0xaa, 0x8c, 0x07, 0x5c, 0xb2, 0x8b, 0x67, 0xa0, 0x5a, 0xec,
	0xe4, 0x48, 0x6c, 0x83, 0x28, 0x32, 0x6f, 0x8e, 0x80, 0x75, 0xca, 0xc6, 0x68, 0x2c, 0x8c, 0x07,
	0x1c, 0xd8, 0x65, 0x3d, 0x60, 0x19, 0x9c, 0x20, 0x99, 0x74, 0x49, 0x96, 0x41, 0x5d, 0xa3, 0x2b,
	0x0d, 0x04, 0xd9, 0x2e, 0xd3, 0x0e, 0x4d, 0xce, 0xf4, 0x8a, 0x4a, 0xae, 0x14, 0x6d, 0xd8, 0xb0,
	0x19, 0xb2, 0xdb, 0xe8, 0x04, 0xd5, 0xb4, 0x5b, 0xd5, 0xdc, 0x6a, 0xc5, 0x9c, 0x47, 0x88, 0xa0,
	0xf7, 0xf2, 0x6d, 0xa8, 0xf7, 0xf2, 0x8b, 0xdb, 0x8f, 0x99, 0x0e, 0x69, 0x9d, 0xfa, 0x42, 0xe1,
	0xd6, 0x2b, 0x12, 0xab, 0x9f, 0x75, 0xff, 0xa1, 0xe6, 0x1a, 0xcc, 0x5c, 0xa3, 0x7f, 0xbe, 0x7f,
	0xde, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x74, 0xe8, 0x9b, 0x11, 0x1d, 0x03, 0x00, 0x00,
}
