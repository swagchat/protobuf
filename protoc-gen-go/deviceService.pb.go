// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: deviceService.proto

package protoc_gen_go

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeviceService service

type DeviceServiceClient interface {
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	RetrieveDevices(ctx context.Context, in *RetrieveDevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type deviceServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceServiceClient(cc *grpc.ClientConn) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.DeviceService/CreateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RetrieveDevices(ctx context.Context, in *RetrieveDevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error) {
	out := new(DevicesResponse)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.DeviceService/RetrieveDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/swagchat.protobuf.DeviceService/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceService service

type DeviceServiceServer interface {
	CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error)
	RetrieveDevices(context.Context, *RetrieveDevicesRequest) (*DevicesResponse, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*google_protobuf1.Empty, error)
}

func RegisterDeviceServiceServer(s *grpc.Server, srv DeviceServiceServer) {
	s.RegisterService(&_DeviceService_serviceDesc, srv)
}

func _DeviceService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.DeviceService/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RetrieveDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RetrieveDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.DeviceService/RetrieveDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RetrieveDevices(ctx, req.(*RetrieveDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swagchat.protobuf.DeviceService/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swagchat.protobuf.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDevice",
			Handler:    _DeviceService_CreateDevice_Handler,
		},
		{
			MethodName: "RetrieveDevices",
			Handler:    _DeviceService_RetrieveDevices_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceService_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deviceService.proto",
}

func init() { proto.RegisterFile("deviceService.proto", fileDescriptorDeviceService) }

var fileDescriptorDeviceService = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x8b, 0x07, 0x0f, 0xa1, 0x22, 0x46, 0x10, 0x5c, 0x3d, 0xed, 0x41, 0x50, 0x6c, 0x16,
	0xf4, 0x1f, 0x68, 0x3d, 0x0a, 0xb2, 0xbd, 0x79, 0xcb, 0xae, 0x63, 0x1a, 0x68, 0x33, 0x31, 0x33,
	0x5b, 0xf1, 0xaf, 0xf8, 0x6b, 0x65, 0x9b, 0x84, 0x2e, 0xba, 0xf6, 0x94, 0x4c, 0xe6, 0xcb, 0x7b,
	0x8f, 0x27, 0x4e, 0xdf, 0x60, 0x63, 0x5b, 0x58, 0x40, 0xe8, 0x0f, 0xe5, 0x03, 0x32, 0xca, 0x13,
	0xfa, 0xd4, 0xa6, 0x5d, 0x6a, 0x8e, 0x73, 0xd3, 0xbd, 0x17, 0x97, 0x06, 0xd1, 0xac, 0xa0, 0xd2,
	0xde, 0x56, 0xda, 0x39, 0x64, 0xcd, 0x16, 0x1d, 0x45, 0xa0, 0xb8, 0x48, 0xdb, 0x8c, 0x57, 0xb0,
	0xf6, 0xfc, 0x95, 0x96, 0xc9, 0xe2, 0x19, 0x88, 0xb4, 0x49, 0x16, 0x77, 0xdf, 0x07, 0xe2, 0x68,
	0x3e, 0xb4, 0x96, 0x0b, 0x31, 0x7d, 0x0c, 0xa0, 0x19, 0xe2, 0xb3, 0xbc, 0x52, 0x7f, 0x52, 0xa8,
	0x21, 0x50, 0xc3, 0x47, 0x07, 0xc4, 0xc5, 0xf9, 0x08, 0x17, 0x89, 0x72, 0x22, 0x1b, 0x71, 0x5c,
	0x03, 0x07, 0x0b, 0x9b, 0xf4, 0x8b, 0xe4, 0xf5, 0x08, 0xff, 0x8b, 0xc9, 0xd2, 0xe5, 0xbf, 0xd2,
	0x54, 0x03, 0x79, 0x74, 0xd4, 0x7b, 0xbc, 0x88, 0xe9, 0x1c, 0x56, 0xb0, 0x37, 0xf8, 0x10, 0xc8,
	0xea, 0x67, 0x2a, 0xb6, 0xb6, 0xa3, 0x9e, 0xfa, 0xd6, 0xca, 0xc9, 0xc3, 0xed, 0xeb, 0x8d, 0xb1,
	0xbc, 0xec, 0x1a, 0xd5, 0xe2, 0xba, 0xca, 0x6a, 0xbb, 0x76, 0xb7, 0x97, 0x76, 0x66, 0xc0, 0xcd,
	0x0c, 0x36, 0x87, 0xdb, 0xf1, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0xd8, 0xb1, 0xfc, 0xeb, 0xcb,
	0x01, 0x00, 0x00,
}
