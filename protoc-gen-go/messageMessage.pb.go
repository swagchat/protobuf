// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: messageMessage.proto

package protoc_gen_go

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Messages struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	AllCount *int64     `protobuf:"varint,2,opt,name=allCount" json:"allCount,omitempty"`
	Limit    *int32     `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset   *int32     `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Order    *string    `protobuf:"bytes,5,opt,name=order" json:"order,omitempty"`
}

func (m *Messages) Reset()                    { *m = Messages{} }
func (m *Messages) String() string            { return proto.CompactTextString(m) }
func (*Messages) ProtoMessage()               {}
func (*Messages) Descriptor() ([]byte, []int) { return fileDescriptorMessageMessage, []int{0} }

func (m *Messages) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *Messages) GetAllCount() int64 {
	if m != nil && m.AllCount != nil {
		return *m.AllCount
	}
	return 0
}

func (m *Messages) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *Messages) GetOffset() int32 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *Messages) GetOrder() string {
	if m != nil && m.Order != nil {
		return *m.Order
	}
	return ""
}

type Message struct {
	ID                uint64 `protobuf:"varint,11,opt,name=id" json:"id" db:"id,primarykey,autoincrement"`
	MessageID         string `protobuf:"bytes,12,opt,name=message_id,json=messageId" json:"message_id" db:"message_id,notnull"`
	RoomID            string `protobuf:"bytes,13,opt,name=room_id,json=roomId" json:"room_id" db:"room_id,notnull"`
	UserID            string `protobuf:"bytes,14,opt,name=user_id,json=userId" json:"user_id" db:"user_id,notnull"`
	Type              string `protobuf:"bytes,15,opt,name=type" json:"type" db:"type,notnull"`
	Payload           []byte `protobuf:"bytes,16,opt,name=payload" json:"payload,omitempty" db:"-"`
	Role              int32  `protobuf:"varint,17,opt,name=role" json:"role" db:"role,notnull"`
	CreatedTimestamp  int64  `protobuf:"varint,30,opt,name=created_timestamp,json=createdTimestamp" json:"created_timestamp" db:"created,notnull"`
	Created           string `protobuf:"bytes,31,opt,name=created" json:"created" db:"-"`
	ModifiedTimestamp int64  `protobuf:"varint,32,opt,name=modified_timestamp,json=modifiedTimestamp" json:"modified_timestamp" db:"modified,notnull"`
	Modified          string `protobuf:"bytes,33,opt,name=modified" json:"modified" db:"-"`
	DeletedTimestamp  int64  `protobuf:"varint,34,opt,name=deleted_timestamp,json=deletedTimestamp" json:"deleted_timestamp" db:"deleted,notnull"`
	// optional string event_name = 41 [(gogoproto.nullable) = false, (gogoproto.moretags) = "db:\"-\""];
	UserIDs []string `protobuf:"bytes,42,rep,name=user_ids,json=userIds" json:"user_ids,omitempty" db:"-"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorMessageMessage, []int{1} }

func (m *Message) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Message) GetMessageID() string {
	if m != nil {
		return m.MessageID
	}
	return ""
}

func (m *Message) GetRoomID() string {
	if m != nil {
		return m.RoomID
	}
	return ""
}

func (m *Message) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Message) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetRole() int32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *Message) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

func (m *Message) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Message) GetModifiedTimestamp() int64 {
	if m != nil {
		return m.ModifiedTimestamp
	}
	return 0
}

func (m *Message) GetModified() string {
	if m != nil {
		return m.Modified
	}
	return ""
}

func (m *Message) GetDeletedTimestamp() int64 {
	if m != nil {
		return m.DeletedTimestamp
	}
	return 0
}

func (m *Message) GetUserIDs() []string {
	if m != nil {
		return m.UserIDs
	}
	return nil
}

type MessagePayload struct {
	// text
	Text string `protobuf:"bytes,1,opt,name=text" json:"text"`
	// image
	Mime         string `protobuf:"bytes,11,opt,name=mime" json:"mime"`
	Filename     string `protobuf:"bytes,12,opt,name=filename" json:"filename"`
	SourceUrl    string `protobuf:"bytes,13,opt,name=sourceUrl" json:"sourceUrl"`
	ThumbnailUrl string `protobuf:"bytes,14,opt,name=thumbnailUrl" json:"thumbnailUrl"`
	Width        int32  `protobuf:"varint,15,opt,name=width" json:"width"`
	Height       int32  `protobuf:"varint,16,opt,name=height" json:"height"`
}

func (m *MessagePayload) Reset()                    { *m = MessagePayload{} }
func (m *MessagePayload) String() string            { return proto.CompactTextString(m) }
func (*MessagePayload) ProtoMessage()               {}
func (*MessagePayload) Descriptor() ([]byte, []int) { return fileDescriptorMessageMessage, []int{2} }

func (m *MessagePayload) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MessagePayload) GetMime() string {
	if m != nil {
		return m.Mime
	}
	return ""
}

func (m *MessagePayload) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *MessagePayload) GetSourceUrl() string {
	if m != nil {
		return m.SourceUrl
	}
	return ""
}

func (m *MessagePayload) GetThumbnailUrl() string {
	if m != nil {
		return m.ThumbnailUrl
	}
	return ""
}

func (m *MessagePayload) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *MessagePayload) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type SendMessageRequest struct {
	MessageID *string `protobuf:"bytes,12,opt,name=message_id,json=messageId" json:"messageId" db:"message_id,notnull"`
	RoomID    *string `protobuf:"bytes,13,opt,name=room_id,json=roomId" json:"roomId" db:"room_id,notnull"`
	UserID    *string `protobuf:"bytes,14,opt,name=user_id,json=userId" json:"userId" db:"user_id,notnull"`
	Type      *string `protobuf:"bytes,15,opt,name=type" json:"type,omitempty" db:"type,notnull"`
	Payload   []byte  `protobuf:"bytes,16,opt,name=payload" json:"payload,omitempty" db:"-"`
	Role      *int32  `protobuf:"varint,17,opt,name=role" json:"role,omitempty" db:"role,notnull"`
}

func (m *SendMessageRequest) Reset()                    { *m = SendMessageRequest{} }
func (m *SendMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SendMessageRequest) ProtoMessage()               {}
func (*SendMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptorMessageMessage, []int{3} }

func (m *SendMessageRequest) GetMessageID() string {
	if m != nil && m.MessageID != nil {
		return *m.MessageID
	}
	return ""
}

func (m *SendMessageRequest) GetRoomID() string {
	if m != nil && m.RoomID != nil {
		return *m.RoomID
	}
	return ""
}

func (m *SendMessageRequest) GetUserID() string {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return ""
}

func (m *SendMessageRequest) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *SendMessageRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SendMessageRequest) GetRole() int32 {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return 0
}

func init() {
	proto.RegisterType((*Messages)(nil), "swagchat.protobuf.Messages")
	proto.RegisterType((*Message)(nil), "swagchat.protobuf.Message")
	proto.RegisterType((*MessagePayload)(nil), "swagchat.protobuf.MessagePayload")
	proto.RegisterType((*SendMessageRequest)(nil), "swagchat.protobuf.SendMessageRequest")
}
func (m *Messages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Messages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessageMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AllCount != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessageMessage(dAtA, i, uint64(*m.AllCount))
	}
	if m.Limit != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessageMessage(dAtA, i, uint64(*m.Limit))
	}
	if m.Offset != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessageMessage(dAtA, i, uint64(*m.Offset))
	}
	if m.Order != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessageMessage(dAtA, i, uint64(len(*m.Order)))
		i += copy(dAtA[i:], *m.Order)
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x58
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(m.ID))
	dAtA[i] = 0x62
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(len(m.MessageID)))
	i += copy(dAtA[i:], m.MessageID)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(len(m.RoomID)))
	i += copy(dAtA[i:], m.RoomID)
	dAtA[i] = 0x72
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(len(m.UserID)))
	i += copy(dAtA[i:], m.UserID)
	dAtA[i] = 0x7a
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(len(m.Type)))
	i += copy(dAtA[i:], m.Type)
	if m.Payload != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessageMessage(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(m.Role))
	dAtA[i] = 0xf0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(m.CreatedTimestamp))
	dAtA[i] = 0xfa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(len(m.Created)))
	i += copy(dAtA[i:], m.Created)
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(m.ModifiedTimestamp))
	dAtA[i] = 0x8a
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(len(m.Modified)))
	i += copy(dAtA[i:], m.Modified)
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(m.DeletedTimestamp))
	if len(m.UserIDs) > 0 {
		for _, s := range m.UserIDs {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x2
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MessagePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(len(m.Mime)))
	i += copy(dAtA[i:], m.Mime)
	dAtA[i] = 0x62
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(len(m.Filename)))
	i += copy(dAtA[i:], m.Filename)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(len(m.SourceUrl)))
	i += copy(dAtA[i:], m.SourceUrl)
	dAtA[i] = 0x72
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(len(m.ThumbnailUrl)))
	i += copy(dAtA[i:], m.ThumbnailUrl)
	dAtA[i] = 0x78
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(m.Width))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintMessageMessage(dAtA, i, uint64(m.Height))
	return i, nil
}

func (m *SendMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MessageID != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMessageMessage(dAtA, i, uint64(len(*m.MessageID)))
		i += copy(dAtA[i:], *m.MessageID)
	}
	if m.RoomID != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMessageMessage(dAtA, i, uint64(len(*m.RoomID)))
		i += copy(dAtA[i:], *m.RoomID)
	}
	if m.UserID != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintMessageMessage(dAtA, i, uint64(len(*m.UserID)))
		i += copy(dAtA[i:], *m.UserID)
	}
	if m.Type != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintMessageMessage(dAtA, i, uint64(len(*m.Type)))
		i += copy(dAtA[i:], *m.Type)
	}
	if m.Payload != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessageMessage(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Role != nil {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMessageMessage(dAtA, i, uint64(*m.Role))
	}
	return i, nil
}

func encodeVarintMessageMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Messages) Size() (n int) {
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovMessageMessage(uint64(l))
		}
	}
	if m.AllCount != nil {
		n += 1 + sovMessageMessage(uint64(*m.AllCount))
	}
	if m.Limit != nil {
		n += 1 + sovMessageMessage(uint64(*m.Limit))
	}
	if m.Offset != nil {
		n += 1 + sovMessageMessage(uint64(*m.Offset))
	}
	if m.Order != nil {
		l = len(*m.Order)
		n += 1 + l + sovMessageMessage(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovMessageMessage(uint64(m.ID))
	l = len(m.MessageID)
	n += 1 + l + sovMessageMessage(uint64(l))
	l = len(m.RoomID)
	n += 1 + l + sovMessageMessage(uint64(l))
	l = len(m.UserID)
	n += 1 + l + sovMessageMessage(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovMessageMessage(uint64(l))
	if m.Payload != nil {
		l = len(m.Payload)
		n += 2 + l + sovMessageMessage(uint64(l))
	}
	n += 2 + sovMessageMessage(uint64(m.Role))
	n += 2 + sovMessageMessage(uint64(m.CreatedTimestamp))
	l = len(m.Created)
	n += 2 + l + sovMessageMessage(uint64(l))
	n += 2 + sovMessageMessage(uint64(m.ModifiedTimestamp))
	l = len(m.Modified)
	n += 2 + l + sovMessageMessage(uint64(l))
	n += 2 + sovMessageMessage(uint64(m.DeletedTimestamp))
	if len(m.UserIDs) > 0 {
		for _, s := range m.UserIDs {
			l = len(s)
			n += 2 + l + sovMessageMessage(uint64(l))
		}
	}
	return n
}

func (m *MessagePayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovMessageMessage(uint64(l))
	l = len(m.Mime)
	n += 1 + l + sovMessageMessage(uint64(l))
	l = len(m.Filename)
	n += 1 + l + sovMessageMessage(uint64(l))
	l = len(m.SourceUrl)
	n += 1 + l + sovMessageMessage(uint64(l))
	l = len(m.ThumbnailUrl)
	n += 1 + l + sovMessageMessage(uint64(l))
	n += 1 + sovMessageMessage(uint64(m.Width))
	n += 2 + sovMessageMessage(uint64(m.Height))
	return n
}

func (m *SendMessageRequest) Size() (n int) {
	var l int
	_ = l
	if m.MessageID != nil {
		l = len(*m.MessageID)
		n += 1 + l + sovMessageMessage(uint64(l))
	}
	if m.RoomID != nil {
		l = len(*m.RoomID)
		n += 1 + l + sovMessageMessage(uint64(l))
	}
	if m.UserID != nil {
		l = len(*m.UserID)
		n += 1 + l + sovMessageMessage(uint64(l))
	}
	if m.Type != nil {
		l = len(*m.Type)
		n += 1 + l + sovMessageMessage(uint64(l))
	}
	if m.Payload != nil {
		l = len(m.Payload)
		n += 2 + l + sovMessageMessage(uint64(l))
	}
	if m.Role != nil {
		n += 2 + sovMessageMessage(uint64(*m.Role))
	}
	return n
}

func sovMessageMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessageMessage(x uint64) (n int) {
	return sovMessageMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Messages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Messages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Messages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &Message{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllCount", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Limit = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Offset = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Order = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessageMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTimestamp", wireType)
			}
			m.CreatedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedTimestamp", wireType)
			}
			m.ModifiedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modified = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedTimestamp", wireType)
			}
			m.DeletedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIDs = append(m.UserIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessageMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbnailUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbnailUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessageMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessageMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MessageID = &s
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RoomID = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UserID = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Type = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Role = &v
		default:
			iNdEx = preIndex
			skippy, err := skipMessageMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessageMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessageMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessageMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessageMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessageMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessageMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessageMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessageMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("messageMessage.proto", fileDescriptorMessageMessage) }

var fileDescriptorMessageMessage = []byte{
	// 763 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x6e, 0xf3, 0x44,
	0x14, 0xad, 0xf3, 0x9f, 0x69, 0x09, 0xcd, 0x28, 0x81, 0x21, 0x2a, 0xb1, 0xb1, 0x10, 0x72, 0xab,
	0x24, 0x45, 0x48, 0x20, 0xd4, 0x05, 0x48, 0x81, 0x2e, 0x22, 0x40, 0x42, 0xa6, 0xdd, 0xb0, 0xa9,
	0x9c, 0x78, 0xe2, 0x8c, 0xb0, 0x3d, 0xc1, 0x1e, 0xab, 0xe4, 0x25, 0x78, 0x07, 0x76, 0x3c, 0x4a,
	0x97, 0x7d, 0x02, 0x0b, 0x65, 0xd9, 0x65, 0xc5, 0x8a, 0x15, 0x9a, 0xf1, 0x75, 0x1c, 0xb7, 0xd5,
	0xd7, 0x4f, 0xfa, 0x56, 0xf1, 0x3d, 0xf7, 0xdc, 0x73, 0xe7, 0xe6, 0xce, 0xb1, 0x51, 0x2f, 0xa0,
	0x71, 0xec, 0x78, 0xf4, 0xa7, 0xec, 0x67, 0xb2, 0x8e, 0xb8, 0xe0, 0xb8, 0x1b, 0xdf, 0x3a, 0xde,
	0x62, 0xe5, 0x88, 0x2c, 0x9e, 0x27, 0xcb, 0x41, 0xcf, 0xe3, 0x1e, 0x57, 0xd1, 0xb9, 0x7c, 0xca,
	0x12, 0xe6, 0xdf, 0x1a, 0x6a, 0x41, 0x69, 0x8c, 0xbf, 0x42, 0x2d, 0x50, 0x8b, 0x89, 0x66, 0x54,
	0xad, 0xc3, 0x2f, 0x06, 0x93, 0x67, 0x42, 0x13, 0xa0, 0xdb, 0x3b, 0x2e, 0x1e, 0xa0, 0x96, 0xe3,
	0xfb, 0xdf, 0xf1, 0x24, 0x14, 0xa4, 0x62, 0x68, 0x56, 0xd5, 0xde, 0xc5, 0xb8, 0x87, 0xea, 0x3e,
	0x0b, 0x98, 0x20, 0x55, 0x43, 0xb3, 0xea, 0x76, 0x16, 0xe0, 0x0f, 0x50, 0x83, 0x2f, 0x97, 0x31,
	0x15, 0xa4, 0xa6, 0x60, 0x88, 0x24, 0x9b, 0x47, 0x2e, 0x8d, 0x48, 0xdd, 0xd0, 0xac, 0xb6, 0x9d,
	0x05, 0x17, 0xb5, 0xfb, 0xbf, 0xf4, 0x03, 0xf3, 0xcf, 0x06, 0x6a, 0x42, 0x6f, 0xfc, 0x0d, 0xaa,
	0x30, 0x97, 0x1c, 0x1a, 0x9a, 0x55, 0x9b, 0x4e, 0xee, 0x52, 0xfd, 0x60, 0x9b, 0xea, 0x95, 0xd9,
	0xf7, 0x8f, 0xa9, 0x6e, 0xb8, 0xf3, 0x0b, 0x93, 0xb9, 0xa3, 0x75, 0xc4, 0x02, 0x27, 0xda, 0xfc,
	0x46, 0x37, 0x23, 0x27, 0x11, 0x9c, 0x85, 0x8b, 0x88, 0x06, 0x34, 0x14, 0xa6, 0x5d, 0x61, 0x2e,
	0xfe, 0x01, 0x21, 0x38, 0xfd, 0x0d, 0x73, 0xc9, 0x91, 0x6c, 0x36, 0x1d, 0x81, 0x4e, 0x1b, 0x9a,
	0x28, 0xb9, 0x0f, 0xa5, 0x5c, 0x41, 0x1d, 0x85, 0x5c, 0x84, 0x89, 0xef, 0x9b, 0x76, 0x1b, 0xc0,
	0x99, 0x8b, 0xbf, 0x45, 0xcd, 0x88, 0xf3, 0x40, 0x2a, 0xbd, 0xa7, 0x94, 0x3e, 0x03, 0xa5, 0x86,
	0xcd, 0x79, 0xa0, 0x64, 0x7a, 0x52, 0x06, 0x48, 0x85, 0x46, 0x43, 0x22, 0x99, 0x40, 0x12, 0xd3,
	0x48, 0x0a, 0x74, 0xca, 0x02, 0xd7, 0x31, 0x8d, 0x0a, 0x01, 0x20, 0xed, 0x09, 0x48, 0x64, 0xe6,
	0xe2, 0x31, 0xaa, 0x89, 0xcd, 0x9a, 0x92, 0xf7, 0x55, 0xf5, 0x47, 0xb2, 0xfa, 0x31, 0xd5, 0xbb,
	0xb2, 0x46, 0xe2, 0x45, 0x81, 0xa2, 0xe1, 0x4f, 0x51, 0x73, 0xed, 0x6c, 0x7c, 0xee, 0xb8, 0xe4,
	0xd8, 0xd0, 0xac, 0xa3, 0x29, 0x7a, 0x4c, 0xf5, 0x86, 0x64, 0x8f, 0x4d, 0x3b, 0x4f, 0x49, 0xd1,
	0x88, 0xfb, 0x94, 0x74, 0xe5, 0x86, 0xca, 0xa2, 0x12, 0xdf, 0x13, 0x95, 0x21, 0x9e, 0xa1, 0xee,
	0x22, 0xa2, 0x8e, 0xa0, 0xee, 0x8d, 0x60, 0x01, 0x8d, 0x85, 0x13, 0xac, 0xc9, 0x50, 0xde, 0x86,
	0xe9, 0x09, 0xd4, 0xaa, 0x21, 0x80, 0x54, 0x94, 0x1f, 0x03, 0x72, 0x95, 0x57, 0x61, 0x0b, 0x35,
	0x01, 0x23, 0xba, 0x9a, 0xa8, 0x03, 0x02, 0xbb, 0x33, 0x42, 0x1a, 0xff, 0x88, 0x70, 0xc0, 0x5d,
	0xb6, 0x64, 0xa5, 0xae, 0x86, 0xea, 0xfa, 0x31, 0x14, 0xf5, 0xd5, 0x0a, 0x81, 0x55, 0xb4, 0xed,
	0xe6, 0x50, 0xd1, 0xf7, 0x0c, 0xb5, 0x72, 0x90, 0x7c, 0xf2, 0x62, 0xe3, 0x5d, 0x5e, 0x8e, 0xeb,
	0x52, 0x9f, 0x96, 0xc7, 0x35, 0x9f, 0x8f, 0x0b, 0xa4, 0xbd, 0x71, 0x01, 0x29, 0xda, 0x7e, 0x8e,
	0x5a, 0xb0, 0xd9, 0x98, 0x9c, 0x19, 0x55, 0xab, 0x3d, 0xed, 0x6f, 0x53, 0xbd, 0x99, 0xed, 0x3e,
	0xde, 0x1f, 0x3b, 0x5b, 0x77, 0x0c, 0x86, 0xf8, 0x57, 0x43, 0x1d, 0xb8, 0xab, 0x3f, 0xc3, 0xce,
	0x08, 0xaa, 0x09, 0xfa, 0x87, 0x20, 0x9a, 0x3a, 0x7d, 0x4d, 0x1e, 0xc4, 0x56, 0x88, 0xcc, 0x04,
	0x2c, 0xa0, 0xca, 0x33, 0xbb, 0x8c, 0x44, 0xb0, 0x81, 0x5a, 0x4b, 0xe6, 0xd3, 0xd0, 0x09, 0x28,
	0x38, 0x21, 0xcb, 0xee, 0x50, 0x6c, 0xa2, 0x76, 0xcc, 0x93, 0x68, 0x41, 0xaf, 0x23, 0x1f, 0xae,
	0x78, 0x46, 0x29, 0x60, 0x6c, 0xa1, 0x23, 0xb1, 0x4a, 0x82, 0x79, 0xe8, 0x30, 0x5f, 0xd2, 0x3a,
	0x7b, 0xb4, 0x52, 0x06, 0x0f, 0x50, 0xfd, 0x96, 0xb9, 0x62, 0xa5, 0x6e, 0x6b, 0x1d, 0x28, 0x19,
	0x84, 0x4f, 0x50, 0x63, 0x45, 0x99, 0xb7, 0x12, 0xea, 0x62, 0xe6, 0x49, 0xc0, 0x60, 0xec, 0xff,
	0x2a, 0x08, 0xff, 0x42, 0x43, 0x37, 0x7f, 0x0f, 0xd1, 0xdf, 0x13, 0x1a, 0x0b, 0x7c, 0xf5, 0x82,
	0xa5, 0xbf, 0x2c, 0xd9, 0xf9, 0x21, 0xd5, 0x0b, 0xd7, 0xbe, 0xa5, 0xb7, 0x2f, 0x9f, 0x7a, 0x7b,
	0x54, 0xf8, 0xfa, 0x21, 0xd5, 0xc1, 0xc1, 0xaf, 0x3a, 0xfc, 0xf2, 0xa9, 0xc3, 0x47, 0x85, 0xbb,
	0xa5, 0x4c, 0xb6, 0xd8, 0x57, 0x7d, 0x7e, 0x5a, 0xf2, 0x79, 0xff, 0xdd, 0x3d, 0x7e, 0x5a, 0xf2,
	0x78, 0xff, 0x0d, 0xfe, 0xce, 0xfe, 0xfc, 0xe9, 0xd7, 0x77, 0xdb, 0xa1, 0x76, 0xbf, 0x1d, 0x6a,
	0xff, 0x6c, 0x87, 0xda, 0xaf, 0x67, 0x1e, 0x13, 0xab, 0x64, 0x3e, 0x59, 0xf0, 0xe0, 0x3c, 0xff,
	0x50, 0x9c, 0xe7, 0x1f, 0x8a, 0xec, 0x61, 0x31, 0xf6, 0x68, 0x38, 0xf6, 0xf8, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x51, 0xf5, 0x5c, 0x77, 0xa9, 0x06, 0x00, 0x00,
}
