/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('./gogoproto/gogo_pb.js');
goog.exportSymbol('proto.swagchat.protobuf.CreateRoomUsersRequest', null, global);
goog.exportSymbol('proto.swagchat.protobuf.DeleteRoomUsersRequest', null, global);
goog.exportSymbol('proto.swagchat.protobuf.GetRoomUsersRequest', null, global);
goog.exportSymbol('proto.swagchat.protobuf.RoomUser', null, global);
goog.exportSymbol('proto.swagchat.protobuf.RoomUserIdsResponse', null, global);
goog.exportSymbol('proto.swagchat.protobuf.RoomUsersResponse', null, global);
goog.exportSymbol('proto.swagchat.protobuf.UpdateRoomUserRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.RoomUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.RoomUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.RoomUser.displayName = 'proto.swagchat.protobuf.RoomUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.RoomUser.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.RoomUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.RoomUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 11),
    userId: jspb.Message.getField(msg, 12),
    unreadCount: jspb.Message.getField(msg, 13),
    display: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.RoomUser}
 */
proto.swagchat.protobuf.RoomUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.RoomUser;
  return proto.swagchat.protobuf.RoomUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.RoomUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.RoomUser}
 */
proto.swagchat.protobuf.RoomUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnreadCount(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.RoomUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.RoomUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.RoomUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional string room_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.RoomUser.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.RoomUser.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.RoomUser.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomUser.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string user_id = 12;
 * @return {string}
 */
proto.swagchat.protobuf.RoomUser.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.RoomUser.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.RoomUser.prototype.clearUserId = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomUser.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 unread_count = 13;
 * @return {number}
 */
proto.swagchat.protobuf.RoomUser.prototype.getUnreadCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.RoomUser.prototype.setUnreadCount = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.RoomUser.prototype.clearUnreadCount = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomUser.prototype.hasUnreadCount = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool display = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.RoomUser.prototype.getDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.RoomUser.prototype.setDisplay = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.RoomUser.prototype.clearDisplay = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomUser.prototype.hasDisplay = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.CreateRoomUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.CreateRoomUsersRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.CreateRoomUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.CreateRoomUsersRequest.displayName = 'proto.swagchat.protobuf.CreateRoomUsersRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.CreateRoomUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.CreateRoomUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 11),
    userIdsList: jspb.Message.getRepeatedField(msg, 12),
    display: jspb.Message.getField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.CreateRoomUsersRequest}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.CreateRoomUsersRequest;
  return proto.swagchat.protobuf.CreateRoomUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.CreateRoomUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.CreateRoomUsersRequest}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIds(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.CreateRoomUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.CreateRoomUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
};


/**
 * optional string room_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated string user_ids = 12;
 * @return {!Array.<string>}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.getUserIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 12));
};


/** @param {!Array.<string>} value */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.setUserIdsList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.addUserIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.clearUserIdsList = function() {
  this.setUserIdsList([]);
};


/**
 * optional bool display = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.getDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.setDisplay = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.clearDisplay = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.hasDisplay = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.GetRoomUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.GetRoomUsersRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.GetRoomUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.GetRoomUsersRequest.displayName = 'proto.swagchat.protobuf.GetRoomUsersRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.GetRoomUsersRequest.repeatedFields_ = [12,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.GetRoomUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.GetRoomUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.GetRoomUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetRoomUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 11),
    userIdsList: jspb.Message.getRepeatedField(msg, 12),
    roleIdsList: jspb.Message.getRepeatedField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.GetRoomUsersRequest}
 */
proto.swagchat.protobuf.GetRoomUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.GetRoomUsersRequest;
  return proto.swagchat.protobuf.GetRoomUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.GetRoomUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.GetRoomUsersRequest}
 */
proto.swagchat.protobuf.GetRoomUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIds(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addRoleIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.GetRoomUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.GetRoomUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.GetRoomUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetRoomUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      12,
      f
    );
  }
  f = message.getRoleIdsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      13,
      f
    );
  }
};


/**
 * optional string room_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.GetRoomUsersRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.GetRoomUsersRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.GetRoomUsersRequest.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetRoomUsersRequest.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated string user_ids = 12;
 * @return {!Array.<string>}
 */
proto.swagchat.protobuf.GetRoomUsersRequest.prototype.getUserIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 12));
};


/** @param {!Array.<string>} value */
proto.swagchat.protobuf.GetRoomUsersRequest.prototype.setUserIdsList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.GetRoomUsersRequest.prototype.addUserIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.swagchat.protobuf.GetRoomUsersRequest.prototype.clearUserIdsList = function() {
  this.setUserIdsList([]);
};


/**
 * repeated int32 role_ids = 13;
 * @return {!Array.<number>}
 */
proto.swagchat.protobuf.GetRoomUsersRequest.prototype.getRoleIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/** @param {!Array.<number>} value */
proto.swagchat.protobuf.GetRoomUsersRequest.prototype.setRoleIdsList = function(value) {
  jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.GetRoomUsersRequest.prototype.addRoleIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


proto.swagchat.protobuf.GetRoomUsersRequest.prototype.clearRoleIdsList = function() {
  this.setRoleIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.RoomUsersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.RoomUsersResponse.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.RoomUsersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.RoomUsersResponse.displayName = 'proto.swagchat.protobuf.RoomUsersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.RoomUsersResponse.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.RoomUsersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.RoomUsersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.RoomUsersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomUsersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.swagchat.protobuf.RoomUser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.RoomUsersResponse}
 */
proto.swagchat.protobuf.RoomUsersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.RoomUsersResponse;
  return proto.swagchat.protobuf.RoomUsersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.RoomUsersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.RoomUsersResponse}
 */
proto.swagchat.protobuf.RoomUsersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = new proto.swagchat.protobuf.RoomUser;
      reader.readMessage(value,proto.swagchat.protobuf.RoomUser.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.RoomUsersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.RoomUsersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.RoomUsersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomUsersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.swagchat.protobuf.RoomUser.serializeBinaryToWriter
    );
  }
};


/**
 * repeated RoomUser users = 11;
 * @return {!Array.<!proto.swagchat.protobuf.RoomUser>}
 */
proto.swagchat.protobuf.RoomUsersResponse.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.RoomUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.RoomUser, 11));
};


/** @param {!Array.<!proto.swagchat.protobuf.RoomUser>} value */
proto.swagchat.protobuf.RoomUsersResponse.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.swagchat.protobuf.RoomUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.RoomUser}
 */
proto.swagchat.protobuf.RoomUsersResponse.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.swagchat.protobuf.RoomUser, opt_index);
};


proto.swagchat.protobuf.RoomUsersResponse.prototype.clearUsersList = function() {
  this.setUsersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.RoomUserIdsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.RoomUserIdsResponse.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.RoomUserIdsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.RoomUserIdsResponse.displayName = 'proto.swagchat.protobuf.RoomUserIdsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.RoomUserIdsResponse.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.RoomUserIdsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.RoomUserIdsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.RoomUserIdsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomUserIdsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userIdsList: jspb.Message.getRepeatedField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.RoomUserIdsResponse}
 */
proto.swagchat.protobuf.RoomUserIdsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.RoomUserIdsResponse;
  return proto.swagchat.protobuf.RoomUserIdsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.RoomUserIdsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.RoomUserIdsResponse}
 */
proto.swagchat.protobuf.RoomUserIdsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.RoomUserIdsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.RoomUserIdsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.RoomUserIdsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomUserIdsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
};


/**
 * repeated string user_ids = 11;
 * @return {!Array.<string>}
 */
proto.swagchat.protobuf.RoomUserIdsResponse.prototype.getUserIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/** @param {!Array.<string>} value */
proto.swagchat.protobuf.RoomUserIdsResponse.prototype.setUserIdsList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.RoomUserIdsResponse.prototype.addUserIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.swagchat.protobuf.RoomUserIdsResponse.prototype.clearUserIdsList = function() {
  this.setUserIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.UpdateRoomUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.UpdateRoomUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.UpdateRoomUserRequest.displayName = 'proto.swagchat.protobuf.UpdateRoomUserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.UpdateRoomUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.UpdateRoomUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 11),
    userId: jspb.Message.getField(msg, 12),
    unreadCount: jspb.Message.getField(msg, 13),
    display: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.UpdateRoomUserRequest}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.UpdateRoomUserRequest;
  return proto.swagchat.protobuf.UpdateRoomUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.UpdateRoomUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.UpdateRoomUserRequest}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnreadCount(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.UpdateRoomUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.UpdateRoomUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional string room_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string user_id = 12;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.clearUserId = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 unread_count = 13;
 * @return {number}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.getUnreadCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.setUnreadCount = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.clearUnreadCount = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.hasUnreadCount = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool display = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.getDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.setDisplay = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.clearDisplay = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.hasDisplay = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.DeleteRoomUsersRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.DeleteRoomUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.DeleteRoomUsersRequest.displayName = 'proto.swagchat.protobuf.DeleteRoomUsersRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.DeleteRoomUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.DeleteRoomUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 11),
    userIdsList: jspb.Message.getRepeatedField(msg, 12)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.DeleteRoomUsersRequest}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.DeleteRoomUsersRequest;
  return proto.swagchat.protobuf.DeleteRoomUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.DeleteRoomUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.DeleteRoomUsersRequest}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.DeleteRoomUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.DeleteRoomUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      12,
      f
    );
  }
};


/**
 * optional string room_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated string user_ids = 12;
 * @return {!Array.<string>}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.getUserIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 12));
};


/** @param {!Array.<string>} value */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.setUserIdsList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.addUserIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.clearUserIdsList = function() {
  this.setUserIdsList([]);
};


goog.object.extend(exports, proto.swagchat.protobuf);
