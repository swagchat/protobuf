/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.swagchat.protobuf.CreateRoomRequest');
goog.provide('proto.swagchat.protobuf.CreateRoomUsersRequest');
goog.provide('proto.swagchat.protobuf.CreateUserRequest');
goog.provide('proto.swagchat.protobuf.CreateUserRolesRequest');
goog.provide('proto.swagchat.protobuf.DeleteRoomRequest');
goog.provide('proto.swagchat.protobuf.DeleteRoomUsersRequest');
goog.provide('proto.swagchat.protobuf.DeleteUserRequest');
goog.provide('proto.swagchat.protobuf.DeleteUserRolesRequest');
goog.provide('proto.swagchat.protobuf.Device');
goog.provide('proto.swagchat.protobuf.ErrorResponse');
goog.provide('proto.swagchat.protobuf.GetContactsRequest');
goog.provide('proto.swagchat.protobuf.GetProfileRequest');
goog.provide('proto.swagchat.protobuf.GetRoomMessagesRequest');
goog.provide('proto.swagchat.protobuf.GetRoomRequest');
goog.provide('proto.swagchat.protobuf.GetRoomsRequest');
goog.provide('proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest');
goog.provide('proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest');
goog.provide('proto.swagchat.protobuf.GetUserRequest');
goog.provide('proto.swagchat.protobuf.GetUsersRequest');
goog.provide('proto.swagchat.protobuf.InvalidParam');
goog.provide('proto.swagchat.protobuf.Message');
goog.provide('proto.swagchat.protobuf.MessagePayload');
goog.provide('proto.swagchat.protobuf.Messages');
goog.provide('proto.swagchat.protobuf.Order');
goog.provide('proto.swagchat.protobuf.OrderInfo');
goog.provide('proto.swagchat.protobuf.RoleIds');
goog.provide('proto.swagchat.protobuf.Room');
goog.provide('proto.swagchat.protobuf.RoomForUser');
goog.provide('proto.swagchat.protobuf.RoomIds');
goog.provide('proto.swagchat.protobuf.RoomMessagesResponse');
goog.provide('proto.swagchat.protobuf.RoomType');
goog.provide('proto.swagchat.protobuf.RoomUser');
goog.provide('proto.swagchat.protobuf.RoomsFilter');
goog.provide('proto.swagchat.protobuf.RoomsResponse');
goog.provide('proto.swagchat.protobuf.SpeechMode');
goog.provide('proto.swagchat.protobuf.UpdateRoomRequest');
goog.provide('proto.swagchat.protobuf.UpdateRoomUserRequest');
goog.provide('proto.swagchat.protobuf.UpdateUserRequest');
goog.provide('proto.swagchat.protobuf.User');
goog.provide('proto.swagchat.protobuf.UserForRoom');
goog.provide('proto.swagchat.protobuf.UserIds');
goog.provide('proto.swagchat.protobuf.UserRole');
goog.provide('proto.swagchat.protobuf.UsersResponse');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.Messages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.Messages.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.Messages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.Messages.displayName = 'proto.swagchat.protobuf.Messages';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.Messages.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.Messages.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.Messages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.Messages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.Messages.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.swagchat.protobuf.Message.toObject, includeInstance),
    allcount: jspb.Message.getField(msg, 2),
    limit: jspb.Message.getField(msg, 3),
    offset: jspb.Message.getField(msg, 4),
    order: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.Messages}
 */
proto.swagchat.protobuf.Messages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.Messages;
  return proto.swagchat.protobuf.Messages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.Messages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.Messages}
 */
proto.swagchat.protobuf.Messages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.swagchat.protobuf.Message;
      reader.readMessage(value,proto.swagchat.protobuf.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllcount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.Messages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.Messages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.Messages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.Messages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.swagchat.protobuf.Message.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * repeated Message messages = 1;
 * @return {!Array.<!proto.swagchat.protobuf.Message>}
 */
proto.swagchat.protobuf.Messages.prototype.getMessagesList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.Message, 1));
};


/** @param {!Array.<!proto.swagchat.protobuf.Message>} value */
proto.swagchat.protobuf.Messages.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.swagchat.protobuf.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.Message}
 */
proto.swagchat.protobuf.Messages.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.swagchat.protobuf.Message, opt_index);
};


proto.swagchat.protobuf.Messages.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};


/**
 * optional int64 allCount = 2;
 * @return {number}
 */
proto.swagchat.protobuf.Messages.prototype.getAllcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Messages.prototype.setAllcount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.swagchat.protobuf.Messages.prototype.clearAllcount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Messages.prototype.hasAllcount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.swagchat.protobuf.Messages.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Messages.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.swagchat.protobuf.Messages.prototype.clearLimit = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Messages.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 offset = 4;
 * @return {number}
 */
proto.swagchat.protobuf.Messages.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Messages.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.swagchat.protobuf.Messages.prototype.clearOffset = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Messages.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string order = 5;
 * @return {string}
 */
proto.swagchat.protobuf.Messages.prototype.getOrder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Messages.prototype.setOrder = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.swagchat.protobuf.Messages.prototype.clearOrder = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Messages.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.Message.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.Message.displayName = 'proto.swagchat.protobuf.Message';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.Message.repeatedFields_ = [42];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 11),
    messageId: jspb.Message.getField(msg, 12),
    roomId: jspb.Message.getField(msg, 13),
    userId: jspb.Message.getField(msg, 14),
    type: jspb.Message.getField(msg, 15),
    payload: msg.getPayload_asB64(),
    role: jspb.Message.getField(msg, 17),
    created: jspb.Message.getField(msg, 30),
    modified: jspb.Message.getField(msg, 31),
    deleted: jspb.Message.getField(msg, 32),
    eventName: jspb.Message.getField(msg, 41),
    userIdsList: jspb.Message.getRepeatedField(msg, 42)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.Message}
 */
proto.swagchat.protobuf.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.Message;
  return proto.swagchat.protobuf.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.Message}
 */
proto.swagchat.protobuf.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRole(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreated(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModified(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDeleted(value);
      break;
    case 41:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventName(value);
      break;
    case 42:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeInt64(
      30,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeInt64(
      31,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeInt64(
      32,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 41));
  if (f != null) {
    writer.writeString(
      41,
      f
    );
  }
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      42,
      f
    );
  }
};


/**
 * optional uint64 id = 11;
 * @return {number}
 */
proto.swagchat.protobuf.Message.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Message.prototype.setId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.Message.prototype.clearId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Message.prototype.hasId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string message_id = 12;
 * @return {string}
 */
proto.swagchat.protobuf.Message.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Message.prototype.setMessageId = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.Message.prototype.clearMessageId = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Message.prototype.hasMessageId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string room_id = 13;
 * @return {string}
 */
proto.swagchat.protobuf.Message.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Message.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.Message.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Message.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string user_id = 14;
 * @return {string}
 */
proto.swagchat.protobuf.Message.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Message.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.Message.prototype.clearUserId = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Message.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string type = 15;
 * @return {string}
 */
proto.swagchat.protobuf.Message.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Message.prototype.setType = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.swagchat.protobuf.Message.prototype.clearType = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Message.prototype.hasType = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bytes payload = 16;
 * @return {!(string|Uint8Array)}
 */
proto.swagchat.protobuf.Message.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes payload = 16;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.swagchat.protobuf.Message.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.Message.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.swagchat.protobuf.Message.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.swagchat.protobuf.Message.prototype.clearPayload = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Message.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int32 role = 17;
 * @return {number}
 */
proto.swagchat.protobuf.Message.prototype.getRole = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Message.prototype.setRole = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.swagchat.protobuf.Message.prototype.clearRole = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Message.prototype.hasRole = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional int64 created = 30;
 * @return {number}
 */
proto.swagchat.protobuf.Message.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 30, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Message.prototype.setCreated = function(value) {
  jspb.Message.setField(this, 30, value);
};


proto.swagchat.protobuf.Message.prototype.clearCreated = function() {
  jspb.Message.setField(this, 30, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Message.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional int64 modified = 31;
 * @return {number}
 */
proto.swagchat.protobuf.Message.prototype.getModified = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Message.prototype.setModified = function(value) {
  jspb.Message.setField(this, 31, value);
};


proto.swagchat.protobuf.Message.prototype.clearModified = function() {
  jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Message.prototype.hasModified = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional int64 deleted = 32;
 * @return {number}
 */
proto.swagchat.protobuf.Message.prototype.getDeleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Message.prototype.setDeleted = function(value) {
  jspb.Message.setField(this, 32, value);
};


proto.swagchat.protobuf.Message.prototype.clearDeleted = function() {
  jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Message.prototype.hasDeleted = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional string event_name = 41;
 * @return {string}
 */
proto.swagchat.protobuf.Message.prototype.getEventName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 41, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Message.prototype.setEventName = function(value) {
  jspb.Message.setField(this, 41, value);
};


proto.swagchat.protobuf.Message.prototype.clearEventName = function() {
  jspb.Message.setField(this, 41, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Message.prototype.hasEventName = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * repeated string user_ids = 42;
 * @return {!Array.<string>}
 */
proto.swagchat.protobuf.Message.prototype.getUserIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 42));
};


/** @param {!Array.<string>} value */
proto.swagchat.protobuf.Message.prototype.setUserIdsList = function(value) {
  jspb.Message.setField(this, 42, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.Message.prototype.addUserIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 42, value, opt_index);
};


proto.swagchat.protobuf.Message.prototype.clearUserIdsList = function() {
  this.setUserIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.MessagePayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.MessagePayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.MessagePayload.displayName = 'proto.swagchat.protobuf.MessagePayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.MessagePayload.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.MessagePayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.MessagePayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.MessagePayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getField(msg, 1),
    mime: jspb.Message.getField(msg, 11),
    filename: jspb.Message.getField(msg, 12),
    sourceurl: jspb.Message.getField(msg, 13),
    thumbnailurl: jspb.Message.getField(msg, 14),
    width: jspb.Message.getField(msg, 15),
    height: jspb.Message.getField(msg, 16)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.MessagePayload}
 */
proto.swagchat.protobuf.MessagePayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.MessagePayload;
  return proto.swagchat.protobuf.MessagePayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.MessagePayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.MessagePayload}
 */
proto.swagchat.protobuf.MessagePayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMime(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceurl(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbnailurl(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.MessagePayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.MessagePayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.MessagePayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.MessagePayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeInt32(
      16,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.swagchat.protobuf.MessagePayload.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.MessagePayload.prototype.setText = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.swagchat.protobuf.MessagePayload.prototype.clearText = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.MessagePayload.prototype.hasText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string mime = 11;
 * @return {string}
 */
proto.swagchat.protobuf.MessagePayload.prototype.getMime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.MessagePayload.prototype.setMime = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.MessagePayload.prototype.clearMime = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.MessagePayload.prototype.hasMime = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string filename = 12;
 * @return {string}
 */
proto.swagchat.protobuf.MessagePayload.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.MessagePayload.prototype.setFilename = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.MessagePayload.prototype.clearFilename = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.MessagePayload.prototype.hasFilename = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string sourceUrl = 13;
 * @return {string}
 */
proto.swagchat.protobuf.MessagePayload.prototype.getSourceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.MessagePayload.prototype.setSourceurl = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.MessagePayload.prototype.clearSourceurl = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.MessagePayload.prototype.hasSourceurl = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string thumbnailUrl = 14;
 * @return {string}
 */
proto.swagchat.protobuf.MessagePayload.prototype.getThumbnailurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.MessagePayload.prototype.setThumbnailurl = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.MessagePayload.prototype.clearThumbnailurl = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.MessagePayload.prototype.hasThumbnailurl = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int32 width = 15;
 * @return {number}
 */
proto.swagchat.protobuf.MessagePayload.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.MessagePayload.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.swagchat.protobuf.MessagePayload.prototype.clearWidth = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.MessagePayload.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional int32 height = 16;
 * @return {number}
 */
proto.swagchat.protobuf.MessagePayload.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.MessagePayload.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.swagchat.protobuf.MessagePayload.prototype.clearHeight = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.MessagePayload.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 16) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.Device.displayName = 'proto.swagchat.protobuf.Device';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.Device} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    platform: jspb.Message.getFieldWithDefault(msg, 12, 0),
    token: jspb.Message.getFieldWithDefault(msg, 13, ""),
    notificationDeviceId: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.Device}
 */
proto.swagchat.protobuf.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.Device;
  return proto.swagchat.protobuf.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.Device}
 */
proto.swagchat.protobuf.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlatform(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotificationDeviceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.Device} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPlatform();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getNotificationDeviceId();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string user_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.Device.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Device.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 platform = 12;
 * @return {number}
 */
proto.swagchat.protobuf.Device.prototype.getPlatform = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Device.prototype.setPlatform = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string token = 13;
 * @return {string}
 */
proto.swagchat.protobuf.Device.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Device.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string notification_device_id = 14;
 * @return {string}
 */
proto.swagchat.protobuf.Device.prototype.getNotificationDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Device.prototype.setNotificationDeviceId = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.RoomIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.RoomIds.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.RoomIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.RoomIds.displayName = 'proto.swagchat.protobuf.RoomIds';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.RoomIds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.RoomIds.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.RoomIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.RoomIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomIdsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.RoomIds}
 */
proto.swagchat.protobuf.RoomIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.RoomIds;
  return proto.swagchat.protobuf.RoomIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.RoomIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.RoomIds}
 */
proto.swagchat.protobuf.RoomIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoomIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.RoomIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.RoomIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.RoomIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string room_ids = 1;
 * @return {!Array.<string>}
 */
proto.swagchat.protobuf.RoomIds.prototype.getRoomIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.swagchat.protobuf.RoomIds.prototype.setRoomIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.RoomIds.prototype.addRoomIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.swagchat.protobuf.RoomIds.prototype.clearRoomIdsList = function() {
  this.setRoomIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.UserIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.UserIds.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.UserIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.UserIds.displayName = 'proto.swagchat.protobuf.UserIds';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.UserIds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.UserIds.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.UserIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.UserIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UserIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    userIdsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.UserIds}
 */
proto.swagchat.protobuf.UserIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.UserIds;
  return proto.swagchat.protobuf.UserIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.UserIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.UserIds}
 */
proto.swagchat.protobuf.UserIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.UserIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.UserIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.UserIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UserIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string user_ids = 1;
 * @return {!Array.<string>}
 */
proto.swagchat.protobuf.UserIds.prototype.getUserIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.swagchat.protobuf.UserIds.prototype.setUserIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.UserIds.prototype.addUserIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.swagchat.protobuf.UserIds.prototype.clearUserIdsList = function() {
  this.setUserIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.RoleIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.RoleIds.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.RoleIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.RoleIds.displayName = 'proto.swagchat.protobuf.RoleIds';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.RoleIds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.RoleIds.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.RoleIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.RoleIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoleIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleIdsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.RoleIds}
 */
proto.swagchat.protobuf.RoleIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.RoleIds;
  return proto.swagchat.protobuf.RoleIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.RoleIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.RoleIds}
 */
proto.swagchat.protobuf.RoleIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setRoleIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.RoleIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.RoleIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.RoleIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoleIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 role_ids = 1;
 * @return {!Array.<number>}
 */
proto.swagchat.protobuf.RoleIds.prototype.getRoleIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.swagchat.protobuf.RoleIds.prototype.setRoleIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.RoleIds.prototype.addRoleIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.swagchat.protobuf.RoleIds.prototype.clearRoleIdsList = function() {
  this.setRoleIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.ErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.ErrorResponse.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.ErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.ErrorResponse.displayName = 'proto.swagchat.protobuf.ErrorResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.ErrorResponse.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.ErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.ErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.ErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.ErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    developerMessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    info: jspb.Message.getFieldWithDefault(msg, 3, ""),
    invalidParamsList: jspb.Message.toObjectList(msg.getInvalidParamsList(),
    proto.swagchat.protobuf.InvalidParam.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.ErrorResponse}
 */
proto.swagchat.protobuf.ErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.ErrorResponse;
  return proto.swagchat.protobuf.ErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.ErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.ErrorResponse}
 */
proto.swagchat.protobuf.ErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeveloperMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    case 5:
      var value = new proto.swagchat.protobuf.InvalidParam;
      reader.readMessage(value,proto.swagchat.protobuf.InvalidParam.deserializeBinaryFromReader);
      msg.addInvalidParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.ErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.ErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.ErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.ErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeveloperMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInvalidParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.swagchat.protobuf.InvalidParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.swagchat.protobuf.ErrorResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.ErrorResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string developer_message = 2;
 * @return {string}
 */
proto.swagchat.protobuf.ErrorResponse.prototype.getDeveloperMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.ErrorResponse.prototype.setDeveloperMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string info = 3;
 * @return {string}
 */
proto.swagchat.protobuf.ErrorResponse.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.ErrorResponse.prototype.setInfo = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated InvalidParam invalid_params = 5;
 * @return {!Array.<!proto.swagchat.protobuf.InvalidParam>}
 */
proto.swagchat.protobuf.ErrorResponse.prototype.getInvalidParamsList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.InvalidParam>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.InvalidParam, 5));
};


/** @param {!Array.<!proto.swagchat.protobuf.InvalidParam>} value */
proto.swagchat.protobuf.ErrorResponse.prototype.setInvalidParamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.swagchat.protobuf.InvalidParam=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.InvalidParam}
 */
proto.swagchat.protobuf.ErrorResponse.prototype.addInvalidParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.swagchat.protobuf.InvalidParam, opt_index);
};


proto.swagchat.protobuf.ErrorResponse.prototype.clearInvalidParamsList = function() {
  this.setInvalidParamsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.InvalidParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.InvalidParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.InvalidParam.displayName = 'proto.swagchat.protobuf.InvalidParam';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.InvalidParam.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.InvalidParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.InvalidParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.InvalidParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.InvalidParam}
 */
proto.swagchat.protobuf.InvalidParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.InvalidParam;
  return proto.swagchat.protobuf.InvalidParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.InvalidParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.InvalidParam}
 */
proto.swagchat.protobuf.InvalidParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.InvalidParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.InvalidParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.InvalidParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.InvalidParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.swagchat.protobuf.InvalidParam.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.InvalidParam.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string reason = 2;
 * @return {string}
 */
proto.swagchat.protobuf.InvalidParam.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.InvalidParam.prototype.setReason = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.OrderInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.OrderInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.OrderInfo.displayName = 'proto.swagchat.protobuf.OrderInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.OrderInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.OrderInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.OrderInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.OrderInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, ""),
    order: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.OrderInfo}
 */
proto.swagchat.protobuf.OrderInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.OrderInfo;
  return proto.swagchat.protobuf.OrderInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.OrderInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.OrderInfo}
 */
proto.swagchat.protobuf.OrderInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {!proto.swagchat.protobuf.Order} */ (reader.readEnum());
      msg.setOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.OrderInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.OrderInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.OrderInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.OrderInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string field = 1;
 * @return {string}
 */
proto.swagchat.protobuf.OrderInfo.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.OrderInfo.prototype.setField = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Order order = 2;
 * @return {!proto.swagchat.protobuf.Order}
 */
proto.swagchat.protobuf.OrderInfo.prototype.getOrder = function() {
  return /** @type {!proto.swagchat.protobuf.Order} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.swagchat.protobuf.Order} value */
proto.swagchat.protobuf.OrderInfo.prototype.setOrder = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.swagchat.protobuf.Order = {
  ASC: 0,
  DESC: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.Room = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.Room.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.Room, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.Room.displayName = 'proto.swagchat.protobuf.Room';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.Room.repeatedFields_ = [40];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.Room.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.Room.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.Room} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.Room.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 11),
    roomId: jspb.Message.getField(msg, 12),
    userId: jspb.Message.getField(msg, 13),
    name: jspb.Message.getField(msg, 14),
    pictureUrl: jspb.Message.getField(msg, 15),
    informationUrl: jspb.Message.getField(msg, 16),
    type: jspb.Message.getField(msg, 17),
    canLeft: jspb.Message.getField(msg, 18),
    speechMode: jspb.Message.getField(msg, 19),
    metaData: msg.getMetaData_asB64(),
    availableMessageTypes: jspb.Message.getField(msg, 21),
    lastMessage: jspb.Message.getField(msg, 22),
    lastMessageUpdated: jspb.Message.getField(msg, 23),
    messageCount: jspb.Message.getField(msg, 24),
    notificationTopicId: jspb.Message.getField(msg, 25),
    created: jspb.Message.getField(msg, 31),
    modified: jspb.Message.getField(msg, 32),
    deleted: jspb.Message.getField(msg, 33),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.swagchat.protobuf.UserForRoom.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.Room}
 */
proto.swagchat.protobuf.Room.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.Room;
  return proto.swagchat.protobuf.Room.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.Room} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.Room}
 */
proto.swagchat.protobuf.Room.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setPictureUrl(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setInformationUrl(value);
      break;
    case 17:
      var value = /** @type {!proto.swagchat.protobuf.RoomType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanLeft(value);
      break;
    case 19:
      var value = /** @type {!proto.swagchat.protobuf.SpeechMode} */ (reader.readEnum());
      msg.setSpeechMode(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetaData(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailableMessageTypes(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastMessage(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastMessageUpdated(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageCount(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotificationTopicId(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreated(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModified(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDeleted(value);
      break;
    case 40:
      var value = new proto.swagchat.protobuf.UserForRoom;
      reader.readMessage(value,proto.swagchat.protobuf.UserForRoom.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.Room.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.Room.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.Room} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.Room.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {!proto.swagchat.protobuf.RoomType} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {!proto.swagchat.protobuf.SpeechMode} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeString(
      21,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeString(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeInt64(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeInt64(
      24,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeString(
      25,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeInt64(
      31,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeInt64(
      32,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 33));
  if (f != null) {
    writer.writeInt64(
      33,
      f
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      40,
      f,
      proto.swagchat.protobuf.UserForRoom.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 11;
 * @return {number}
 */
proto.swagchat.protobuf.Room.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Room.prototype.setId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.Room.prototype.clearId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string room_id = 12;
 * @return {string}
 */
proto.swagchat.protobuf.Room.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Room.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.Room.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string user_id = 13;
 * @return {string}
 */
proto.swagchat.protobuf.Room.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Room.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.Room.prototype.clearUserId = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string name = 14;
 * @return {string}
 */
proto.swagchat.protobuf.Room.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Room.prototype.setName = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.Room.prototype.clearName = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasName = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string picture_url = 15;
 * @return {string}
 */
proto.swagchat.protobuf.Room.prototype.getPictureUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Room.prototype.setPictureUrl = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.swagchat.protobuf.Room.prototype.clearPictureUrl = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasPictureUrl = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string information_url = 16;
 * @return {string}
 */
proto.swagchat.protobuf.Room.prototype.getInformationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Room.prototype.setInformationUrl = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.swagchat.protobuf.Room.prototype.clearInformationUrl = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasInformationUrl = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional RoomType type = 17;
 * @return {!proto.swagchat.protobuf.RoomType}
 */
proto.swagchat.protobuf.Room.prototype.getType = function() {
  return /** @type {!proto.swagchat.protobuf.RoomType} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {!proto.swagchat.protobuf.RoomType} value */
proto.swagchat.protobuf.Room.prototype.setType = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.swagchat.protobuf.Room.prototype.clearType = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasType = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool can_Left = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.Room.prototype.getCanLeft = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.Room.prototype.setCanLeft = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.swagchat.protobuf.Room.prototype.clearCanLeft = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasCanLeft = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional SpeechMode speech_mode = 19;
 * @return {!proto.swagchat.protobuf.SpeechMode}
 */
proto.swagchat.protobuf.Room.prototype.getSpeechMode = function() {
  return /** @type {!proto.swagchat.protobuf.SpeechMode} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {!proto.swagchat.protobuf.SpeechMode} value */
proto.swagchat.protobuf.Room.prototype.setSpeechMode = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.swagchat.protobuf.Room.prototype.clearSpeechMode = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasSpeechMode = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional bytes meta_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.swagchat.protobuf.Room.prototype.getMetaData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes meta_data = 20;
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {string}
 */
proto.swagchat.protobuf.Room.prototype.getMetaData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetaData()));
};


/**
 * optional bytes meta_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.Room.prototype.getMetaData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetaData()));
};


/** @param {!(string|Uint8Array)} value */
proto.swagchat.protobuf.Room.prototype.setMetaData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.swagchat.protobuf.Room.prototype.clearMetaData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasMetaData = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional string available_message_types = 21;
 * @return {string}
 */
proto.swagchat.protobuf.Room.prototype.getAvailableMessageTypes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Room.prototype.setAvailableMessageTypes = function(value) {
  jspb.Message.setField(this, 21, value);
};


proto.swagchat.protobuf.Room.prototype.clearAvailableMessageTypes = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasAvailableMessageTypes = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional string last_message = 22;
 * @return {string}
 */
proto.swagchat.protobuf.Room.prototype.getLastMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Room.prototype.setLastMessage = function(value) {
  jspb.Message.setField(this, 22, value);
};


proto.swagchat.protobuf.Room.prototype.clearLastMessage = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasLastMessage = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional int64 last_message_updated = 23;
 * @return {number}
 */
proto.swagchat.protobuf.Room.prototype.getLastMessageUpdated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Room.prototype.setLastMessageUpdated = function(value) {
  jspb.Message.setField(this, 23, value);
};


proto.swagchat.protobuf.Room.prototype.clearLastMessageUpdated = function() {
  jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasLastMessageUpdated = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional int64 message_count = 24;
 * @return {number}
 */
proto.swagchat.protobuf.Room.prototype.getMessageCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Room.prototype.setMessageCount = function(value) {
  jspb.Message.setField(this, 24, value);
};


proto.swagchat.protobuf.Room.prototype.clearMessageCount = function() {
  jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasMessageCount = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional string notification_topic_id = 25;
 * @return {string}
 */
proto.swagchat.protobuf.Room.prototype.getNotificationTopicId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.Room.prototype.setNotificationTopicId = function(value) {
  jspb.Message.setField(this, 25, value);
};


proto.swagchat.protobuf.Room.prototype.clearNotificationTopicId = function() {
  jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasNotificationTopicId = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional int64 created = 31;
 * @return {number}
 */
proto.swagchat.protobuf.Room.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Room.prototype.setCreated = function(value) {
  jspb.Message.setField(this, 31, value);
};


proto.swagchat.protobuf.Room.prototype.clearCreated = function() {
  jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional int64 modified = 32;
 * @return {number}
 */
proto.swagchat.protobuf.Room.prototype.getModified = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Room.prototype.setModified = function(value) {
  jspb.Message.setField(this, 32, value);
};


proto.swagchat.protobuf.Room.prototype.clearModified = function() {
  jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasModified = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional int64 deleted = 33;
 * @return {number}
 */
proto.swagchat.protobuf.Room.prototype.getDeleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.Room.prototype.setDeleted = function(value) {
  jspb.Message.setField(this, 33, value);
};


proto.swagchat.protobuf.Room.prototype.clearDeleted = function() {
  jspb.Message.setField(this, 33, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.Room.prototype.hasDeleted = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * repeated UserForRoom users = 40;
 * @return {!Array.<!proto.swagchat.protobuf.UserForRoom>}
 */
proto.swagchat.protobuf.Room.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.UserForRoom>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.UserForRoom, 40));
};


/** @param {!Array.<!proto.swagchat.protobuf.UserForRoom>} value */
proto.swagchat.protobuf.Room.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 40, value);
};


/**
 * @param {!proto.swagchat.protobuf.UserForRoom=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.UserForRoom}
 */
proto.swagchat.protobuf.Room.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 40, opt_value, proto.swagchat.protobuf.UserForRoom, opt_index);
};


proto.swagchat.protobuf.Room.prototype.clearUsersList = function() {
  this.setUsersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.UserForRoom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.UserForRoom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.UserForRoom.displayName = 'proto.swagchat.protobuf.UserForRoom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.UserForRoom.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.UserForRoom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.UserForRoom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UserForRoom.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 1),
    userId: jspb.Message.getField(msg, 2),
    name: jspb.Message.getField(msg, 3),
    pictureUrl: jspb.Message.getField(msg, 4),
    informationUrl: jspb.Message.getField(msg, 5),
    metaData: msg.getMetaData_asB64(),
    canBlock: jspb.Message.getField(msg, 7),
    lastAccessed: jspb.Message.getField(msg, 8),
    ruDisplay: jspb.Message.getField(msg, 9),
    created: jspb.Message.getField(msg, 21),
    modified: jspb.Message.getField(msg, 22)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.UserForRoom}
 */
proto.swagchat.protobuf.UserForRoom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.UserForRoom;
  return proto.swagchat.protobuf.UserForRoom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.UserForRoom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.UserForRoom}
 */
proto.swagchat.protobuf.UserForRoom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPictureUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInformationUrl(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetaData(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanBlock(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastAccessed(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRuDisplay(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreated(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.UserForRoom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.UserForRoom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.UserForRoom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UserForRoom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeInt64(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeInt64(
      22,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.swagchat.protobuf.UserForRoom.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UserForRoom.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.swagchat.protobuf.UserForRoom.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UserForRoom.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.swagchat.protobuf.UserForRoom.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UserForRoom.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.swagchat.protobuf.UserForRoom.prototype.clearUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UserForRoom.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.swagchat.protobuf.UserForRoom.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UserForRoom.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.swagchat.protobuf.UserForRoom.prototype.clearName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UserForRoom.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string picture_url = 4;
 * @return {string}
 */
proto.swagchat.protobuf.UserForRoom.prototype.getPictureUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UserForRoom.prototype.setPictureUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.swagchat.protobuf.UserForRoom.prototype.clearPictureUrl = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UserForRoom.prototype.hasPictureUrl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string information_url = 5;
 * @return {string}
 */
proto.swagchat.protobuf.UserForRoom.prototype.getInformationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UserForRoom.prototype.setInformationUrl = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.swagchat.protobuf.UserForRoom.prototype.clearInformationUrl = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UserForRoom.prototype.hasInformationUrl = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes meta_data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.swagchat.protobuf.UserForRoom.prototype.getMetaData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes meta_data = 6;
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {string}
 */
proto.swagchat.protobuf.UserForRoom.prototype.getMetaData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetaData()));
};


/**
 * optional bytes meta_data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.UserForRoom.prototype.getMetaData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetaData()));
};


/** @param {!(string|Uint8Array)} value */
proto.swagchat.protobuf.UserForRoom.prototype.setMetaData = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.swagchat.protobuf.UserForRoom.prototype.clearMetaData = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UserForRoom.prototype.hasMetaData = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool can_block = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.UserForRoom.prototype.getCanBlock = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.UserForRoom.prototype.setCanBlock = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.swagchat.protobuf.UserForRoom.prototype.clearCanBlock = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UserForRoom.prototype.hasCanBlock = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 last_accessed = 8;
 * @return {number}
 */
proto.swagchat.protobuf.UserForRoom.prototype.getLastAccessed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.UserForRoom.prototype.setLastAccessed = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.swagchat.protobuf.UserForRoom.prototype.clearLastAccessed = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UserForRoom.prototype.hasLastAccessed = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool ru_display = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.UserForRoom.prototype.getRuDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.UserForRoom.prototype.setRuDisplay = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.swagchat.protobuf.UserForRoom.prototype.clearRuDisplay = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UserForRoom.prototype.hasRuDisplay = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int64 created = 21;
 * @return {number}
 */
proto.swagchat.protobuf.UserForRoom.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.UserForRoom.prototype.setCreated = function(value) {
  jspb.Message.setField(this, 21, value);
};


proto.swagchat.protobuf.UserForRoom.prototype.clearCreated = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UserForRoom.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional int64 modified = 22;
 * @return {number}
 */
proto.swagchat.protobuf.UserForRoom.prototype.getModified = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.UserForRoom.prototype.setModified = function(value) {
  jspb.Message.setField(this, 22, value);
};


proto.swagchat.protobuf.UserForRoom.prototype.clearModified = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UserForRoom.prototype.hasModified = function() {
  return jspb.Message.getField(this, 22) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.CreateRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.CreateRoomRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.CreateRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.CreateRoomRequest.displayName = 'proto.swagchat.protobuf.CreateRoomRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.CreateRoomRequest.repeatedFields_ = [41];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.CreateRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.CreateRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.CreateRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 12),
    userId: jspb.Message.getField(msg, 13),
    name: jspb.Message.getField(msg, 14),
    pictureUrl: jspb.Message.getField(msg, 15),
    informationUrl: jspb.Message.getField(msg, 16),
    type: jspb.Message.getField(msg, 7),
    canLeft: jspb.Message.getField(msg, 25),
    speechMode: jspb.Message.getField(msg, 26),
    metaData: msg.getMetaData_asB64(),
    availableMessageTypes: jspb.Message.getField(msg, 18),
    userIdsList: jspb.Message.getRepeatedField(msg, 41)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.CreateRoomRequest}
 */
proto.swagchat.protobuf.CreateRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.CreateRoomRequest;
  return proto.swagchat.protobuf.CreateRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.CreateRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.CreateRoomRequest}
 */
proto.swagchat.protobuf.CreateRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setPictureUrl(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setInformationUrl(value);
      break;
    case 7:
      var value = /** @type {!proto.swagchat.protobuf.RoomType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 25:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanLeft(value);
      break;
    case 26:
      var value = /** @type {!proto.swagchat.protobuf.SpeechMode} */ (reader.readEnum());
      msg.setSpeechMode(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetaData(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailableMessageTypes(value);
      break;
    case 41:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.CreateRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.CreateRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.CreateRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
  f = /** @type {!proto.swagchat.protobuf.RoomType} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 25));
  if (f != null) {
    writer.writeBool(
      25,
      f
    );
  }
  f = /** @type {!proto.swagchat.protobuf.SpeechMode} */ (jspb.Message.getField(message, 26));
  if (f != null) {
    writer.writeEnum(
      26,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      41,
      f
    );
  }
};


/**
 * optional string room_id = 12;
 * @return {string}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateRoomRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.CreateRoomRequest.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string user_id = 13;
 * @return {string}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateRoomRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.CreateRoomRequest.prototype.clearUserId = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string name = 14;
 * @return {string}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateRoomRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.CreateRoomRequest.prototype.clearName = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string picture_url = 15;
 * @return {string}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.getPictureUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateRoomRequest.prototype.setPictureUrl = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.swagchat.protobuf.CreateRoomRequest.prototype.clearPictureUrl = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.hasPictureUrl = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string information_url = 16;
 * @return {string}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.getInformationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateRoomRequest.prototype.setInformationUrl = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.swagchat.protobuf.CreateRoomRequest.prototype.clearInformationUrl = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.hasInformationUrl = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional RoomType type = 7;
 * @return {!proto.swagchat.protobuf.RoomType}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.getType = function() {
  return /** @type {!proto.swagchat.protobuf.RoomType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.swagchat.protobuf.RoomType} value */
proto.swagchat.protobuf.CreateRoomRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.swagchat.protobuf.CreateRoomRequest.prototype.clearType = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.hasType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool can_Left = 25;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.getCanLeft = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 25, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.CreateRoomRequest.prototype.setCanLeft = function(value) {
  jspb.Message.setField(this, 25, value);
};


proto.swagchat.protobuf.CreateRoomRequest.prototype.clearCanLeft = function() {
  jspb.Message.setField(this, 25, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.hasCanLeft = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional SpeechMode speech_mode = 26;
 * @return {!proto.swagchat.protobuf.SpeechMode}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.getSpeechMode = function() {
  return /** @type {!proto.swagchat.protobuf.SpeechMode} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {!proto.swagchat.protobuf.SpeechMode} value */
proto.swagchat.protobuf.CreateRoomRequest.prototype.setSpeechMode = function(value) {
  jspb.Message.setField(this, 26, value);
};


proto.swagchat.protobuf.CreateRoomRequest.prototype.clearSpeechMode = function() {
  jspb.Message.setField(this, 26, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.hasSpeechMode = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional bytes meta_data = 17;
 * @return {!(string|Uint8Array)}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.getMetaData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes meta_data = 17;
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {string}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.getMetaData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetaData()));
};


/**
 * optional bytes meta_data = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.getMetaData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetaData()));
};


/** @param {!(string|Uint8Array)} value */
proto.swagchat.protobuf.CreateRoomRequest.prototype.setMetaData = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.swagchat.protobuf.CreateRoomRequest.prototype.clearMetaData = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.hasMetaData = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string available_message_types = 18;
 * @return {string}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.getAvailableMessageTypes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateRoomRequest.prototype.setAvailableMessageTypes = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.swagchat.protobuf.CreateRoomRequest.prototype.clearAvailableMessageTypes = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.hasAvailableMessageTypes = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * repeated string user_ids = 41;
 * @return {!Array.<string>}
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.getUserIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 41));
};


/** @param {!Array.<string>} value */
proto.swagchat.protobuf.CreateRoomRequest.prototype.setUserIdsList = function(value) {
  jspb.Message.setField(this, 41, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.CreateRoomRequest.prototype.addUserIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 41, value, opt_index);
};


proto.swagchat.protobuf.CreateRoomRequest.prototype.clearUserIdsList = function() {
  this.setUserIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.GetRoomsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.GetRoomsRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.GetRoomsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.GetRoomsRequest.displayName = 'proto.swagchat.protobuf.GetRoomsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.GetRoomsRequest.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.GetRoomsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.GetRoomsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.GetRoomsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetRoomsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getField(msg, 11),
    offset: jspb.Message.getField(msg, 12),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.swagchat.protobuf.OrderInfo.toObject, includeInstance),
    userId: jspb.Message.getField(msg, 14),
    filter: jspb.Message.getField(msg, 15)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.GetRoomsRequest}
 */
proto.swagchat.protobuf.GetRoomsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.GetRoomsRequest;
  return proto.swagchat.protobuf.GetRoomsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.GetRoomsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.GetRoomsRequest}
 */
proto.swagchat.protobuf.GetRoomsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 13:
      var value = new proto.swagchat.protobuf.OrderInfo;
      reader.readMessage(value,proto.swagchat.protobuf.OrderInfo.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 15:
      var value = /** @type {!proto.swagchat.protobuf.RoomsFilter} */ (reader.readEnum());
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.GetRoomsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.GetRoomsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.GetRoomsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetRoomsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.swagchat.protobuf.OrderInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {!proto.swagchat.protobuf.RoomsFilter} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeEnum(
      15,
      f
    );
  }
};


/**
 * optional int32 limit = 11;
 * @return {number}
 */
proto.swagchat.protobuf.GetRoomsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.GetRoomsRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.GetRoomsRequest.prototype.clearLimit = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetRoomsRequest.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 offset = 12;
 * @return {number}
 */
proto.swagchat.protobuf.GetRoomsRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.GetRoomsRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.GetRoomsRequest.prototype.clearOffset = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetRoomsRequest.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated OrderInfo orders = 13;
 * @return {!Array.<!proto.swagchat.protobuf.OrderInfo>}
 */
proto.swagchat.protobuf.GetRoomsRequest.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.OrderInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.OrderInfo, 13));
};


/** @param {!Array.<!proto.swagchat.protobuf.OrderInfo>} value */
proto.swagchat.protobuf.GetRoomsRequest.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.swagchat.protobuf.OrderInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.OrderInfo}
 */
proto.swagchat.protobuf.GetRoomsRequest.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.swagchat.protobuf.OrderInfo, opt_index);
};


proto.swagchat.protobuf.GetRoomsRequest.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};


/**
 * optional string user_id = 14;
 * @return {string}
 */
proto.swagchat.protobuf.GetRoomsRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.GetRoomsRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.GetRoomsRequest.prototype.clearUserId = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetRoomsRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional RoomsFilter filter = 15;
 * @return {!proto.swagchat.protobuf.RoomsFilter}
 */
proto.swagchat.protobuf.GetRoomsRequest.prototype.getFilter = function() {
  return /** @type {!proto.swagchat.protobuf.RoomsFilter} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {!proto.swagchat.protobuf.RoomsFilter} value */
proto.swagchat.protobuf.GetRoomsRequest.prototype.setFilter = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.swagchat.protobuf.GetRoomsRequest.prototype.clearFilter = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetRoomsRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.RoomsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.RoomsResponse.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.RoomsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.RoomsResponse.displayName = 'proto.swagchat.protobuf.RoomsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.RoomsResponse.repeatedFields_ = [1,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.RoomsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.RoomsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.RoomsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomsList: jspb.Message.toObjectList(msg.getRoomsList(),
    proto.swagchat.protobuf.Room.toObject, includeInstance),
    allcount: jspb.Message.getField(msg, 2),
    limit: jspb.Message.getField(msg, 3),
    offset: jspb.Message.getField(msg, 4),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.swagchat.protobuf.OrderInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.RoomsResponse}
 */
proto.swagchat.protobuf.RoomsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.RoomsResponse;
  return proto.swagchat.protobuf.RoomsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.RoomsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.RoomsResponse}
 */
proto.swagchat.protobuf.RoomsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.swagchat.protobuf.Room;
      reader.readMessage(value,proto.swagchat.protobuf.Room.deserializeBinaryFromReader);
      msg.addRooms(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllcount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 5:
      var value = new proto.swagchat.protobuf.OrderInfo;
      reader.readMessage(value,proto.swagchat.protobuf.OrderInfo.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.RoomsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.RoomsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.RoomsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.swagchat.protobuf.Room.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.swagchat.protobuf.OrderInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Room rooms = 1;
 * @return {!Array.<!proto.swagchat.protobuf.Room>}
 */
proto.swagchat.protobuf.RoomsResponse.prototype.getRoomsList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.Room>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.Room, 1));
};


/** @param {!Array.<!proto.swagchat.protobuf.Room>} value */
proto.swagchat.protobuf.RoomsResponse.prototype.setRoomsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.swagchat.protobuf.Room=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.Room}
 */
proto.swagchat.protobuf.RoomsResponse.prototype.addRooms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.swagchat.protobuf.Room, opt_index);
};


proto.swagchat.protobuf.RoomsResponse.prototype.clearRoomsList = function() {
  this.setRoomsList([]);
};


/**
 * optional int64 allCount = 2;
 * @return {number}
 */
proto.swagchat.protobuf.RoomsResponse.prototype.getAllcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.RoomsResponse.prototype.setAllcount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.swagchat.protobuf.RoomsResponse.prototype.clearAllcount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomsResponse.prototype.hasAllcount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.swagchat.protobuf.RoomsResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.RoomsResponse.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.swagchat.protobuf.RoomsResponse.prototype.clearLimit = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomsResponse.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 offset = 4;
 * @return {number}
 */
proto.swagchat.protobuf.RoomsResponse.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.RoomsResponse.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.swagchat.protobuf.RoomsResponse.prototype.clearOffset = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomsResponse.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated OrderInfo orders = 5;
 * @return {!Array.<!proto.swagchat.protobuf.OrderInfo>}
 */
proto.swagchat.protobuf.RoomsResponse.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.OrderInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.OrderInfo, 5));
};


/** @param {!Array.<!proto.swagchat.protobuf.OrderInfo>} value */
proto.swagchat.protobuf.RoomsResponse.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.swagchat.protobuf.OrderInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.OrderInfo}
 */
proto.swagchat.protobuf.RoomsResponse.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.swagchat.protobuf.OrderInfo, opt_index);
};


proto.swagchat.protobuf.RoomsResponse.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.GetRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.GetRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.GetRoomRequest.displayName = 'proto.swagchat.protobuf.GetRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.GetRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.GetRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.GetRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.GetRoomRequest}
 */
proto.swagchat.protobuf.GetRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.GetRoomRequest;
  return proto.swagchat.protobuf.GetRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.GetRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.GetRoomRequest}
 */
proto.swagchat.protobuf.GetRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.GetRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.GetRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.GetRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string room_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.GetRoomRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.GetRoomRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.GetRoomRequest.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetRoomRequest.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.UpdateRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.UpdateRoomRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.UpdateRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.UpdateRoomRequest.displayName = 'proto.swagchat.protobuf.UpdateRoomRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.UpdateRoomRequest.repeatedFields_ = [22];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.UpdateRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.UpdateRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UpdateRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 11),
    name: jspb.Message.getField(msg, 13),
    pictureUrl: jspb.Message.getField(msg, 14),
    informationUrl: jspb.Message.getField(msg, 15),
    type: jspb.Message.getField(msg, 17),
    canLeft: jspb.Message.getField(msg, 18),
    speechMode: jspb.Message.getField(msg, 19),
    metaData: msg.getMetaData_asB64(),
    availableMessageTypes: jspb.Message.getField(msg, 21),
    userIdsList: jspb.Message.getRepeatedField(msg, 22)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.UpdateRoomRequest}
 */
proto.swagchat.protobuf.UpdateRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.UpdateRoomRequest;
  return proto.swagchat.protobuf.UpdateRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.UpdateRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.UpdateRoomRequest}
 */
proto.swagchat.protobuf.UpdateRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPictureUrl(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setInformationUrl(value);
      break;
    case 17:
      var value = /** @type {!proto.swagchat.protobuf.RoomType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanLeft(value);
      break;
    case 19:
      var value = /** @type {!proto.swagchat.protobuf.SpeechMode} */ (reader.readEnum());
      msg.setSpeechMode(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetaData(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailableMessageTypes(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.UpdateRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.UpdateRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UpdateRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {!proto.swagchat.protobuf.RoomType} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {!proto.swagchat.protobuf.SpeechMode} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      22,
      f
    );
  }
};


/**
 * optional string room_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.UpdateRoomRequest.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string name = 13;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.UpdateRoomRequest.prototype.clearName = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string picture_url = 14;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.getPictureUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.setPictureUrl = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.UpdateRoomRequest.prototype.clearPictureUrl = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.hasPictureUrl = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string information_url = 15;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.getInformationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.setInformationUrl = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.swagchat.protobuf.UpdateRoomRequest.prototype.clearInformationUrl = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.hasInformationUrl = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional RoomType type = 17;
 * @return {!proto.swagchat.protobuf.RoomType}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.getType = function() {
  return /** @type {!proto.swagchat.protobuf.RoomType} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {!proto.swagchat.protobuf.RoomType} value */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.swagchat.protobuf.UpdateRoomRequest.prototype.clearType = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.hasType = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool can_Left = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.getCanLeft = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.setCanLeft = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.swagchat.protobuf.UpdateRoomRequest.prototype.clearCanLeft = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.hasCanLeft = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional SpeechMode speech_mode = 19;
 * @return {!proto.swagchat.protobuf.SpeechMode}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.getSpeechMode = function() {
  return /** @type {!proto.swagchat.protobuf.SpeechMode} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {!proto.swagchat.protobuf.SpeechMode} value */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.setSpeechMode = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.swagchat.protobuf.UpdateRoomRequest.prototype.clearSpeechMode = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.hasSpeechMode = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional bytes meta_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.getMetaData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes meta_data = 20;
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {string}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.getMetaData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetaData()));
};


/**
 * optional bytes meta_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.getMetaData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetaData()));
};


/** @param {!(string|Uint8Array)} value */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.setMetaData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.swagchat.protobuf.UpdateRoomRequest.prototype.clearMetaData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.hasMetaData = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional string available_message_types = 21;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.getAvailableMessageTypes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.setAvailableMessageTypes = function(value) {
  jspb.Message.setField(this, 21, value);
};


proto.swagchat.protobuf.UpdateRoomRequest.prototype.clearAvailableMessageTypes = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.hasAvailableMessageTypes = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * repeated string user_ids = 22;
 * @return {!Array.<string>}
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.getUserIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 22));
};


/** @param {!Array.<string>} value */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.setUserIdsList = function(value) {
  jspb.Message.setField(this, 22, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.UpdateRoomRequest.prototype.addUserIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 22, value, opt_index);
};


proto.swagchat.protobuf.UpdateRoomRequest.prototype.clearUserIdsList = function() {
  this.setUserIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.DeleteRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.DeleteRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.DeleteRoomRequest.displayName = 'proto.swagchat.protobuf.DeleteRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.DeleteRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.DeleteRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.DeleteRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.DeleteRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.DeleteRoomRequest}
 */
proto.swagchat.protobuf.DeleteRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.DeleteRoomRequest;
  return proto.swagchat.protobuf.DeleteRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.DeleteRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.DeleteRoomRequest}
 */
proto.swagchat.protobuf.DeleteRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.DeleteRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.DeleteRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.DeleteRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.DeleteRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string room_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.DeleteRoomRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.DeleteRoomRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.DeleteRoomRequest.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.DeleteRoomRequest.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.GetRoomMessagesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.GetRoomMessagesRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.GetRoomMessagesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.GetRoomMessagesRequest.displayName = 'proto.swagchat.protobuf.GetRoomMessagesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.repeatedFields_ = [13,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.GetRoomMessagesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.GetRoomMessagesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getField(msg, 11),
    offset: jspb.Message.getField(msg, 12),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.swagchat.protobuf.OrderInfo.toObject, includeInstance),
    roomId: jspb.Message.getField(msg, 14),
    roleIdsList: jspb.Message.getRepeatedField(msg, 15)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.GetRoomMessagesRequest}
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.GetRoomMessagesRequest;
  return proto.swagchat.protobuf.GetRoomMessagesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.GetRoomMessagesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.GetRoomMessagesRequest}
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 13:
      var value = new proto.swagchat.protobuf.OrderInfo;
      reader.readMessage(value,proto.swagchat.protobuf.OrderInfo.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addRoleIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.GetRoomMessagesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.GetRoomMessagesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.swagchat.protobuf.OrderInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getRoleIdsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      15,
      f
    );
  }
};


/**
 * optional int32 limit = 11;
 * @return {number}
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.clearLimit = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 offset = 12;
 * @return {number}
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.clearOffset = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated OrderInfo orders = 13;
 * @return {!Array.<!proto.swagchat.protobuf.OrderInfo>}
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.OrderInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.OrderInfo, 13));
};


/** @param {!Array.<!proto.swagchat.protobuf.OrderInfo>} value */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.swagchat.protobuf.OrderInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.OrderInfo}
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.swagchat.protobuf.OrderInfo, opt_index);
};


proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};


/**
 * optional string room_id = 14;
 * @return {string}
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * repeated int32 role_ids = 15;
 * @return {!Array.<number>}
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.getRoleIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 15));
};


/** @param {!Array.<number>} value */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.setRoleIdsList = function(value) {
  jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.addRoleIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


proto.swagchat.protobuf.GetRoomMessagesRequest.prototype.clearRoleIdsList = function() {
  this.setRoleIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.RoomMessagesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.RoomMessagesResponse.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.RoomMessagesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.RoomMessagesResponse.displayName = 'proto.swagchat.protobuf.RoomMessagesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.RoomMessagesResponse.repeatedFields_ = [1,5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.RoomMessagesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.RoomMessagesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomMessagesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.swagchat.protobuf.Message.toObject, includeInstance),
    allcount: jspb.Message.getField(msg, 2),
    limit: jspb.Message.getField(msg, 3),
    offset: jspb.Message.getField(msg, 4),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.swagchat.protobuf.OrderInfo.toObject, includeInstance),
    roomId: jspb.Message.getField(msg, 6),
    roleIdsList: jspb.Message.getRepeatedField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.RoomMessagesResponse}
 */
proto.swagchat.protobuf.RoomMessagesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.RoomMessagesResponse;
  return proto.swagchat.protobuf.RoomMessagesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.RoomMessagesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.RoomMessagesResponse}
 */
proto.swagchat.protobuf.RoomMessagesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.swagchat.protobuf.Message;
      reader.readMessage(value,proto.swagchat.protobuf.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllcount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 5:
      var value = new proto.swagchat.protobuf.OrderInfo;
      reader.readMessage(value,proto.swagchat.protobuf.OrderInfo.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addRoleIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.RoomMessagesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.RoomMessagesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomMessagesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.swagchat.protobuf.Message.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.swagchat.protobuf.OrderInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRoleIdsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      7,
      f
    );
  }
};


/**
 * repeated Message messages = 1;
 * @return {!Array.<!proto.swagchat.protobuf.Message>}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.getMessagesList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.Message, 1));
};


/** @param {!Array.<!proto.swagchat.protobuf.Message>} value */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.swagchat.protobuf.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.Message}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.swagchat.protobuf.Message, opt_index);
};


proto.swagchat.protobuf.RoomMessagesResponse.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};


/**
 * optional int64 allCount = 2;
 * @return {number}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.getAllcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.setAllcount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.swagchat.protobuf.RoomMessagesResponse.prototype.clearAllcount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.hasAllcount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.swagchat.protobuf.RoomMessagesResponse.prototype.clearLimit = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 offset = 4;
 * @return {number}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.swagchat.protobuf.RoomMessagesResponse.prototype.clearOffset = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated OrderInfo orders = 5;
 * @return {!Array.<!proto.swagchat.protobuf.OrderInfo>}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.OrderInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.OrderInfo, 5));
};


/** @param {!Array.<!proto.swagchat.protobuf.OrderInfo>} value */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.swagchat.protobuf.OrderInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.OrderInfo}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.swagchat.protobuf.OrderInfo, opt_index);
};


proto.swagchat.protobuf.RoomMessagesResponse.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};


/**
 * optional string room_id = 6;
 * @return {string}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.swagchat.protobuf.RoomMessagesResponse.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated int32 role_ids = 7;
 * @return {!Array.<number>}
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.getRoleIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array.<number>} value */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.setRoleIdsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.RoomMessagesResponse.prototype.addRoleIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.swagchat.protobuf.RoomMessagesResponse.prototype.clearRoleIdsList = function() {
  this.setRoleIdsList([]);
};


/**
 * @enum {number}
 */
proto.swagchat.protobuf.RoomType = {
  NONE: 0,
  ONEONONE: 1,
  PRIVATEROOM: 2,
  PUBLICROOM: 3,
  NOTICEROOM: 4,
  ROOMTYPEEND: 5
};

/**
 * @enum {number}
 */
proto.swagchat.protobuf.SpeechMode = {
  SPEECHMODENONE: 0,
  SPEECHMODEWAKEUPWEBTOWEB: 1,
  SPEECHMODEWAKEUPWEBTOCLOUD: 2,
  SPEECHMODEWAKEUPCLOUDTOCLOUD: 3,
  SPEECHMODEALWAYS: 4,
  SPEECHMODEMANUAL: 5,
  SPEECHMODEEND: 6
};

/**
 * @enum {number}
 */
proto.swagchat.protobuf.RoomsFilter = {
  ONLINE: 0,
  UNREAD: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.RoomUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.RoomUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.RoomUser.displayName = 'proto.swagchat.protobuf.RoomUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.RoomUser.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.RoomUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.RoomUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 11),
    userId: jspb.Message.getField(msg, 12),
    unreadCount: jspb.Message.getField(msg, 13),
    display: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.RoomUser}
 */
proto.swagchat.protobuf.RoomUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.RoomUser;
  return proto.swagchat.protobuf.RoomUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.RoomUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.RoomUser}
 */
proto.swagchat.protobuf.RoomUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnreadCount(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.RoomUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.RoomUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.RoomUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional string room_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.RoomUser.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.RoomUser.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.RoomUser.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomUser.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string user_id = 12;
 * @return {string}
 */
proto.swagchat.protobuf.RoomUser.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.RoomUser.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.RoomUser.prototype.clearUserId = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomUser.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 unread_count = 13;
 * @return {number}
 */
proto.swagchat.protobuf.RoomUser.prototype.getUnreadCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.RoomUser.prototype.setUnreadCount = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.RoomUser.prototype.clearUnreadCount = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomUser.prototype.hasUnreadCount = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool display = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.RoomUser.prototype.getDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.RoomUser.prototype.setDisplay = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.RoomUser.prototype.clearDisplay = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomUser.prototype.hasDisplay = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.CreateRoomUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.CreateRoomUsersRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.CreateRoomUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.CreateRoomUsersRequest.displayName = 'proto.swagchat.protobuf.CreateRoomUsersRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.CreateRoomUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.CreateRoomUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 11),
    userIdsList: jspb.Message.getRepeatedField(msg, 12),
    display: jspb.Message.getField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.CreateRoomUsersRequest}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.CreateRoomUsersRequest;
  return proto.swagchat.protobuf.CreateRoomUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.CreateRoomUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.CreateRoomUsersRequest}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIds(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.CreateRoomUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.CreateRoomUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
};


/**
 * optional string room_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated string user_ids = 12;
 * @return {!Array.<string>}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.getUserIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 12));
};


/** @param {!Array.<string>} value */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.setUserIdsList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.addUserIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.clearUserIdsList = function() {
  this.setUserIdsList([]);
};


/**
 * optional bool display = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.getDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.setDisplay = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.clearDisplay = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateRoomUsersRequest.prototype.hasDisplay = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.displayName = 'proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 11),
    roleIdsList: jspb.Message.getRepeatedField(msg, 12)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest}
 */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest;
  return proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest}
 */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addRoleIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getRoleIdsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      12,
      f
    );
  }
};


/**
 * optional string room_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated int32 role_ids = 12;
 * @return {!Array.<number>}
 */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.prototype.getRoleIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 12));
};


/** @param {!Array.<number>} value */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.prototype.setRoleIdsList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.prototype.addRoleIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.swagchat.protobuf.GetUserIdsOfRoomUserRequest.prototype.clearRoleIdsList = function() {
  this.setRoleIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.UpdateRoomUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.UpdateRoomUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.UpdateRoomUserRequest.displayName = 'proto.swagchat.protobuf.UpdateRoomUserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.UpdateRoomUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.UpdateRoomUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 11),
    userId: jspb.Message.getField(msg, 12),
    unreadCount: jspb.Message.getField(msg, 13),
    display: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.UpdateRoomUserRequest}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.UpdateRoomUserRequest;
  return proto.swagchat.protobuf.UpdateRoomUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.UpdateRoomUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.UpdateRoomUserRequest}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnreadCount(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisplay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.UpdateRoomUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.UpdateRoomUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional string room_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string user_id = 12;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.clearUserId = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 unread_count = 13;
 * @return {number}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.getUnreadCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.setUnreadCount = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.clearUnreadCount = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.hasUnreadCount = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool display = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.getDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.setDisplay = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.clearDisplay = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateRoomUserRequest.prototype.hasDisplay = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.DeleteRoomUsersRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.DeleteRoomUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.DeleteRoomUsersRequest.displayName = 'proto.swagchat.protobuf.DeleteRoomUsersRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.DeleteRoomUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.DeleteRoomUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 11),
    userIdsList: jspb.Message.getRepeatedField(msg, 12)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.DeleteRoomUsersRequest}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.DeleteRoomUsersRequest;
  return proto.swagchat.protobuf.DeleteRoomUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.DeleteRoomUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.DeleteRoomUsersRequest}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.addUserIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.DeleteRoomUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.DeleteRoomUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUserIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      12,
      f
    );
  }
};


/**
 * optional string room_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated string user_ids = 12;
 * @return {!Array.<string>}
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.getUserIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 12));
};


/** @param {!Array.<string>} value */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.setUserIdsList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.addUserIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.swagchat.protobuf.DeleteRoomUsersRequest.prototype.clearUserIdsList = function() {
  this.setUserIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.User.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.User.displayName = 'proto.swagchat.protobuf.User';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.User.repeatedFields_ = [40,41,42,43];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.User.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    userId: jspb.Message.getField(msg, 12),
    name: jspb.Message.getField(msg, 13),
    pictureUrl: jspb.Message.getField(msg, 14),
    informationUrl: jspb.Message.getField(msg, 15),
    unreadCount: jspb.Message.getField(msg, 16),
    metaData: msg.getMetaData_asB64(),
    pb_public: jspb.Message.getField(msg, 18),
    canBlock: jspb.Message.getField(msg, 19),
    lang: jspb.Message.getField(msg, 20),
    accessToken: jspb.Message.getField(msg, 21),
    lastAccessRoomId: jspb.Message.getField(msg, 22),
    lastAccessed: jspb.Message.getField(msg, 23),
    created: jspb.Message.getField(msg, 31),
    modified: jspb.Message.getField(msg, 32),
    deleted: jspb.Message.getField(msg, 33),
    rolesList: jspb.Message.getRepeatedField(msg, 40),
    roomsList: jspb.Message.toObjectList(msg.getRoomsList(),
    proto.swagchat.protobuf.RoomForUser.toObject, includeInstance),
    devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.swagchat.protobuf.Device.toObject, includeInstance),
    blocksList: jspb.Message.getRepeatedField(msg, 43)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.User}
 */
proto.swagchat.protobuf.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.User;
  return proto.swagchat.protobuf.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.User}
 */
proto.swagchat.protobuf.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPictureUrl(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setInformationUrl(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnreadCount(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetaData(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPublic(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanBlock(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setLang(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessToken(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastAccessRoomId(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastAccessed(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreated(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModified(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDeleted(value);
      break;
    case 40:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addRoles(value);
      break;
    case 41:
      var value = new proto.swagchat.protobuf.RoomForUser;
      reader.readMessage(value,proto.swagchat.protobuf.RoomForUser.deserializeBinaryFromReader);
      msg.addRooms(value);
      break;
    case 42:
      var value = new proto.swagchat.protobuf.Device;
      reader.readMessage(value,proto.swagchat.protobuf.Device.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    case 43:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeUint64(
      16,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeBool(
      19,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeString(
      21,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeString(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeInt64(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeInt64(
      31,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 32));
  if (f != null) {
    writer.writeInt64(
      32,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 33));
  if (f != null) {
    writer.writeInt64(
      33,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      40,
      f
    );
  }
  f = message.getRoomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      41,
      f,
      proto.swagchat.protobuf.RoomForUser.serializeBinaryToWriter
    );
  }
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      42,
      f,
      proto.swagchat.protobuf.Device.serializeBinaryToWriter
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      43,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.swagchat.protobuf.User.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.User.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.swagchat.protobuf.User.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_id = 12;
 * @return {string}
 */
proto.swagchat.protobuf.User.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.User.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.User.prototype.clearUserId = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string name = 13;
 * @return {string}
 */
proto.swagchat.protobuf.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.User.prototype.setName = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.User.prototype.clearName = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasName = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string picture_url = 14;
 * @return {string}
 */
proto.swagchat.protobuf.User.prototype.getPictureUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.User.prototype.setPictureUrl = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.User.prototype.clearPictureUrl = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasPictureUrl = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string information_url = 15;
 * @return {string}
 */
proto.swagchat.protobuf.User.prototype.getInformationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.User.prototype.setInformationUrl = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.swagchat.protobuf.User.prototype.clearInformationUrl = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasInformationUrl = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional uint64 unread_count = 16;
 * @return {number}
 */
proto.swagchat.protobuf.User.prototype.getUnreadCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.User.prototype.setUnreadCount = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.swagchat.protobuf.User.prototype.clearUnreadCount = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasUnreadCount = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bytes meta_data = 17;
 * @return {!(string|Uint8Array)}
 */
proto.swagchat.protobuf.User.prototype.getMetaData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes meta_data = 17;
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {string}
 */
proto.swagchat.protobuf.User.prototype.getMetaData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetaData()));
};


/**
 * optional bytes meta_data = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.User.prototype.getMetaData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetaData()));
};


/** @param {!(string|Uint8Array)} value */
proto.swagchat.protobuf.User.prototype.setMetaData = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.swagchat.protobuf.User.prototype.clearMetaData = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasMetaData = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool public = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.User.prototype.getPublic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.User.prototype.setPublic = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.swagchat.protobuf.User.prototype.clearPublic = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasPublic = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional bool can_block = 19;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.User.prototype.getCanBlock = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 19, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.User.prototype.setCanBlock = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.swagchat.protobuf.User.prototype.clearCanBlock = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasCanBlock = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional string lang = 20;
 * @return {string}
 */
proto.swagchat.protobuf.User.prototype.getLang = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.User.prototype.setLang = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.swagchat.protobuf.User.prototype.clearLang = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasLang = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional string access_token = 21;
 * @return {string}
 */
proto.swagchat.protobuf.User.prototype.getAccessToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.User.prototype.setAccessToken = function(value) {
  jspb.Message.setField(this, 21, value);
};


proto.swagchat.protobuf.User.prototype.clearAccessToken = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasAccessToken = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional string last_access_room_id = 22;
 * @return {string}
 */
proto.swagchat.protobuf.User.prototype.getLastAccessRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.User.prototype.setLastAccessRoomId = function(value) {
  jspb.Message.setField(this, 22, value);
};


proto.swagchat.protobuf.User.prototype.clearLastAccessRoomId = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasLastAccessRoomId = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional int64 last_accessed = 23;
 * @return {number}
 */
proto.swagchat.protobuf.User.prototype.getLastAccessed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.User.prototype.setLastAccessed = function(value) {
  jspb.Message.setField(this, 23, value);
};


proto.swagchat.protobuf.User.prototype.clearLastAccessed = function() {
  jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasLastAccessed = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional int64 created = 31;
 * @return {number}
 */
proto.swagchat.protobuf.User.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.User.prototype.setCreated = function(value) {
  jspb.Message.setField(this, 31, value);
};


proto.swagchat.protobuf.User.prototype.clearCreated = function() {
  jspb.Message.setField(this, 31, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional int64 modified = 32;
 * @return {number}
 */
proto.swagchat.protobuf.User.prototype.getModified = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.User.prototype.setModified = function(value) {
  jspb.Message.setField(this, 32, value);
};


proto.swagchat.protobuf.User.prototype.clearModified = function() {
  jspb.Message.setField(this, 32, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasModified = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional int64 deleted = 33;
 * @return {number}
 */
proto.swagchat.protobuf.User.prototype.getDeleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 33, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.User.prototype.setDeleted = function(value) {
  jspb.Message.setField(this, 33, value);
};


proto.swagchat.protobuf.User.prototype.clearDeleted = function() {
  jspb.Message.setField(this, 33, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.User.prototype.hasDeleted = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * repeated int32 roles = 40;
 * @return {!Array.<number>}
 */
proto.swagchat.protobuf.User.prototype.getRolesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 40));
};


/** @param {!Array.<number>} value */
proto.swagchat.protobuf.User.prototype.setRolesList = function(value) {
  jspb.Message.setField(this, 40, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.User.prototype.addRoles = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 40, value, opt_index);
};


proto.swagchat.protobuf.User.prototype.clearRolesList = function() {
  this.setRolesList([]);
};


/**
 * repeated RoomForUser rooms = 41;
 * @return {!Array.<!proto.swagchat.protobuf.RoomForUser>}
 */
proto.swagchat.protobuf.User.prototype.getRoomsList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.RoomForUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.RoomForUser, 41));
};


/** @param {!Array.<!proto.swagchat.protobuf.RoomForUser>} value */
proto.swagchat.protobuf.User.prototype.setRoomsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 41, value);
};


/**
 * @param {!proto.swagchat.protobuf.RoomForUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.RoomForUser}
 */
proto.swagchat.protobuf.User.prototype.addRooms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 41, opt_value, proto.swagchat.protobuf.RoomForUser, opt_index);
};


proto.swagchat.protobuf.User.prototype.clearRoomsList = function() {
  this.setRoomsList([]);
};


/**
 * repeated Device devices = 42;
 * @return {!Array.<!proto.swagchat.protobuf.Device>}
 */
proto.swagchat.protobuf.User.prototype.getDevicesList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.Device>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.Device, 42));
};


/** @param {!Array.<!proto.swagchat.protobuf.Device>} value */
proto.swagchat.protobuf.User.prototype.setDevicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 42, value);
};


/**
 * @param {!proto.swagchat.protobuf.Device=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.Device}
 */
proto.swagchat.protobuf.User.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 42, opt_value, proto.swagchat.protobuf.Device, opt_index);
};


proto.swagchat.protobuf.User.prototype.clearDevicesList = function() {
  this.setDevicesList([]);
};


/**
 * repeated string blocks = 43;
 * @return {!Array.<string>}
 */
proto.swagchat.protobuf.User.prototype.getBlocksList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 43));
};


/** @param {!Array.<string>} value */
proto.swagchat.protobuf.User.prototype.setBlocksList = function(value) {
  jspb.Message.setField(this, 43, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.User.prototype.addBlocks = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 43, value, opt_index);
};


proto.swagchat.protobuf.User.prototype.clearBlocksList = function() {
  this.setBlocksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.RoomForUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.RoomForUser.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.RoomForUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.RoomForUser.displayName = 'proto.swagchat.protobuf.RoomForUser';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.RoomForUser.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.RoomForUser.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.RoomForUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.RoomForUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomForUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomId: jspb.Message.getField(msg, 1),
    userId: jspb.Message.getField(msg, 2),
    name: jspb.Message.getField(msg, 3),
    pictureUrl: jspb.Message.getField(msg, 4),
    informationUrl: jspb.Message.getField(msg, 5),
    metaData: msg.getMetaData_asB64(),
    type: jspb.Message.getField(msg, 7),
    lastMessage: jspb.Message.getField(msg, 8),
    lastMessageUpdated: jspb.Message.getField(msg, 9),
    canLeft: jspb.Message.getField(msg, 10),
    created: jspb.Message.getField(msg, 21),
    modified: jspb.Message.getField(msg, 22),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.swagchat.protobuf.UserForRoom.toObject, includeInstance),
    ruUnreadCount: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.RoomForUser}
 */
proto.swagchat.protobuf.RoomForUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.RoomForUser;
  return proto.swagchat.protobuf.RoomForUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.RoomForUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.RoomForUser}
 */
proto.swagchat.protobuf.RoomForUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPictureUrl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInformationUrl(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetaData(value);
      break;
    case 7:
      var value = /** @type {!proto.swagchat.protobuf.RoomType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastMessage(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastMessageUpdated(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanLeft(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreated(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModified(value);
      break;
    case 13:
      var value = new proto.swagchat.protobuf.UserForRoom;
      reader.readMessage(value,proto.swagchat.protobuf.UserForRoom.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRuUnreadCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.RoomForUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.RoomForUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.RoomForUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.RoomForUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {!proto.swagchat.protobuf.RoomType} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeInt64(
      21,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeInt64(
      22,
      f
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.swagchat.protobuf.UserForRoom.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt64(
      14,
      f
    );
  }
};


/**
 * optional string room_id = 1;
 * @return {string}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.RoomForUser.prototype.setRoomId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearRoomId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.hasRoomId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.RoomForUser.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.RoomForUser.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string picture_url = 4;
 * @return {string}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getPictureUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.RoomForUser.prototype.setPictureUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearPictureUrl = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.hasPictureUrl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string information_url = 5;
 * @return {string}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getInformationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.RoomForUser.prototype.setInformationUrl = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearInformationUrl = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.hasInformationUrl = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes meta_data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getMetaData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes meta_data = 6;
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {string}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getMetaData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetaData()));
};


/**
 * optional bytes meta_data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getMetaData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetaData()));
};


/** @param {!(string|Uint8Array)} value */
proto.swagchat.protobuf.RoomForUser.prototype.setMetaData = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearMetaData = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.hasMetaData = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RoomType type = 7;
 * @return {!proto.swagchat.protobuf.RoomType}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getType = function() {
  return /** @type {!proto.swagchat.protobuf.RoomType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.swagchat.protobuf.RoomType} value */
proto.swagchat.protobuf.RoomForUser.prototype.setType = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearType = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.hasType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string last_message = 8;
 * @return {string}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getLastMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.RoomForUser.prototype.setLastMessage = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearLastMessage = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.hasLastMessage = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int64 last_message_updated = 9;
 * @return {number}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getLastMessageUpdated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.RoomForUser.prototype.setLastMessageUpdated = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearLastMessageUpdated = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.hasLastMessageUpdated = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool can_left = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getCanLeft = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.RoomForUser.prototype.setCanLeft = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearCanLeft = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.hasCanLeft = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int64 created = 21;
 * @return {number}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.RoomForUser.prototype.setCreated = function(value) {
  jspb.Message.setField(this, 21, value);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearCreated = function() {
  jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional int64 modified = 22;
 * @return {number}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getModified = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.RoomForUser.prototype.setModified = function(value) {
  jspb.Message.setField(this, 22, value);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearModified = function() {
  jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.hasModified = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * repeated UserForRoom users = 13;
 * @return {!Array.<!proto.swagchat.protobuf.UserForRoom>}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.UserForRoom>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.UserForRoom, 13));
};


/** @param {!Array.<!proto.swagchat.protobuf.UserForRoom>} value */
proto.swagchat.protobuf.RoomForUser.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.swagchat.protobuf.UserForRoom=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.UserForRoom}
 */
proto.swagchat.protobuf.RoomForUser.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.swagchat.protobuf.UserForRoom, opt_index);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearUsersList = function() {
  this.setUsersList([]);
};


/**
 * optional int64 ru_unread_count = 14;
 * @return {number}
 */
proto.swagchat.protobuf.RoomForUser.prototype.getRuUnreadCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.RoomForUser.prototype.setRuUnreadCount = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.RoomForUser.prototype.clearRuUnreadCount = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.RoomForUser.prototype.hasRuUnreadCount = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.CreateUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.CreateUserRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.CreateUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.CreateUserRequest.displayName = 'proto.swagchat.protobuf.CreateUserRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.CreateUserRequest.repeatedFields_ = [19];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.CreateUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.CreateUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.CreateUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 11),
    name: jspb.Message.getField(msg, 12),
    pictureUrl: jspb.Message.getField(msg, 13),
    informationUrl: jspb.Message.getField(msg, 14),
    metaData: msg.getMetaData_asB64(),
    pb_public: jspb.Message.getField(msg, 16),
    canBlock: jspb.Message.getField(msg, 17),
    lang: jspb.Message.getField(msg, 18),
    roleIdsList: jspb.Message.getRepeatedField(msg, 19)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.CreateUserRequest}
 */
proto.swagchat.protobuf.CreateUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.CreateUserRequest;
  return proto.swagchat.protobuf.CreateUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.CreateUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.CreateUserRequest}
 */
proto.swagchat.protobuf.CreateUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPictureUrl(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setInformationUrl(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetaData(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPublic(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanBlock(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setLang(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addRoleIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.CreateUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.CreateUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.CreateUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getRoleIdsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      19,
      f
    );
  }
};


/**
 * optional string user_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateUserRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.CreateUserRequest.prototype.clearUserId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string name = 12;
 * @return {string}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateUserRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.CreateUserRequest.prototype.clearName = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string picture_url = 13;
 * @return {string}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.getPictureUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateUserRequest.prototype.setPictureUrl = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.CreateUserRequest.prototype.clearPictureUrl = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.hasPictureUrl = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string information_url = 14;
 * @return {string}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.getInformationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateUserRequest.prototype.setInformationUrl = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.CreateUserRequest.prototype.clearInformationUrl = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.hasInformationUrl = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bytes meta_data = 15;
 * @return {!(string|Uint8Array)}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.getMetaData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes meta_data = 15;
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {string}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.getMetaData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetaData()));
};


/**
 * optional bytes meta_data = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.getMetaData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetaData()));
};


/** @param {!(string|Uint8Array)} value */
proto.swagchat.protobuf.CreateUserRequest.prototype.setMetaData = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.swagchat.protobuf.CreateUserRequest.prototype.clearMetaData = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.hasMetaData = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bool public = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.getPublic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.CreateUserRequest.prototype.setPublic = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.swagchat.protobuf.CreateUserRequest.prototype.clearPublic = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.hasPublic = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bool can_block = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.getCanBlock = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 17, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.CreateUserRequest.prototype.setCanBlock = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.swagchat.protobuf.CreateUserRequest.prototype.clearCanBlock = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.hasCanBlock = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional string lang = 18;
 * @return {string}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.getLang = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateUserRequest.prototype.setLang = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.swagchat.protobuf.CreateUserRequest.prototype.clearLang = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.hasLang = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * repeated int32 role_ids = 19;
 * @return {!Array.<number>}
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.getRoleIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 19));
};


/** @param {!Array.<number>} value */
proto.swagchat.protobuf.CreateUserRequest.prototype.setRoleIdsList = function(value) {
  jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.CreateUserRequest.prototype.addRoleIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


proto.swagchat.protobuf.CreateUserRequest.prototype.clearRoleIdsList = function() {
  this.setRoleIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.GetUsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.GetUsersRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.GetUsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.GetUsersRequest.displayName = 'proto.swagchat.protobuf.GetUsersRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.GetUsersRequest.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.GetUsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.GetUsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.GetUsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetUsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getField(msg, 11),
    offset: jspb.Message.getField(msg, 12),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.swagchat.protobuf.OrderInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.GetUsersRequest}
 */
proto.swagchat.protobuf.GetUsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.GetUsersRequest;
  return proto.swagchat.protobuf.GetUsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.GetUsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.GetUsersRequest}
 */
proto.swagchat.protobuf.GetUsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 13:
      var value = new proto.swagchat.protobuf.OrderInfo;
      reader.readMessage(value,proto.swagchat.protobuf.OrderInfo.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.GetUsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.GetUsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.GetUsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetUsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.swagchat.protobuf.OrderInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 limit = 11;
 * @return {number}
 */
proto.swagchat.protobuf.GetUsersRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.GetUsersRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.GetUsersRequest.prototype.clearLimit = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetUsersRequest.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 offset = 12;
 * @return {number}
 */
proto.swagchat.protobuf.GetUsersRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.GetUsersRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.GetUsersRequest.prototype.clearOffset = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetUsersRequest.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated OrderInfo orders = 13;
 * @return {!Array.<!proto.swagchat.protobuf.OrderInfo>}
 */
proto.swagchat.protobuf.GetUsersRequest.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.OrderInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.OrderInfo, 13));
};


/** @param {!Array.<!proto.swagchat.protobuf.OrderInfo>} value */
proto.swagchat.protobuf.GetUsersRequest.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.swagchat.protobuf.OrderInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.OrderInfo}
 */
proto.swagchat.protobuf.GetUsersRequest.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.swagchat.protobuf.OrderInfo, opt_index);
};


proto.swagchat.protobuf.GetUsersRequest.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.UsersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.UsersResponse.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.UsersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.UsersResponse.displayName = 'proto.swagchat.protobuf.UsersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.UsersResponse.repeatedFields_ = [1,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.UsersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.UsersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.UsersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UsersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.swagchat.protobuf.User.toObject, includeInstance),
    allcount: jspb.Message.getField(msg, 2),
    limit: jspb.Message.getField(msg, 3),
    offset: jspb.Message.getField(msg, 4),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.swagchat.protobuf.OrderInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.UsersResponse}
 */
proto.swagchat.protobuf.UsersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.UsersResponse;
  return proto.swagchat.protobuf.UsersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.UsersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.UsersResponse}
 */
proto.swagchat.protobuf.UsersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.swagchat.protobuf.User;
      reader.readMessage(value,proto.swagchat.protobuf.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllcount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 5:
      var value = new proto.swagchat.protobuf.OrderInfo;
      reader.readMessage(value,proto.swagchat.protobuf.OrderInfo.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.UsersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.UsersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.UsersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UsersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.swagchat.protobuf.User.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.swagchat.protobuf.OrderInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated User users = 1;
 * @return {!Array.<!proto.swagchat.protobuf.User>}
 */
proto.swagchat.protobuf.UsersResponse.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.User, 1));
};


/** @param {!Array.<!proto.swagchat.protobuf.User>} value */
proto.swagchat.protobuf.UsersResponse.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.swagchat.protobuf.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.User}
 */
proto.swagchat.protobuf.UsersResponse.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.swagchat.protobuf.User, opt_index);
};


proto.swagchat.protobuf.UsersResponse.prototype.clearUsersList = function() {
  this.setUsersList([]);
};


/**
 * optional int64 allCount = 2;
 * @return {number}
 */
proto.swagchat.protobuf.UsersResponse.prototype.getAllcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.UsersResponse.prototype.setAllcount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.swagchat.protobuf.UsersResponse.prototype.clearAllcount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UsersResponse.prototype.hasAllcount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 limit = 3;
 * @return {number}
 */
proto.swagchat.protobuf.UsersResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.UsersResponse.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.swagchat.protobuf.UsersResponse.prototype.clearLimit = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UsersResponse.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 offset = 4;
 * @return {number}
 */
proto.swagchat.protobuf.UsersResponse.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.UsersResponse.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.swagchat.protobuf.UsersResponse.prototype.clearOffset = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UsersResponse.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated OrderInfo orders = 5;
 * @return {!Array.<!proto.swagchat.protobuf.OrderInfo>}
 */
proto.swagchat.protobuf.UsersResponse.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.OrderInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.OrderInfo, 5));
};


/** @param {!Array.<!proto.swagchat.protobuf.OrderInfo>} value */
proto.swagchat.protobuf.UsersResponse.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.swagchat.protobuf.OrderInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.OrderInfo}
 */
proto.swagchat.protobuf.UsersResponse.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.swagchat.protobuf.OrderInfo, opt_index);
};


proto.swagchat.protobuf.UsersResponse.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.GetUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.GetUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.GetUserRequest.displayName = 'proto.swagchat.protobuf.GetUserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.GetUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.GetUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.GetUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.GetUserRequest}
 */
proto.swagchat.protobuf.GetUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.GetUserRequest;
  return proto.swagchat.protobuf.GetUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.GetUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.GetUserRequest}
 */
proto.swagchat.protobuf.GetUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.GetUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.GetUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.GetUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string user_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.GetUserRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.GetUserRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.GetUserRequest.prototype.clearUserId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetUserRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.UpdateUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.UpdateUserRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.UpdateUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.UpdateUserRequest.displayName = 'proto.swagchat.protobuf.UpdateUserRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.UpdateUserRequest.repeatedFields_ = [21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.UpdateUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.UpdateUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UpdateUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 11),
    name: jspb.Message.getField(msg, 13),
    pictureUrl: jspb.Message.getField(msg, 14),
    informationUrl: jspb.Message.getField(msg, 15),
    metaData: msg.getMetaData_asB64(),
    pb_public: jspb.Message.getField(msg, 18),
    canBlock: jspb.Message.getField(msg, 19),
    lang: jspb.Message.getField(msg, 20),
    roleIdsList: jspb.Message.getRepeatedField(msg, 21)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.UpdateUserRequest}
 */
proto.swagchat.protobuf.UpdateUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.UpdateUserRequest;
  return proto.swagchat.protobuf.UpdateUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.UpdateUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.UpdateUserRequest}
 */
proto.swagchat.protobuf.UpdateUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPictureUrl(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setInformationUrl(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetaData(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPublic(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanBlock(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setLang(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addRoleIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.UpdateUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.UpdateUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UpdateUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBool(
      18,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeBool(
      19,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getRoleIdsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      21,
      f
    );
  }
};


/**
 * optional string user_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateUserRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.UpdateUserRequest.prototype.clearUserId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string name = 13;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateUserRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.UpdateUserRequest.prototype.clearName = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string picture_url = 14;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.getPictureUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateUserRequest.prototype.setPictureUrl = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.swagchat.protobuf.UpdateUserRequest.prototype.clearPictureUrl = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.hasPictureUrl = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string information_url = 15;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.getInformationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateUserRequest.prototype.setInformationUrl = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.swagchat.protobuf.UpdateUserRequest.prototype.clearInformationUrl = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.hasInformationUrl = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bytes meta_data = 17;
 * @return {!(string|Uint8Array)}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.getMetaData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes meta_data = 17;
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {string}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.getMetaData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetaData()));
};


/**
 * optional bytes meta_data = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetaData()`
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.getMetaData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetaData()));
};


/** @param {!(string|Uint8Array)} value */
proto.swagchat.protobuf.UpdateUserRequest.prototype.setMetaData = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.swagchat.protobuf.UpdateUserRequest.prototype.clearMetaData = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.hasMetaData = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bool public = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.getPublic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.UpdateUserRequest.prototype.setPublic = function(value) {
  jspb.Message.setField(this, 18, value);
};


proto.swagchat.protobuf.UpdateUserRequest.prototype.clearPublic = function() {
  jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.hasPublic = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional bool can_block = 19;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.getCanBlock = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 19, false));
};


/** @param {boolean} value */
proto.swagchat.protobuf.UpdateUserRequest.prototype.setCanBlock = function(value) {
  jspb.Message.setField(this, 19, value);
};


proto.swagchat.protobuf.UpdateUserRequest.prototype.clearCanBlock = function() {
  jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.hasCanBlock = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional string lang = 20;
 * @return {string}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.getLang = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UpdateUserRequest.prototype.setLang = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.swagchat.protobuf.UpdateUserRequest.prototype.clearLang = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.hasLang = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * repeated int32 role_ids = 21;
 * @return {!Array.<number>}
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.getRoleIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 21));
};


/** @param {!Array.<number>} value */
proto.swagchat.protobuf.UpdateUserRequest.prototype.setRoleIdsList = function(value) {
  jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.UpdateUserRequest.prototype.addRoleIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


proto.swagchat.protobuf.UpdateUserRequest.prototype.clearRoleIdsList = function() {
  this.setRoleIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.DeleteUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.DeleteUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.DeleteUserRequest.displayName = 'proto.swagchat.protobuf.DeleteUserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.DeleteUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.DeleteUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.DeleteUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.DeleteUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.DeleteUserRequest}
 */
proto.swagchat.protobuf.DeleteUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.DeleteUserRequest;
  return proto.swagchat.protobuf.DeleteUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.DeleteUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.DeleteUserRequest}
 */
proto.swagchat.protobuf.DeleteUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.DeleteUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.DeleteUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.DeleteUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.DeleteUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string user_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.DeleteUserRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.DeleteUserRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.DeleteUserRequest.prototype.clearUserId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.DeleteUserRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.GetContactsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.GetContactsRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.GetContactsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.GetContactsRequest.displayName = 'proto.swagchat.protobuf.GetContactsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.GetContactsRequest.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.GetContactsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.GetContactsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.GetContactsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetContactsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 11),
    limit: jspb.Message.getField(msg, 12),
    offset: jspb.Message.getField(msg, 13),
    ordersList: jspb.Message.toObjectList(msg.getOrdersList(),
    proto.swagchat.protobuf.OrderInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.GetContactsRequest}
 */
proto.swagchat.protobuf.GetContactsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.GetContactsRequest;
  return proto.swagchat.protobuf.GetContactsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.GetContactsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.GetContactsRequest}
 */
proto.swagchat.protobuf.GetContactsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 14:
      var value = new proto.swagchat.protobuf.OrderInfo;
      reader.readMessage(value,proto.swagchat.protobuf.OrderInfo.deserializeBinaryFromReader);
      msg.addOrders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.GetContactsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.GetContactsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.GetContactsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetContactsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getOrdersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.swagchat.protobuf.OrderInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string user_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.GetContactsRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.GetContactsRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.GetContactsRequest.prototype.clearUserId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetContactsRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 limit = 12;
 * @return {number}
 */
proto.swagchat.protobuf.GetContactsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.GetContactsRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.swagchat.protobuf.GetContactsRequest.prototype.clearLimit = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetContactsRequest.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 offset = 13;
 * @return {number}
 */
proto.swagchat.protobuf.GetContactsRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.GetContactsRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.swagchat.protobuf.GetContactsRequest.prototype.clearOffset = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetContactsRequest.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated OrderInfo orders = 14;
 * @return {!Array.<!proto.swagchat.protobuf.OrderInfo>}
 */
proto.swagchat.protobuf.GetContactsRequest.prototype.getOrdersList = function() {
  return /** @type{!Array.<!proto.swagchat.protobuf.OrderInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.swagchat.protobuf.OrderInfo, 14));
};


/** @param {!Array.<!proto.swagchat.protobuf.OrderInfo>} value */
proto.swagchat.protobuf.GetContactsRequest.prototype.setOrdersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.swagchat.protobuf.OrderInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.swagchat.protobuf.OrderInfo}
 */
proto.swagchat.protobuf.GetContactsRequest.prototype.addOrders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.swagchat.protobuf.OrderInfo, opt_index);
};


proto.swagchat.protobuf.GetContactsRequest.prototype.clearOrdersList = function() {
  this.setOrdersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.GetProfileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.GetProfileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.GetProfileRequest.displayName = 'proto.swagchat.protobuf.GetProfileRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.GetProfileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.GetProfileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.GetProfileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetProfileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.GetProfileRequest}
 */
proto.swagchat.protobuf.GetProfileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.GetProfileRequest;
  return proto.swagchat.protobuf.GetProfileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.GetProfileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.GetProfileRequest}
 */
proto.swagchat.protobuf.GetProfileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.GetProfileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.GetProfileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.GetProfileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetProfileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string user_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.GetProfileRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.GetProfileRequest.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.swagchat.protobuf.GetProfileRequest.prototype.clearUserId = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.swagchat.protobuf.GetProfileRequest.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.UserRole = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.UserRole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.UserRole.displayName = 'proto.swagchat.protobuf.UserRole';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.UserRole.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.UserRole.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.UserRole} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UserRole.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    roleId: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.UserRole}
 */
proto.swagchat.protobuf.UserRole.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.UserRole;
  return proto.swagchat.protobuf.UserRole.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.UserRole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.UserRole}
 */
proto.swagchat.protobuf.UserRole.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.UserRole.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.UserRole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.UserRole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.UserRole.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getRoleId();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional string user_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.UserRole.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.UserRole.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional int32 role_id = 12;
 * @return {number}
 */
proto.swagchat.protobuf.UserRole.prototype.getRoleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.UserRole.prototype.setRoleId = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.CreateUserRolesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.CreateUserRolesRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.CreateUserRolesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.CreateUserRolesRequest.displayName = 'proto.swagchat.protobuf.CreateUserRolesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.CreateUserRolesRequest.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.CreateUserRolesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.CreateUserRolesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.CreateUserRolesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.CreateUserRolesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    roleIdsList: jspb.Message.getRepeatedField(msg, 12)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.CreateUserRolesRequest}
 */
proto.swagchat.protobuf.CreateUserRolesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.CreateUserRolesRequest;
  return proto.swagchat.protobuf.CreateUserRolesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.CreateUserRolesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.CreateUserRolesRequest}
 */
proto.swagchat.protobuf.CreateUserRolesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 12:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setRoleIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.CreateUserRolesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.CreateUserRolesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.CreateUserRolesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.CreateUserRolesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getRoleIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      12,
      f
    );
  }
};


/**
 * optional string user_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.CreateUserRolesRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.CreateUserRolesRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * repeated int32 role_ids = 12;
 * @return {!Array.<number>}
 */
proto.swagchat.protobuf.CreateUserRolesRequest.prototype.getRoleIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 12));
};


/** @param {!Array.<number>} value */
proto.swagchat.protobuf.CreateUserRolesRequest.prototype.setRoleIdsList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.CreateUserRolesRequest.prototype.addRoleIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.swagchat.protobuf.CreateUserRolesRequest.prototype.clearRoleIdsList = function() {
  this.setRoleIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest.displayName = 'proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    roleId: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest}
 */
proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest;
  return proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest}
 */
proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoleId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoleId();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
};


/**
 * optional int32 role_id = 11;
 * @return {number}
 */
proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest.prototype.getRoleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.swagchat.protobuf.GetUserIdsOfUserRoleRequest.prototype.setRoleId = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.swagchat.protobuf.DeleteUserRolesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.swagchat.protobuf.DeleteUserRolesRequest.repeatedFields_, null);
};
goog.inherits(proto.swagchat.protobuf.DeleteUserRolesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.swagchat.protobuf.DeleteUserRolesRequest.displayName = 'proto.swagchat.protobuf.DeleteUserRolesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.swagchat.protobuf.DeleteUserRolesRequest.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.swagchat.protobuf.DeleteUserRolesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.swagchat.protobuf.DeleteUserRolesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.swagchat.protobuf.DeleteUserRolesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.DeleteUserRolesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    roleIdsList: jspb.Message.getRepeatedField(msg, 12)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.swagchat.protobuf.DeleteUserRolesRequest}
 */
proto.swagchat.protobuf.DeleteUserRolesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.swagchat.protobuf.DeleteUserRolesRequest;
  return proto.swagchat.protobuf.DeleteUserRolesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.swagchat.protobuf.DeleteUserRolesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.swagchat.protobuf.DeleteUserRolesRequest}
 */
proto.swagchat.protobuf.DeleteUserRolesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 12:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setRoleIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.swagchat.protobuf.DeleteUserRolesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.swagchat.protobuf.DeleteUserRolesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.swagchat.protobuf.DeleteUserRolesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.swagchat.protobuf.DeleteUserRolesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getRoleIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      12,
      f
    );
  }
};


/**
 * optional string user_id = 11;
 * @return {string}
 */
proto.swagchat.protobuf.DeleteUserRolesRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.swagchat.protobuf.DeleteUserRolesRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * repeated int32 role_ids = 12;
 * @return {!Array.<number>}
 */
proto.swagchat.protobuf.DeleteUserRolesRequest.prototype.getRoleIdsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 12));
};


/** @param {!Array.<number>} value */
proto.swagchat.protobuf.DeleteUserRolesRequest.prototype.setRoleIdsList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.swagchat.protobuf.DeleteUserRolesRequest.prototype.addRoleIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.swagchat.protobuf.DeleteUserRolesRequest.prototype.clearRoleIdsList = function() {
  this.setRoleIdsList([]);
};


